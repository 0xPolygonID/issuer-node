// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
	verifiable "github.com/iden3/go-schema-processor/v2/verifiable"
	protocol "github.com/iden3/iden3comm/v2/protocol"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	payments "github.com/polygonid/sh-id-platform/internal/payments"
	timeapi "github.com/polygonid/sh-id-platform/internal/timeapi"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for CreateAuthCredentialRequestCredentialStatusType.
const (
	CreateAuthCredentialRequestCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 CreateAuthCredentialRequestCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	CreateAuthCredentialRequestCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     CreateAuthCredentialRequestCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	CreateAuthCredentialRequestCredentialStatusTypeIden3commRevocationStatusV10          CreateAuthCredentialRequestCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for CreateCredentialRequestCredentialStatusType.
const (
	CreateCredentialRequestCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 CreateCredentialRequestCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	CreateCredentialRequestCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     CreateCredentialRequestCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	CreateCredentialRequestCredentialStatusTypeIden3commRevocationStatusV10          CreateCredentialRequestCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for CreateCredentialRequestProofs.
const (
	BJJSignature2021           CreateCredentialRequestProofs = "BJJSignature2021"
	Iden3SparseMerkleTreeProof CreateCredentialRequestProofs = "Iden3SparseMerkleTreeProof"
)

// Defines values for CreateIdentityRequestCredentialStatusType.
const (
	CreateIdentityRequestCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 CreateIdentityRequestCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	CreateIdentityRequestCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     CreateIdentityRequestCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	CreateIdentityRequestCredentialStatusTypeIden3commRevocationStatusV10          CreateIdentityRequestCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for CreateIdentityRequestDidMetadataType.
const (
	BJJ CreateIdentityRequestDidMetadataType = "BJJ"
	ETH CreateIdentityRequestDidMetadataType = "ETH"
)

// Defines values for CreateIdentityResponseCredentialStatusType.
const (
	CreateIdentityResponseCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 CreateIdentityResponseCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	CreateIdentityResponseCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     CreateIdentityResponseCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	CreateIdentityResponseCredentialStatusTypeIden3commRevocationStatusV10          CreateIdentityResponseCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for CreateKeyRequestKeyType.
const (
	CreateKeyRequestKeyTypeBabyjubJub CreateKeyRequestKeyType = "babyjubJub"
	CreateKeyRequestKeyTypeSecp256k1  CreateKeyRequestKeyType = "secp256k1"
)

// Defines values for CreatePaymentRequestResponseStatus.
const (
	CreatePaymentRequestResponseStatusCanceled    CreatePaymentRequestResponseStatus = "canceled"
	CreatePaymentRequestResponseStatusFailed      CreatePaymentRequestResponseStatus = "failed"
	CreatePaymentRequestResponseStatusNotVerified CreatePaymentRequestResponseStatus = "not-verified"
	CreatePaymentRequestResponseStatusPending     CreatePaymentRequestResponseStatus = "pending"
	CreatePaymentRequestResponseStatusSuccess     CreatePaymentRequestResponseStatus = "success"
)

// Defines values for DisplayMethodType.
const (
	Iden3BasicDisplayMethodV1 DisplayMethodType = "Iden3BasicDisplayMethodV1"
)

// Defines values for GetIdentitiesResponseCredentialStatusType.
const (
	GetIdentitiesResponseCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 GetIdentitiesResponseCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	GetIdentitiesResponseCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     GetIdentitiesResponseCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	GetIdentitiesResponseCredentialStatusTypeIden3commRevocationStatusV10          GetIdentitiesResponseCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for GetIdentityDetailsResponseCredentialStatusType.
const (
	GetIdentityDetailsResponseCredentialStatusTypeIden3OnchainSparseMerkleTreeProof2023 GetIdentityDetailsResponseCredentialStatusType = "Iden3OnchainSparseMerkleTreeProof2023"
	GetIdentityDetailsResponseCredentialStatusTypeIden3ReverseSparseMerkleTreeProof     GetIdentityDetailsResponseCredentialStatusType = "Iden3ReverseSparseMerkleTreeProof"
	GetIdentityDetailsResponseCredentialStatusTypeIden3commRevocationStatusV10          GetIdentityDetailsResponseCredentialStatusType = "Iden3commRevocationStatusV1.0"
)

// Defines values for KeyKeyType.
const (
	KeyKeyTypeBabyjubJub KeyKeyType = "babyjubJub"
	KeyKeyTypeSecp256k1  KeyKeyType = "secp256k1"
)

// Defines values for LinkStatus.
const (
	LinkStatusActive   LinkStatus = "active"
	LinkStatusExceeded LinkStatus = "exceeded"
	LinkStatusInactive LinkStatus = "inactive"
)

// Defines values for PaymentStatusStatus.
const (
	PaymentStatusStatusCanceled PaymentStatusStatus = "canceled"
	PaymentStatusStatusFailed   PaymentStatusStatus = "failed"
	PaymentStatusStatusPending  PaymentStatusStatus = "pending"
	PaymentStatusStatusSuccess  PaymentStatusStatus = "success"
)

// Defines values for RefreshServiceType.
const (
	Iden3RefreshService2023 RefreshServiceType = "Iden3RefreshService2023"
)

// Defines values for StateTransactionStatus.
const (
	Created   StateTransactionStatus = "created"
	Failed    StateTransactionStatus = "failed"
	Pending   StateTransactionStatus = "pending"
	Published StateTransactionStatus = "published"
)

// Defines values for GetConnectionsParamsSort.
const (
	GetConnectionsParamsSortCreatedAt      GetConnectionsParamsSort = "createdAt"
	GetConnectionsParamsSortMinusCreatedAt GetConnectionsParamsSort = "-createdAt"
	GetConnectionsParamsSortMinusUserID    GetConnectionsParamsSort = "-userID"
	GetConnectionsParamsSortUserID         GetConnectionsParamsSort = "userID"
)

// Defines values for GetCredentialsParamsStatus.
const (
	GetCredentialsParamsStatusAll     GetCredentialsParamsStatus = "all"
	GetCredentialsParamsStatusExpired GetCredentialsParamsStatus = "expired"
	GetCredentialsParamsStatusRevoked GetCredentialsParamsStatus = "revoked"
)

// Defines values for GetCredentialsParamsSort.
const (
	GetCredentialsParamsSortCreatedAt       GetCredentialsParamsSort = "createdAt"
	GetCredentialsParamsSortExpiresAt       GetCredentialsParamsSort = "expiresAt"
	GetCredentialsParamsSortMinusCreatedAt  GetCredentialsParamsSort = "-createdAt"
	GetCredentialsParamsSortMinusExpiresAt  GetCredentialsParamsSort = "-expiresAt"
	GetCredentialsParamsSortMinusRevoked    GetCredentialsParamsSort = "-revoked"
	GetCredentialsParamsSortMinusSchemaType GetCredentialsParamsSort = "-schemaType"
	GetCredentialsParamsSortRevoked         GetCredentialsParamsSort = "revoked"
	GetCredentialsParamsSortSchemaType      GetCredentialsParamsSort = "schemaType"
)

// Defines values for GetLinksParamsStatus.
const (
	GetLinksParamsStatusActive   GetLinksParamsStatus = "active"
	GetLinksParamsStatusAll      GetLinksParamsStatus = "all"
	GetLinksParamsStatusExceeded GetLinksParamsStatus = "exceeded"
	GetLinksParamsStatusInactive GetLinksParamsStatus = "inactive"
)

// Defines values for GetCredentialOfferParamsType.
const (
	GetCredentialOfferParamsTypeDeepLink      GetCredentialOfferParamsType = "deepLink"
	GetCredentialOfferParamsTypeRaw           GetCredentialOfferParamsType = "raw"
	GetCredentialOfferParamsTypeUniversalLink GetCredentialOfferParamsType = "universalLink"
)

// Defines values for GetAllDisplayMethodsParamsSort.
const (
	CreatedAt      GetAllDisplayMethodsParamsSort = "created_at"
	MinusCreatedAt GetAllDisplayMethodsParamsSort = "-created_at"
	MinusName      GetAllDisplayMethodsParamsSort = "-name"
	MinusType      GetAllDisplayMethodsParamsSort = "-type"
	Name           GetAllDisplayMethodsParamsSort = "name"
	Type           GetAllDisplayMethodsParamsSort = "type"
)

// Defines values for GetKeysParamsType.
const (
	BabyjubJub GetKeysParamsType = "babyjubJub"
	Secp256k1  GetKeysParamsType = "secp256k1"
)

// Defines values for GetStateTransactionsParamsFilter.
const (
	GetStateTransactionsParamsFilterAll    GetStateTransactionsParamsFilter = "all"
	GetStateTransactionsParamsFilterLatest GetStateTransactionsParamsFilter = "latest"
)

// Defines values for GetStateTransactionsParamsSort.
const (
	MinusPublishDate GetStateTransactionsParamsSort = "-publishDate"
	MinusStatus      GetStateTransactionsParamsSort = "-status"
	PublishDate      GetStateTransactionsParamsSort = "publishDate"
	Status           GetStateTransactionsParamsSort = "status"
)

// Defines values for AuthenticationParamsType.
const (
	AuthenticationParamsTypeLink AuthenticationParamsType = "link"
	AuthenticationParamsTypeRaw  AuthenticationParamsType = "raw"
)

// AgentResponse defines model for AgentResponse.
type AgentResponse = BasicMessage

// AuthenticationConnection defines model for AuthenticationConnection.
type AuthenticationConnection struct {
	CreatedAt  TimeUTC    `json:"createdAt"`
	Id         UUIDString `json:"id"`
	IssuerID   UUIDString `json:"issuerID"`
	ModifiedAt TimeUTC    `json:"modifiedAt"`
	UserID     UUIDString `json:"userID"`
}

// AuthenticationResponse defines model for AuthenticationResponse.
type AuthenticationResponse struct {
	Message   string     `json:"message"`
	SessionID UUIDString `json:"sessionID"`
}

// BasicMessage defines model for BasicMessage.
type BasicMessage struct {
	Body     interface{} `json:"body"`
	From     string      `json:"from"`
	Id       string      `json:"id"`
	ThreadID string      `json:"threadID"`
	To       string      `json:"to"`
	Typ      string      `json:"typ"`
	Type     string      `json:"type"`
}

// ConnectionsPaginated defines model for ConnectionsPaginated.
type ConnectionsPaginated struct {
	Items GetConnectionsResponse `json:"items"`
	Meta  PaginatedMetadata      `json:"meta"`
}

// CreateAuthCredentialRequest defines model for CreateAuthCredentialRequest.
type CreateAuthCredentialRequest struct {
	CredentialStatusType CreateAuthCredentialRequestCredentialStatusType `json:"credentialStatusType,omitempty"`
	Expiration           *int64                                          `json:"expiration,omitempty"`
	KeyID                string                                          `json:"keyID"`
	RevNonce             *uint64                                         `json:"revNonce,omitempty"`
	Version              *uint32                                         `json:"version,omitempty"`
}

// CreateAuthCredentialRequestCredentialStatusType defines model for CreateAuthCredentialRequest.CredentialStatusType.
type CreateAuthCredentialRequestCredentialStatusType string

// CreateConnectionRequest defines model for CreateConnectionRequest.
type CreateConnectionRequest struct {
	IssuerDoc map[string]interface{} `json:"issuerDoc"`
	UserDID   string                 `json:"userDID"`
	UserDoc   map[string]interface{} `json:"userDoc"`
}

// CreateCredentialRequest defines model for CreateCredentialRequest.
type CreateCredentialRequest struct {
	ClaimID               *uuid.UUID                                   `json:"claimID"`
	CredentialSchema      string                                       `json:"credentialSchema"`
	CredentialStatusType  *CreateCredentialRequestCredentialStatusType `json:"credentialStatusType,omitempty"`
	CredentialSubject     map[string]interface{}                       `json:"credentialSubject"`
	DisplayMethod         *DisplayMethod                               `json:"displayMethod,omitempty"`
	Expiration            *int64                                       `json:"expiration,omitempty"`
	MerklizedRootPosition *string                                      `json:"merklizedRootPosition,omitempty"`
	Proofs                *[]CreateCredentialRequestProofs             `json:"proofs,omitempty"`
	RefreshService        *RefreshService                              `json:"refreshService,omitempty"`
	RevNonce              *uint64                                      `json:"revNonce,omitempty"`
	SubjectPosition       *string                                      `json:"subjectPosition,omitempty"`
	Type                  string                                       `json:"type"`
	Version               *uint32                                      `json:"version,omitempty"`
}

// CreateCredentialRequestCredentialStatusType defines model for CreateCredentialRequest.CredentialStatusType.
type CreateCredentialRequestCredentialStatusType string

// CreateCredentialRequestProofs defines model for CreateCredentialRequest.Proofs.
type CreateCredentialRequestProofs string

// CreateCredentialResponse defines model for CreateCredentialResponse.
type CreateCredentialResponse struct {
	Id string `json:"id"`
}

// CreateDisplayMethodRequest defines model for CreateDisplayMethodRequest.
type CreateDisplayMethodRequest struct {
	Name string `json:"name"`

	// Type Display method type (Iden3BasicDisplayMethodV1 is default value)
	Type *string `json:"type,omitempty"`
	Url  string  `json:"url"`
}

// CreateIdentityRequest defines model for CreateIdentityRequest.
type CreateIdentityRequest struct {
	CredentialStatusType *CreateIdentityRequestCredentialStatusType `json:"credentialStatusType,omitempty"`
	DidMetadata          struct {
		Blockchain string                               `json:"blockchain"`
		Method     string                               `json:"method"`
		Network    string                               `json:"network"`
		Type       CreateIdentityRequestDidMetadataType `json:"type"`
	} `json:"didMetadata"`
	DisplayName *string `json:"displayName"`
}

// CreateIdentityRequestCredentialStatusType defines model for CreateIdentityRequest.CredentialStatusType.
type CreateIdentityRequestCredentialStatusType string

// CreateIdentityRequestDidMetadataType defines model for CreateIdentityRequest.DidMetadata.Type.
type CreateIdentityRequestDidMetadataType string

// CreateIdentityResponse defines model for CreateIdentityResponse.
type CreateIdentityResponse struct {
	Address              *string                                    `json:"address,omitempty"`
	Balance              *string                                    `json:"balance,omitempty"`
	CredentialStatusType CreateIdentityResponseCredentialStatusType `json:"credentialStatusType"`
	DisplayName          *string                                    `json:"displayName,omitempty"`
	Identifier           *string                                    `json:"identifier,omitempty"`
	KeyType              string                                     `json:"keyType"`
	State                *IdentityState                             `json:"state,omitempty"`
}

// CreateIdentityResponseCredentialStatusType defines model for CreateIdentityResponse.CredentialStatusType.
type CreateIdentityResponseCredentialStatusType string

// CreateKeyRequest defines model for CreateKeyRequest.
type CreateKeyRequest struct {
	KeyType CreateKeyRequestKeyType `json:"keyType"`
	Name    string                  `json:"name"`
}

// CreateKeyRequestKeyType defines model for CreateKeyRequest.KeyType.
type CreateKeyRequestKeyType string

// CreateKeyResponse defines model for CreateKeyResponse.
type CreateKeyResponse struct {
	// Id base64 encoded keyID
	Id string `json:"id"`
}

// CreateLinkRequest defines model for CreateLinkRequest.
type CreateLinkRequest struct {
	CredentialExpiration *time.Time        `json:"credentialExpiration,omitempty"`
	CredentialSubject    CredentialSubject `json:"credentialSubject"`
	DisplayMethod        *DisplayMethod    `json:"displayMethod,omitempty"`
	Expiration           *time.Time        `json:"expiration,omitempty"`
	LimitedClaims        *int              `json:"limitedClaims"`
	MtProof              bool              `json:"mtProof"`
	RefreshService       *RefreshService   `json:"refreshService,omitempty"`
	SchemaID             uuid.UUID         `json:"schemaID"`
	SignatureProof       bool              `json:"signatureProof"`
}

// CreatePaymentRequest defines model for CreatePaymentRequest.
type CreatePaymentRequest struct {
	Description string    `json:"description"`
	OptionID    uuid.UUID `json:"optionID"`
	SchemaID    uuid.UUID `json:"schemaID"`
	UserDID     string    `json:"userDID"`
}

// CreatePaymentRequestResponse defines model for CreatePaymentRequestResponse.
type CreatePaymentRequestResponse struct {
	CreatedAt       time.Time                          `json:"createdAt"`
	Id              openapi_types.UUID                 `json:"id"`
	IssuerDID       string                             `json:"issuerDID"`
	ModifiedAt      time.Time                          `json:"modifiedAt"`
	PaidNonce       *string                            `json:"paidNonce,omitempty"`
	PaymentOptionID openapi_types.UUID                 `json:"paymentOptionID"`
	Payments        []PaymentRequestInfo               `json:"payments"`
	Status          CreatePaymentRequestResponseStatus `json:"status"`
	UserDID         string                             `json:"userDID"`
}

// CreatePaymentRequestResponseStatus defines model for CreatePaymentRequestResponse.Status.
type CreatePaymentRequestResponseStatus string

// Credential defines model for Credential.
type Credential struct {
	Id         string                   `json:"id"`
	ProofTypes []string                 `json:"proofTypes"`
	Revoked    bool                     `json:"revoked"`
	SchemaHash string                   `json:"schemaHash"`
	Vc         verifiable.W3CCredential `json:"vc"`
}

// CredentialLinkQrCodeResponse defines model for CredentialLinkQrCodeResponse.
type CredentialLinkQrCodeResponse struct {
	DeepLink      string            `json:"deepLink"`
	Issuer        IssuerDescription `json:"issuer"`
	LinkDetail    LinkSimple        `json:"linkDetail"`
	Message       string            `json:"message"`
	UniversalLink string            `json:"universalLink"`
}

// CredentialOfferResponse defines model for CredentialOfferResponse.
type CredentialOfferResponse struct {
	SchemaType    string `json:"schemaType"`
	UniversalLink string `json:"universalLink"`
}

// CredentialSubject defines model for CredentialSubject.
type CredentialSubject = map[string]interface{}

// CredentialsPaginated defines model for CredentialsPaginated.
type CredentialsPaginated struct {
	Items []Credential      `json:"items"`
	Meta  PaginatedMetadata `json:"meta"`
}

// DisplayMethod defines model for DisplayMethod.
type DisplayMethod struct {
	Id   string            `json:"id"`
	Type DisplayMethodType `json:"type"`
}

// DisplayMethodType defines model for DisplayMethod.Type.
type DisplayMethodType string

// DisplayMethodEntity defines model for DisplayMethodEntity.
type DisplayMethodEntity struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Type string    `json:"type"`
	Url  string    `json:"url"`
}

// DisplayMethodPaginated defines model for DisplayMethodPaginated.
type DisplayMethodPaginated struct {
	Items []DisplayMethodEntity `json:"items"`
	Meta  PaginatedMetadata     `json:"meta"`
}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// GenericMessage defines model for GenericMessage.
type GenericMessage struct {
	Message string `json:"message"`
}

// GetAuthenticationConnectionResponse defines model for GetAuthenticationConnectionResponse.
type GetAuthenticationConnectionResponse struct {
	Connection AuthenticationConnection `json:"connection"`
}

// GetConnectionResponse defines model for GetConnectionResponse.
type GetConnectionResponse struct {
	CreatedAt   TimeUTC      `json:"createdAt"`
	Credentials []Credential `json:"credentials"`
	Id          string       `json:"id"`
	IssuerID    string       `json:"issuerID"`
	UserID      string       `json:"userID"`
}

// GetConnectionsResponse defines model for GetConnectionsResponse.
type GetConnectionsResponse = []GetConnectionResponse

// GetIdentitiesResponse defines model for GetIdentitiesResponse.
type GetIdentitiesResponse struct {
	Blockchain           string                                     `json:"blockchain"`
	CredentialStatusType *GetIdentitiesResponseCredentialStatusType `json:"credentialStatusType,omitempty"`
	DisplayName          *string                                    `json:"displayName"`
	Identifier           string                                     `json:"identifier"`
	Method               string                                     `json:"method"`
	Network              string                                     `json:"network"`
}

// GetIdentitiesResponseCredentialStatusType defines model for GetIdentitiesResponse.CredentialStatusType.
type GetIdentitiesResponseCredentialStatusType string

// GetIdentityDetailsResponse defines model for GetIdentityDetailsResponse.
type GetIdentityDetailsResponse struct {
	Address              *string                                        `json:"address,omitempty"`
	AuthCredentialsIDs   []string                                       `json:"authCredentialsIDs"`
	Balance              *string                                        `json:"balance,omitempty"`
	CredentialStatusType GetIdentityDetailsResponseCredentialStatusType `json:"credentialStatusType"`
	DisplayName          *string                                        `json:"displayName"`
	Identifier           string                                         `json:"identifier"`
	KeyType              string                                         `json:"keyType"`
	State                IdentityState                                  `json:"state"`
}

// GetIdentityDetailsResponseCredentialStatusType defines model for GetIdentityDetailsResponse.CredentialStatusType.
type GetIdentityDetailsResponseCredentialStatusType string

// GetPaymentRequestsResponse defines model for GetPaymentRequestsResponse.
type GetPaymentRequestsResponse = []CreatePaymentRequestResponse

// Health defines model for Health.
type Health map[string]bool

// IdentityState defines model for IdentityState.
type IdentityState struct {
	BlockNumber        *int    `json:"blockNumber,omitempty"`
	BlockTimestamp     *int    `json:"blockTimestamp,omitempty"`
	ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
	CreatedAt          TimeUTC `json:"createdAt"`
	Identifier         string  `json:"-"`
	ModifiedAt         TimeUTC `json:"modifiedAt"`
	PreviousState      *string `json:"previousState,omitempty"`
	RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string `json:"rootOfRoots,omitempty"`
	State              *string `json:"state,omitempty"`
	StateID            int64   `json:"-"`
	Status             string  `json:"status"`
	TxID               *string `json:"txID,omitempty"`
}

// ImportSchemaRequest defines model for ImportSchemaRequest.
type ImportSchemaRequest struct {
	Description     *string    `json:"description,omitempty"`
	DisplayMethodID *uuid.UUID `json:"displayMethodID"`
	SchemaType      string     `json:"schemaType"`
	Title           *string    `json:"title,omitempty"`
	Url             string     `json:"url"`
	Version         string     `json:"version"`
}

// IssuerDescription defines model for IssuerDescription.
type IssuerDescription struct {
	DisplayName string `json:"displayName"`
	Logo        string `json:"logo"`
}

// Key defines model for Key.
type Key struct {
	// Id base64 encoded keyID
	Id               string     `json:"id"`
	IsAuthCredential bool       `json:"isAuthCredential"`
	KeyType          KeyKeyType `json:"keyType"`
	Name             string     `json:"name"`
	PublicKey        string     `json:"publicKey"`
}

// KeyKeyType defines model for Key.KeyType.
type KeyKeyType string

// KeysPaginated defines model for KeysPaginated.
type KeysPaginated struct {
	Items []Key             `json:"items"`
	Meta  PaginatedMetadata `json:"meta"`
}

// Link defines model for Link.
type Link struct {
	Active               bool              `json:"active"`
	CreatedAt            TimeUTC           `json:"createdAt"`
	CredentialExpiration *TimeUTC          `json:"credentialExpiration"`
	CredentialSubject    CredentialSubject `json:"credentialSubject"`
	DeepLink             string            `json:"deepLink"`
	DisplayMethod        *DisplayMethod    `json:"displayMethod,omitempty"`
	Expiration           *TimeUTC          `json:"expiration"`
	Id                   uuid.UUID         `json:"id"`
	IssuedClaims         int               `json:"issuedClaims"`
	MaxIssuance          *int              `json:"maxIssuance"`
	ProofTypes           []string          `json:"proofTypes"`
	RefreshService       *RefreshService   `json:"refreshService,omitempty"`
	SchemaHash           string            `json:"schemaHash"`
	SchemaType           string            `json:"schemaType"`
	SchemaUrl            string            `json:"schemaUrl"`
	Status               LinkStatus        `json:"status"`
	UniversalLink        string            `json:"universalLink"`
}

// LinkStatus defines model for Link.Status.
type LinkStatus string

// LinkSimple defines model for LinkSimple.
type LinkSimple struct {
	Id         uuid.UUID `json:"id"`
	ProofTypes []string  `json:"proofTypes"`
	SchemaHash string    `json:"schemaHash"`
	SchemaType string    `json:"schemaType"`
	SchemaUrl  string    `json:"schemaUrl"`
}

// NetworkData defines model for NetworkData.
type NetworkData struct {
	CredentialStatus []string `json:"credentialStatus"`
	Name             string   `json:"name"`
}

// Offer defines model for Offer.
type Offer = protocol.CredentialsOfferMessage

// PaginatedMetadata defines model for PaginatedMetadata.
type PaginatedMetadata struct {
	MaxResults uint `json:"max_results"`
	Page       uint `json:"page"`
	Total      uint `json:"total"`
}

// PaymentOption defines model for PaymentOption.
type PaymentOption struct {
	CreatedAt      TimeUTC             `json:"createdAt"`
	Description    string              `json:"description"`
	Id             uuid.UUID           `json:"id"`
	IssuerDID      string              `json:"issuerDID"`
	ModifiedAt     TimeUTC             `json:"modifiedAt"`
	Name           string              `json:"name"`
	PaymentOptions PaymentOptionConfig `json:"paymentOptions"`
}

// PaymentOptionConfig defines model for PaymentOptionConfig.
type PaymentOptionConfig = []PaymentOptionConfigItem

// PaymentOptionConfigItem defines model for PaymentOptionConfigItem.
type PaymentOptionConfigItem struct {
	Amount string `json:"amount"`

	// Expiration Expiration date for the payment option, if not set the 1 hour from the creation date will be used
	Expiration      *time.Time `json:"expiration,omitempty"`
	PaymentOptionID int        `json:"paymentOptionID"`
	Recipient       string     `json:"recipient"`

	// SigningKeyID base64 encoded keyID
	SigningKeyID string `json:"signingKeyID"`
}

// PaymentOptionRequest defines model for PaymentOptionRequest.
type PaymentOptionRequest struct {
	Description    string              `json:"description"`
	Name           string              `json:"name"`
	PaymentOptions PaymentOptionConfig `json:"paymentOptions"`
}

// PaymentOptions defines model for PaymentOptions.
type PaymentOptions = []PaymentOption

// PaymentOptionsPaginated defines model for PaymentOptionsPaginated.
type PaymentOptionsPaginated struct {
	Items PaymentOptions    `json:"items"`
	Meta  PaginatedMetadata `json:"meta"`
}

// PaymentRequestInfo defines model for PaymentRequestInfo.
type PaymentRequestInfo = protocol.PaymentRequestInfo

// PaymentStatus defines model for PaymentStatus.
type PaymentStatus struct {
	Status PaymentStatusStatus `json:"status"`
}

// PaymentStatusStatus defines model for PaymentStatus.Status.
type PaymentStatusStatus string

// PaymentVerifyRequest defines model for PaymentVerifyRequest.
type PaymentVerifyRequest struct {
	// TxHash If txHash not provided then only verification on the Payment contract will be performed by nonce and issuer DID.
	TxHash *string `json:"txHash,omitempty"`

	// UserDID If a User DID is provided, the payment will be verified for the specified User DID.
	UserDID *string `json:"userDID,omitempty"`
}

// PaymentsConfiguration defines model for PaymentsConfiguration.
type PaymentsConfiguration = payments.Config

// PublishIdentityStateResponse defines model for PublishIdentityStateResponse.
type PublishIdentityStateResponse struct {
	ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
	RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string `json:"rootOfRoots,omitempty"`
	State              *string `json:"state,omitempty"`
	TxID               *string `json:"txID,omitempty"`
}

// RefreshService defines model for RefreshService.
type RefreshService struct {
	Id   string             `json:"id"`
	Type RefreshServiceType `json:"type"`
}

// RefreshServiceType defines model for RefreshService.Type.
type RefreshServiceType string

// RevocationStatusResponse defines model for RevocationStatusResponse.
type RevocationStatusResponse struct {
	Issuer struct {
		ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
		RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
		RootOfRoots        *string `json:"rootOfRoots,omitempty"`
		State              *string `json:"state,omitempty"`
	} `json:"issuer"`
	Mtp struct {
		Existence bool `json:"existence"`
		NodeAux   *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"node_aux,omitempty"`
		Siblings *[]string `json:"siblings"`
	} `json:"mtp"`
}

// RevokeClaimResponse defines model for RevokeClaimResponse.
type RevokeClaimResponse struct {
	Message string `json:"message"`
}

// Schema defines model for Schema.
type Schema struct {
	BigInt          string     `json:"bigInt"`
	ContextURL      string     `json:"contextURL"`
	CreatedAt       TimeUTC    `json:"createdAt"`
	Description     *string    `json:"description"`
	DisplayMethodID *uuid.UUID `json:"displayMethodID"`
	Hash            string     `json:"hash"`
	Id              string     `json:"id"`
	Title           *string    `json:"title"`
	Type            string     `json:"type"`
	Url             string     `json:"url"`
	Version         string     `json:"version"`
}

// StateStatusResponse defines model for StateStatusResponse.
type StateStatusResponse struct {
	PendingActions bool `json:"pendingActions"`
}

// StateTransaction defines model for StateTransaction.
type StateTransaction struct {
	Id          int64                  `json:"id"`
	PublishDate TimeUTC                `json:"publishDate"`
	State       string                 `json:"state"`
	Status      StateTransactionStatus `json:"status"`
	TxID        string                 `json:"txID"`
}

// StateTransactionStatus defines model for StateTransaction.Status.
type StateTransactionStatus string

// StateTransactions defines model for StateTransactions.
type StateTransactions = []StateTransaction

// StateTransactionsPaginated defines model for StateTransactionsPaginated.
type StateTransactionsPaginated struct {
	Items StateTransactions `json:"items"`
	Meta  PaginatedMetadata `json:"meta"`
}

// SupportedNetworks defines model for SupportedNetworks.
type SupportedNetworks struct {
	Blockchain string        `json:"blockchain"`
	Networks   []NetworkData `json:"networks"`
}

// TimeUTC defines model for TimeUTC.
type TimeUTC = timeapi.Time

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Id string `json:"id"`
}

// UUIDString defines model for UUIDString.
type UUIDString = string

// UpdatePaymentOptionRequest defines model for UpdatePaymentOptionRequest.
type UpdatePaymentOptionRequest struct {
	Description    *string              `json:"description,omitempty"`
	Name           *string              `json:"name,omitempty"`
	PaymentOptions *PaymentOptionConfig `json:"paymentOptions,omitempty"`
}

// Id defines model for id.
type Id = uuid.UUID

// LinkID defines model for linkID.
type LinkID = uuid.UUID

// PathClaim defines model for pathClaim.
type PathClaim = string

// PathIdentifier defines model for pathIdentifier.
type PathIdentifier = string

// PathIdentifier2 defines model for pathIdentifier2.
type PathIdentifier2 = Identity

// PathKeyID defines model for pathKeyID.
type PathKeyID = string

// PathNonce defines model for pathNonce.
type PathNonce = int64

// SessionID defines model for sessionID.
type SessionID = uuid.UUID

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N401 defines model for 401.
type N401 = GenericErrorMessage

// N403 defines model for 403.
type N403 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N409 defines model for 409.
type N409 = GenericErrorMessage

// N410 defines model for 410.
type N410 = GenericErrorMessage

// N422 defines model for 422.
type N422 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// N500CreateIdentity defines model for 500-CreateIdentity.
type N500CreateIdentity struct {
	Code      *int    `json:"code,omitempty"`
	Error     *string `json:"error,omitempty"`
	RequestID *string `json:"requestID,omitempty"`
}

// AgentV1TextBody defines parameters for AgentV1.
type AgentV1TextBody = string

// AgentTextBody defines parameters for Agent.
type AgentTextBody = string

// AuthCallbackTextBody defines parameters for AuthCallback.
type AuthCallbackTextBody = string

// AuthCallbackParams defines parameters for AuthCallback.
type AuthCallbackParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// UpdateIdentityJSONBody defines parameters for UpdateIdentity.
type UpdateIdentityJSONBody struct {
	DisplayName string `json:"displayName"`
}

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {
	// Query Query string to do full text search in connections.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Credentials credentials=true to include the connection credentials.
	Credentials *bool `form:"credentials,omitempty" json:"credentials,omitempty"`

	// Page Page to fetch. First is one. If omitted, all results will be returned.
	Page *uint `form:"page,omitempty" json:"page,omitempty"`

	// MaxResults Number of items to fetch on each page. Minimum is 10. Default is 50. No maximum by the moment.
	MaxResults *uint                       `form:"max_results,omitempty" json:"max_results,omitempty"`
	Sort       *[]GetConnectionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetConnectionsParamsSort defines parameters for GetConnections.
type GetConnectionsParamsSort string

// DeleteConnectionParams defines parameters for DeleteConnection.
type DeleteConnectionParams struct {
	// RevokeCredentials Set revokeCredentials to true if you want to revoke the credentials of the connection
	RevokeCredentials *bool `form:"revokeCredentials,omitempty" json:"revokeCredentials,omitempty"`

	// DeleteCredentials Set deleteCredentials to true if you want to delete the credentials of the connection
	DeleteCredentials *bool `form:"deleteCredentials,omitempty" json:"deleteCredentials,omitempty"`
}

// GetCredentialsParams defines parameters for GetCredentials.
type GetCredentialsParams struct {
	// Page Page to fetch. First is one. If omitted, all results will be returned.
	Page              *uint   `form:"page,omitempty" json:"page,omitempty"`
	CredentialSubject *string `form:"credentialSubject,omitempty" json:"credentialSubject,omitempty"`

	// Status Credential status:
	//   * `all` - All Credentials. (default value)
	//   * `revoked` - Only revoked credentials
	//   * `expired` - Only expired credentials
	Status *GetCredentialsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Query Query string to do full text search
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// MaxResults Number of items to fetch on each page. Minimum is 10. Default is 50. No maximum by the moment.
	MaxResults *uint                       `form:"max_results,omitempty" json:"max_results,omitempty"`
	Sort       *[]GetCredentialsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetCredentialsParamsStatus defines parameters for GetCredentials.
type GetCredentialsParamsStatus string

// GetCredentialsParamsSort defines parameters for GetCredentials.
type GetCredentialsParamsSort string

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	// Query Query string to do full text search in schema types and attributes.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Status Schema type:
	//   * `all` - All links. (default value)
	//   * `active` - Only active links. (Not expired, no issuance exceeded and not deactivated
	//   * `inactive` - Only deactivated links
	//   * `exceeded` - Expired or maximum issuance exceeded
	Status *GetLinksParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetLinksParamsStatus defines parameters for GetLinks.
type GetLinksParamsStatus string

// CreateLinkQrCodeCallbackTextBody defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackTextBody = string

// CreateLinkQrCodeCallbackParams defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackParams struct {
	// LinkID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	LinkID LinkID `form:"linkID" json:"linkID"`
}

// ActivateLinkJSONBody defines parameters for ActivateLink.
type ActivateLinkJSONBody struct {
	Active bool `json:"active"`
}

// GetCredentialOfferParams defines parameters for GetCredentialOffer.
type GetCredentialOfferParams struct {
	// Type Type:
	//   * `universalLink` - (default value) Returns a universal link. The preferred and more standard way to access the offer message
	//   * `deepLink` -  Returns a deeplink with a link redirection to the original message.
	//   * `raw` - Returns the raw offer message.
	Type *GetCredentialOfferParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetCredentialOfferParamsType defines parameters for GetCredentialOffer.
type GetCredentialOfferParamsType string

// GetAllDisplayMethodsParams defines parameters for GetAllDisplayMethods.
type GetAllDisplayMethodsParams struct {
	Page *uint `form:"page,omitempty" json:"page,omitempty"`

	// MaxResults Number of items to fetch on each page. Minimum is 10. Default is 50. No maximum by the moment.
	MaxResults *uint                             `form:"max_results,omitempty" json:"max_results,omitempty"`
	Sort       *[]GetAllDisplayMethodsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAllDisplayMethodsParamsSort defines parameters for GetAllDisplayMethods.
type GetAllDisplayMethodsParamsSort string

// UpdateDisplayMethodJSONBody defines parameters for UpdateDisplayMethod.
type UpdateDisplayMethodJSONBody struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// GetKeysParams defines parameters for GetKeys.
type GetKeysParams struct {
	// MaxResults Number of items to fetch on each page. Minimum is 10. Default is 50. No maximum by the moment.
	MaxResults *uint `form:"max_results,omitempty" json:"max_results,omitempty"`

	// Page Page to fetch. First is one. If omitted, page 1 will be returned.
	Page *uint `form:"page,omitempty" json:"page,omitempty"`

	// Type If not provided, all keys will be returned.
	Type *GetKeysParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetKeysParamsType defines parameters for GetKeys.
type GetKeysParamsType string

// UpdateKeyJSONBody defines parameters for UpdateKey.
type UpdateKeyJSONBody struct {
	Name string `json:"name"`
}

// GetSchemasParams defines parameters for GetSchemas.
type GetSchemasParams struct {
	// Query Query string to do full text search in schema types and attributes.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// UpdateSchemaJSONBody defines parameters for UpdateSchema.
type UpdateSchemaJSONBody struct {
	DisplayMethodID *uuid.UUID `json:"displayMethodID"`
}

// GetStateTransactionsParams defines parameters for GetStateTransactions.
type GetStateTransactionsParams struct {
	Filter *GetStateTransactionsParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// Page Page to fetch. First is 1. If not provided, default is 1.
	Page *uint `form:"page,omitempty" json:"page,omitempty"`

	// MaxResults Number of items to fetch on each page. Default is 10.
	MaxResults *uint                             `form:"max_results,omitempty" json:"max_results,omitempty"`
	Sort       *[]GetStateTransactionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetStateTransactionsParamsFilter defines parameters for GetStateTransactions.
type GetStateTransactionsParamsFilter string

// GetStateTransactionsParamsSort defines parameters for GetStateTransactions.
type GetStateTransactionsParamsSort string

// GetQrFromStoreParams defines parameters for GetQrFromStore.
type GetQrFromStoreParams struct {
	Id     *uuid.UUID `form:"id,omitempty" json:"id,omitempty"`
	Issuer *string    `form:"issuer,omitempty" json:"issuer,omitempty"`
}

// AuthenticationParams defines parameters for Authentication.
type AuthenticationParams struct {
	// Type Type:
	//   * `link` - (default value) Return a link redirection to the raw content. Easier to scan.
	//   * `raw` - Return the raw QR code.
	Type *AuthenticationParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// AuthenticationParamsType defines parameters for Authentication.
type AuthenticationParamsType string

// AgentV1TextRequestBody defines body for AgentV1 for text/plain ContentType.
type AgentV1TextRequestBody = AgentV1TextBody

// AgentTextRequestBody defines body for Agent for text/plain ContentType.
type AgentTextRequestBody = AgentTextBody

// AuthCallbackTextRequestBody defines body for AuthCallback for text/plain ContentType.
type AuthCallbackTextRequestBody = AuthCallbackTextBody

// CreateIdentityJSONRequestBody defines body for CreateIdentity for application/json ContentType.
type CreateIdentityJSONRequestBody = CreateIdentityRequest

// UpdateIdentityJSONRequestBody defines body for UpdateIdentity for application/json ContentType.
type UpdateIdentityJSONRequestBody UpdateIdentityJSONBody

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody = CreateConnectionRequest

// CreateAuthCredentialJSONRequestBody defines body for CreateAuthCredential for application/json ContentType.
type CreateAuthCredentialJSONRequestBody = CreateAuthCredentialRequest

// CreateCredentialJSONRequestBody defines body for CreateCredential for application/json ContentType.
type CreateCredentialJSONRequestBody = CreateCredentialRequest

// CreateLinkJSONRequestBody defines body for CreateLink for application/json ContentType.
type CreateLinkJSONRequestBody = CreateLinkRequest

// CreateLinkQrCodeCallbackTextRequestBody defines body for CreateLinkQrCodeCallback for text/plain ContentType.
type CreateLinkQrCodeCallbackTextRequestBody = CreateLinkQrCodeCallbackTextBody

// ActivateLinkJSONRequestBody defines body for ActivateLink for application/json ContentType.
type ActivateLinkJSONRequestBody ActivateLinkJSONBody

// CreateDisplayMethodJSONRequestBody defines body for CreateDisplayMethod for application/json ContentType.
type CreateDisplayMethodJSONRequestBody = CreateDisplayMethodRequest

// UpdateDisplayMethodJSONRequestBody defines body for UpdateDisplayMethod for application/json ContentType.
type UpdateDisplayMethodJSONRequestBody UpdateDisplayMethodJSONBody

// CreateKeyJSONRequestBody defines body for CreateKey for application/json ContentType.
type CreateKeyJSONRequestBody = CreateKeyRequest

// UpdateKeyJSONRequestBody defines body for UpdateKey for application/json ContentType.
type UpdateKeyJSONRequestBody UpdateKeyJSONBody

// CreatePaymentRequestJSONRequestBody defines body for CreatePaymentRequest for application/json ContentType.
type CreatePaymentRequestJSONRequestBody = CreatePaymentRequest

// CreatePaymentOptionJSONRequestBody defines body for CreatePaymentOption for application/json ContentType.
type CreatePaymentOptionJSONRequestBody = PaymentOptionRequest

// UpdatePaymentOptionJSONRequestBody defines body for UpdatePaymentOption for application/json ContentType.
type UpdatePaymentOptionJSONRequestBody = UpdatePaymentOptionRequest

// VerifyPaymentJSONRequestBody defines body for VerifyPayment for application/json ContentType.
type VerifyPaymentJSONRequestBody = PaymentVerifyRequest

// ImportSchemaJSONRequestBody defines body for ImportSchema for application/json ContentType.
type ImportSchemaJSONRequestBody = ImportSchemaRequest

// UpdateSchemaJSONRequestBody defines body for UpdateSchema for application/json ContentType.
type UpdateSchemaJSONRequestBody UpdateSchemaJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Healthcheck
	// (GET /status)
	Health(w http.ResponseWriter, r *http.Request)
	// Agent V1
	// (POST /v1/agent)
	AgentV1(w http.ResponseWriter, r *http.Request)
	// Get Revocation Status V1
	// (GET /v1/{identifier}/claims/revocation/status/{nonce})
	GetRevocationStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce)
	// Agent
	// (POST /v2/agent)
	Agent(w http.ResponseWriter, r *http.Request)
	// Authentication Callback
	// (POST /v2/authentication/callback)
	AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams)
	// Get Authentication Connection
	// (GET /v2/authentication/sessions/{id})
	GetAuthenticationConnection(w http.ResponseWriter, r *http.Request, id Id)
	// Get Identities
	// (GET /v2/identities)
	GetIdentities(w http.ResponseWriter, r *http.Request)
	// Create Identity
	// (POST /v2/identities)
	CreateIdentity(w http.ResponseWriter, r *http.Request)
	// Get Identity Detail
	// (GET /v2/identities/{identifier})
	GetIdentityDetails(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Update Identity
	// (PATCH /v2/identities/{identifier})
	UpdateIdentity(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Connections
	// (GET /v2/identities/{identifier}/connections)
	GetConnections(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetConnectionsParams)
	// Create Connection
	// (POST /v2/identities/{identifier}/connections)
	CreateConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Delete Connection
	// (DELETE /v2/identities/{identifier}/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id, params DeleteConnectionParams)
	// Get Connection
	// (GET /v2/identities/{identifier}/connections/{id})
	GetConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Delete Connection Credentials
	// (DELETE /v2/identities/{identifier}/connections/{id}/credentials)
	DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Revoke Connection Credentials
	// (POST /v2/identities/{identifier}/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Create Auth Credential
	// (POST /v2/identities/{identifier}/create-auth-credential)
	CreateAuthCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2)
	// Get Credentials
	// (GET /v2/identities/{identifier}/credentials)
	GetCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetCredentialsParams)
	// Create Credential
	// (POST /v2/identities/{identifier}/credentials)
	CreateCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Links
	// (GET /v2/identities/{identifier}/credentials/links)
	GetLinks(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetLinksParams)
	// Create Link
	// (POST /v2/identities/{identifier}/credentials/links)
	CreateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Create Link QR Code Callback
	// (POST /v2/identities/{identifier}/credentials/links/callback)
	CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params CreateLinkQrCodeCallbackParams)
	// Delete Link
	// (DELETE /v2/identities/{identifier}/credentials/links/{id})
	DeleteLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Link
	// (GET /v2/identities/{identifier}/credentials/links/{id})
	GetLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Activate | Deactivate Link
	// (PATCH /v2/identities/{identifier}/credentials/links/{id})
	ActivateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Create a credential offer for a link
	// (POST /v2/identities/{identifier}/credentials/links/{id}/offer)
	CreateLinkOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Revocation Status
	// (GET /v2/identities/{identifier}/credentials/revocation/status/{nonce})
	GetRevocationStatusV2(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce)
	// Revoke Credential
	// (POST /v2/identities/{identifier}/credentials/revoke/{nonce})
	RevokeCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce)
	// Delete Credential
	// (DELETE /v2/identities/{identifier}/credentials/{id})
	DeleteCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim)
	// Get Credential
	// (GET /v2/identities/{identifier}/credentials/{id})
	GetCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim)
	// Get Credentials Offer
	// (GET /v2/identities/{identifier}/credentials/{id}/offer)
	GetCredentialOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim, params GetCredentialOfferParams)
	// Get All Display Methods
	// (GET /v2/identities/{identifier}/display-method)
	GetAllDisplayMethods(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetAllDisplayMethodsParams)
	// Create Display Method
	// (POST /v2/identities/{identifier}/display-method)
	CreateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Delete Display Method
	// (DELETE /v2/identities/{identifier}/display-method/{id})
	DeleteDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Display Method
	// (GET /v2/identities/{identifier}/display-method/{id})
	GetDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Update Display Method
	// (PATCH /v2/identities/{identifier}/display-method/{id})
	UpdateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Keys
	// (GET /v2/identities/{identifier}/keys)
	GetKeys(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, params GetKeysParams)
	// Create a Key
	// (POST /v2/identities/{identifier}/keys)
	CreateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2)
	// Delete Key
	// (DELETE /v2/identities/{identifier}/keys/{id})
	DeleteKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID)
	// Get a Key
	// (GET /v2/identities/{identifier}/keys/{id})
	GetKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID)
	// Update a Key
	// (PATCH /v2/identities/{identifier}/keys/{id})
	UpdateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID)
	// Get Payment Requests
	// (GET /v2/identities/{identifier}/payment-request)
	GetPaymentRequests(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Create Payment Request
	// (POST /v2/identities/{identifier}/payment-request)
	CreatePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Delete Payment Request
	// (DELETE /v2/identities/{identifier}/payment-request/{id})
	DeletePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Payment Request
	// (GET /v2/identities/{identifier}/payment-request/{id})
	GetPaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Payment Options
	// (GET /v2/identities/{identifier}/payment/options)
	GetPaymentOptions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Create Payment Option
	// (POST /v2/identities/{identifier}/payment/options)
	CreatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Delete Payment Option
	// (DELETE /v2/identities/{identifier}/payment/options/{id})
	DeletePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Get Payment Option
	// (GET /v2/identities/{identifier}/payment/options/{id})
	GetPaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Update Payment Option
	// (PATCH /v2/identities/{identifier}/payment/options/{id})
	UpdatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Verify Payment
	// (POST /v2/identities/{identifier}/payment/verify/{nonce})
	VerifyPayment(w http.ResponseWriter, r *http.Request, identifier string, nonce string)
	// Get Schemas
	// (GET /v2/identities/{identifier}/schemas)
	GetSchemas(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetSchemasParams)
	// Import JSON schema
	// (POST /v2/identities/{identifier}/schemas)
	ImportSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Schema
	// (GET /v2/identities/{identifier}/schemas/{id})
	GetSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Update Schema
	// (PATCH /v2/identities/{identifier}/schemas/{id})
	UpdateSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id)
	// Publish Identity State
	// (POST /v2/identities/{identifier}/state/publish)
	PublishIdentityState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Retry Publish Identity State
	// (POST /v2/identities/{identifier}/state/retry)
	RetryPublishState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Identity State Status
	// (GET /v2/identities/{identifier}/state/status)
	GetStateStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Identity State Transactions
	// (GET /v2/identities/{identifier}/state/transactions)
	GetStateTransactions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetStateTransactionsParams)
	// Payments Configuration
	// (GET /v2/payment/settings)
	GetPaymentSettings(w http.ResponseWriter, r *http.Request)
	// Get QrCode from store
	// (GET /v2/qr-store)
	GetQrFromStore(w http.ResponseWriter, r *http.Request, params GetQrFromStoreParams)
	// Get Supported Networks
	// (GET /v2/supported-networks)
	GetSupportedNetworks(w http.ResponseWriter, r *http.Request)
	// Get Authentication Message
	// (POST /v2/{identifier}/authentication)
	Authentication(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params AuthenticationParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Healthcheck
// (GET /status)
func (_ Unimplemented) Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Agent V1
// (POST /v1/agent)
func (_ Unimplemented) AgentV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Revocation Status V1
// (GET /v1/{identifier}/claims/revocation/status/{nonce})
func (_ Unimplemented) GetRevocationStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Agent
// (POST /v2/agent)
func (_ Unimplemented) Agent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Authentication Callback
// (POST /v2/authentication/callback)
func (_ Unimplemented) AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Authentication Connection
// (GET /v2/authentication/sessions/{id})
func (_ Unimplemented) GetAuthenticationConnection(w http.ResponseWriter, r *http.Request, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Identities
// (GET /v2/identities)
func (_ Unimplemented) GetIdentities(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Identity
// (POST /v2/identities)
func (_ Unimplemented) CreateIdentity(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Identity Detail
// (GET /v2/identities/{identifier})
func (_ Unimplemented) GetIdentityDetails(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Identity
// (PATCH /v2/identities/{identifier})
func (_ Unimplemented) UpdateIdentity(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Connections
// (GET /v2/identities/{identifier}/connections)
func (_ Unimplemented) GetConnections(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetConnectionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Connection
// (POST /v2/identities/{identifier}/connections)
func (_ Unimplemented) CreateConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Connection
// (DELETE /v2/identities/{identifier}/connections/{id})
func (_ Unimplemented) DeleteConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id, params DeleteConnectionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Connection
// (GET /v2/identities/{identifier}/connections/{id})
func (_ Unimplemented) GetConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Connection Credentials
// (DELETE /v2/identities/{identifier}/connections/{id}/credentials)
func (_ Unimplemented) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Revoke Connection Credentials
// (POST /v2/identities/{identifier}/connections/{id}/credentials/revoke)
func (_ Unimplemented) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Auth Credential
// (POST /v2/identities/{identifier}/create-auth-credential)
func (_ Unimplemented) CreateAuthCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Credentials
// (GET /v2/identities/{identifier}/credentials)
func (_ Unimplemented) GetCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetCredentialsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Credential
// (POST /v2/identities/{identifier}/credentials)
func (_ Unimplemented) CreateCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Links
// (GET /v2/identities/{identifier}/credentials/links)
func (_ Unimplemented) GetLinks(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetLinksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Link
// (POST /v2/identities/{identifier}/credentials/links)
func (_ Unimplemented) CreateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Link QR Code Callback
// (POST /v2/identities/{identifier}/credentials/links/callback)
func (_ Unimplemented) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params CreateLinkQrCodeCallbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Link
// (DELETE /v2/identities/{identifier}/credentials/links/{id})
func (_ Unimplemented) DeleteLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Link
// (GET /v2/identities/{identifier}/credentials/links/{id})
func (_ Unimplemented) GetLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Activate | Deactivate Link
// (PATCH /v2/identities/{identifier}/credentials/links/{id})
func (_ Unimplemented) ActivateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a credential offer for a link
// (POST /v2/identities/{identifier}/credentials/links/{id}/offer)
func (_ Unimplemented) CreateLinkOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Revocation Status
// (GET /v2/identities/{identifier}/credentials/revocation/status/{nonce})
func (_ Unimplemented) GetRevocationStatusV2(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Revoke Credential
// (POST /v2/identities/{identifier}/credentials/revoke/{nonce})
func (_ Unimplemented) RevokeCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Credential
// (DELETE /v2/identities/{identifier}/credentials/{id})
func (_ Unimplemented) DeleteCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Credential
// (GET /v2/identities/{identifier}/credentials/{id})
func (_ Unimplemented) GetCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Credentials Offer
// (GET /v2/identities/{identifier}/credentials/{id}/offer)
func (_ Unimplemented) GetCredentialOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim, params GetCredentialOfferParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get All Display Methods
// (GET /v2/identities/{identifier}/display-method)
func (_ Unimplemented) GetAllDisplayMethods(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetAllDisplayMethodsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Display Method
// (POST /v2/identities/{identifier}/display-method)
func (_ Unimplemented) CreateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Display Method
// (DELETE /v2/identities/{identifier}/display-method/{id})
func (_ Unimplemented) DeleteDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Display Method
// (GET /v2/identities/{identifier}/display-method/{id})
func (_ Unimplemented) GetDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Display Method
// (PATCH /v2/identities/{identifier}/display-method/{id})
func (_ Unimplemented) UpdateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Keys
// (GET /v2/identities/{identifier}/keys)
func (_ Unimplemented) GetKeys(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, params GetKeysParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a Key
// (POST /v2/identities/{identifier}/keys)
func (_ Unimplemented) CreateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Key
// (DELETE /v2/identities/{identifier}/keys/{id})
func (_ Unimplemented) DeleteKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a Key
// (GET /v2/identities/{identifier}/keys/{id})
func (_ Unimplemented) GetKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a Key
// (PATCH /v2/identities/{identifier}/keys/{id})
func (_ Unimplemented) UpdateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Payment Requests
// (GET /v2/identities/{identifier}/payment-request)
func (_ Unimplemented) GetPaymentRequests(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Payment Request
// (POST /v2/identities/{identifier}/payment-request)
func (_ Unimplemented) CreatePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Payment Request
// (DELETE /v2/identities/{identifier}/payment-request/{id})
func (_ Unimplemented) DeletePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Payment Request
// (GET /v2/identities/{identifier}/payment-request/{id})
func (_ Unimplemented) GetPaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Payment Options
// (GET /v2/identities/{identifier}/payment/options)
func (_ Unimplemented) GetPaymentOptions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Payment Option
// (POST /v2/identities/{identifier}/payment/options)
func (_ Unimplemented) CreatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Payment Option
// (DELETE /v2/identities/{identifier}/payment/options/{id})
func (_ Unimplemented) DeletePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Payment Option
// (GET /v2/identities/{identifier}/payment/options/{id})
func (_ Unimplemented) GetPaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Payment Option
// (PATCH /v2/identities/{identifier}/payment/options/{id})
func (_ Unimplemented) UpdatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify Payment
// (POST /v2/identities/{identifier}/payment/verify/{nonce})
func (_ Unimplemented) VerifyPayment(w http.ResponseWriter, r *http.Request, identifier string, nonce string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Schemas
// (GET /v2/identities/{identifier}/schemas)
func (_ Unimplemented) GetSchemas(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetSchemasParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Import JSON schema
// (POST /v2/identities/{identifier}/schemas)
func (_ Unimplemented) ImportSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Schema
// (GET /v2/identities/{identifier}/schemas/{id})
func (_ Unimplemented) GetSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Schema
// (PATCH /v2/identities/{identifier}/schemas/{id})
func (_ Unimplemented) UpdateSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish Identity State
// (POST /v2/identities/{identifier}/state/publish)
func (_ Unimplemented) PublishIdentityState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry Publish Identity State
// (POST /v2/identities/{identifier}/state/retry)
func (_ Unimplemented) RetryPublishState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Identity State Status
// (GET /v2/identities/{identifier}/state/status)
func (_ Unimplemented) GetStateStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Identity State Transactions
// (GET /v2/identities/{identifier}/state/transactions)
func (_ Unimplemented) GetStateTransactions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetStateTransactionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Payments Configuration
// (GET /v2/payment/settings)
func (_ Unimplemented) GetPaymentSettings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get QrCode from store
// (GET /v2/qr-store)
func (_ Unimplemented) GetQrFromStore(w http.ResponseWriter, r *http.Request, params GetQrFromStoreParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Supported Networks
// (GET /v2/supported-networks)
func (_ Unimplemented) GetSupportedNetworks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Authentication Message
// (POST /v2/{identifier}/authentication)
func (_ Unimplemented) Authentication(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params AuthenticationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AgentV1 operation middleware
func (siw *ServerInterfaceWrapper) AgentV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AgentV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRevocationStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRevocationStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithOptions("simple", "nonce", chi.URLParam(r, "nonce"), &nonce, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRevocationStatus(w, r, identifier, nonce)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Agent operation middleware
func (siw *ServerInterfaceWrapper) Agent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Agent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthCallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCallback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthenticationConnection operation middleware
func (siw *ServerInterfaceWrapper) GetAuthenticationConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthenticationConnection(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetIdentities(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentities(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateIdentity operation middleware
func (siw *ServerInterfaceWrapper) CreateIdentity(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIdentity(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetIdentityDetails operation middleware
func (siw *ServerInterfaceWrapper) GetIdentityDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentityDetails(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateIdentity operation middleware
func (siw *ServerInterfaceWrapper) UpdateIdentity(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateIdentity(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConnections operation middleware
func (siw *ServerInterfaceWrapper) GetConnections(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConnectionsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "credentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "credentials", r.URL.Query(), &params.Credentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credentials", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", r.URL.Query(), &params.MaxResults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_results", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnections(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateConnection operation middleware
func (siw *ServerInterfaceWrapper) CreateConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateConnection(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteConnectionParams

	// ------------- Optional query parameter "revokeCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "revokeCredentials", r.URL.Query(), &params.RevokeCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "revokeCredentials", Err: err})
		return
	}

	// ------------- Optional query parameter "deleteCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleteCredentials", r.URL.Query(), &params.DeleteCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deleteCredentials", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, identifier, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConnection operation middleware
func (siw *ServerInterfaceWrapper) GetConnection(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnection(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnectionCredentials(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RevokeConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeConnectionCredentials(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAuthCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAuthCredential(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetCredentials(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "credentialSubject" -------------

	err = runtime.BindQueryParameter("form", true, false, "credentialSubject", r.URL.Query(), &params.CredentialSubject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credentialSubject", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", r.URL.Query(), &params.MaxResults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_results", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentials(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCredential(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinksParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinks(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateLink operation middleware
func (siw *ServerInterfaceWrapper) CreateLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLink(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateLinkQrCodeCallback operation middleware
func (siw *ServerInterfaceWrapper) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateLinkQrCodeCallbackParams

	// ------------- Required query parameter "linkID" -------------

	if paramValue := r.URL.Query().Get("linkID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "linkID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "linkID", r.URL.Query(), &params.LinkID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "linkID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLinkQrCodeCallback(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ActivateLink operation middleware
func (siw *ServerInterfaceWrapper) ActivateLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ActivateLink(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateLinkOffer operation middleware
func (siw *ServerInterfaceWrapper) CreateLinkOffer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLinkOffer(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRevocationStatusV2 operation middleware
func (siw *ServerInterfaceWrapper) GetRevocationStatusV2(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithOptions("simple", "nonce", chi.URLParam(r, "nonce"), &nonce, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRevocationStatusV2(w, r, identifier, nonce)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RevokeCredential operation middleware
func (siw *ServerInterfaceWrapper) RevokeCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithOptions("simple", "nonce", chi.URLParam(r, "nonce"), &nonce, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeCredential(w, r, identifier, nonce)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathClaim

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCredential(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathClaim

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredential(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCredentialOffer operation middleware
func (siw *ServerInterfaceWrapper) GetCredentialOffer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathClaim

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialOfferParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentialOffer(w, r, identifier, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDisplayMethods operation middleware
func (siw *ServerInterfaceWrapper) GetAllDisplayMethods(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDisplayMethodsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", r.URL.Query(), &params.MaxResults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_results", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDisplayMethods(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDisplayMethod operation middleware
func (siw *ServerInterfaceWrapper) CreateDisplayMethod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDisplayMethod(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDisplayMethod operation middleware
func (siw *ServerInterfaceWrapper) DeleteDisplayMethod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDisplayMethod(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDisplayMethod operation middleware
func (siw *ServerInterfaceWrapper) GetDisplayMethod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDisplayMethod(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDisplayMethod operation middleware
func (siw *ServerInterfaceWrapper) UpdateDisplayMethod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDisplayMethod(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKeys operation middleware
func (siw *ServerInterfaceWrapper) GetKeys(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetKeysParams

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", r.URL.Query(), &params.MaxResults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_results", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKeys(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateKey operation middleware
func (siw *ServerInterfaceWrapper) CreateKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateKey(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKey(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetKey operation middleware
func (siw *ServerInterfaceWrapper) GetKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetKey(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier2

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathKeyID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateKey(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPaymentRequests operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentRequests(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentRequests(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePaymentRequest operation middleware
func (siw *ServerInterfaceWrapper) CreatePaymentRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePaymentRequest(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePaymentRequest operation middleware
func (siw *ServerInterfaceWrapper) DeletePaymentRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePaymentRequest(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPaymentRequest operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentRequest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentRequest(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPaymentOptions operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentOptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentOptions(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePaymentOption operation middleware
func (siw *ServerInterfaceWrapper) CreatePaymentOption(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePaymentOption(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePaymentOption operation middleware
func (siw *ServerInterfaceWrapper) DeletePaymentOption(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePaymentOption(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPaymentOption operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentOption(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentOption(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePaymentOption operation middleware
func (siw *ServerInterfaceWrapper) UpdatePaymentOption(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePaymentOption(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyPayment operation middleware
func (siw *ServerInterfaceWrapper) VerifyPayment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce string

	err = runtime.BindStyledParameterWithOptions("simple", "nonce", chi.URLParam(r, "nonce"), &nonce, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyPayment(w, r, identifier, nonce)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchemas operation middleware
func (siw *ServerInterfaceWrapper) GetSchemas(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchemasParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchemas(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ImportSchema operation middleware
func (siw *ServerInterfaceWrapper) ImportSchema(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportSchema(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchema operation middleware
func (siw *ServerInterfaceWrapper) GetSchema(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchema(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSchema operation middleware
func (siw *ServerInterfaceWrapper) UpdateSchema(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSchema(w, r, identifier, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PublishIdentityState operation middleware
func (siw *ServerInterfaceWrapper) PublishIdentityState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishIdentityState(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryPublishState operation middleware
func (siw *ServerInterfaceWrapper) RetryPublishState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryPublishState(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStateStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStateStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStateStatus(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStateTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetStateTransactions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStateTransactionsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", r.URL.Query(), &params.MaxResults)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "max_results", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", false, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStateTransactions(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPaymentSettings operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentSettings(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPaymentSettings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetQrFromStore operation middleware
func (siw *ServerInterfaceWrapper) GetQrFromStore(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQrFromStoreParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "issuer" -------------

	err = runtime.BindQueryParameter("form", true, false, "issuer", r.URL.Query(), &params.Issuer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "issuer", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQrFromStore(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSupportedNetworks operation middleware
func (siw *ServerInterfaceWrapper) GetSupportedNetworks(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSupportedNetworks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Authentication operation middleware
func (siw *ServerInterfaceWrapper) Authentication(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", chi.URLParam(r, "identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthenticationParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Authentication(w, r, identifier, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/agent", wrapper.AgentV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/{identifier}/claims/revocation/status/{nonce}", wrapper.GetRevocationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/agent", wrapper.Agent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/authentication/callback", wrapper.AuthCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/authentication/sessions/{id}", wrapper.GetAuthenticationConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities", wrapper.GetIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities", wrapper.CreateIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}", wrapper.GetIdentityDetails)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}", wrapper.UpdateIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/connections", wrapper.GetConnections)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/connections", wrapper.CreateConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/connections/{id}", wrapper.GetConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/connections/{id}/credentials", wrapper.DeleteConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/connections/{id}/credentials/revoke", wrapper.RevokeConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/create-auth-credential", wrapper.CreateAuthCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials", wrapper.GetCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/credentials", wrapper.CreateCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials/links", wrapper.GetLinks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/credentials/links", wrapper.CreateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/credentials/links/callback", wrapper.CreateLinkQrCodeCallback)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/credentials/links/{id}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials/links/{id}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}/credentials/links/{id}", wrapper.ActivateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/credentials/links/{id}/offer", wrapper.CreateLinkOffer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials/revocation/status/{nonce}", wrapper.GetRevocationStatusV2)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/credentials/revoke/{nonce}", wrapper.RevokeCredential)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/credentials/{id}", wrapper.DeleteCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials/{id}", wrapper.GetCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/credentials/{id}/offer", wrapper.GetCredentialOffer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/display-method", wrapper.GetAllDisplayMethods)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/display-method", wrapper.CreateDisplayMethod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/display-method/{id}", wrapper.DeleteDisplayMethod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/display-method/{id}", wrapper.GetDisplayMethod)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}/display-method/{id}", wrapper.UpdateDisplayMethod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/keys", wrapper.GetKeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/keys", wrapper.CreateKey)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/keys/{id}", wrapper.DeleteKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/keys/{id}", wrapper.GetKey)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}/keys/{id}", wrapper.UpdateKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/payment-request", wrapper.GetPaymentRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/payment-request", wrapper.CreatePaymentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/payment-request/{id}", wrapper.DeletePaymentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/payment-request/{id}", wrapper.GetPaymentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/payment/options", wrapper.GetPaymentOptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/payment/options", wrapper.CreatePaymentOption)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/identities/{identifier}/payment/options/{id}", wrapper.DeletePaymentOption)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/payment/options/{id}", wrapper.GetPaymentOption)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}/payment/options/{id}", wrapper.UpdatePaymentOption)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/payment/verify/{nonce}", wrapper.VerifyPayment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/schemas", wrapper.GetSchemas)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/schemas", wrapper.ImportSchema)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/schemas/{id}", wrapper.GetSchema)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v2/identities/{identifier}/schemas/{id}", wrapper.UpdateSchema)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/state/publish", wrapper.PublishIdentityState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/identities/{identifier}/state/retry", wrapper.RetryPublishState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/state/status", wrapper.GetStateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/identities/{identifier}/state/transactions", wrapper.GetStateTransactions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/payment/settings", wrapper.GetPaymentSettings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/qr-store", wrapper.GetQrFromStore)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/supported-networks", wrapper.GetSupportedNetworks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/{identifier}/authentication", wrapper.Authentication)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N401JSONResponse GenericErrorMessage

type N403JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N409JSONResponse GenericErrorMessage

type N410JSONResponse GenericErrorMessage

type N422JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type N500CreateIdentityJSONResponse struct {
	Code      *int    `json:"code,omitempty"`
	Error     *string `json:"error,omitempty"`
	RequestID *string `json:"requestID,omitempty"`
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AgentV1RequestObject struct {
	Body *AgentV1TextRequestBody
}

type AgentV1ResponseObject interface {
	VisitAgentV1Response(w http.ResponseWriter) error
}

type AgentV1200JSONResponse AgentResponse

func (response AgentV1200JSONResponse) VisitAgentV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AgentV1400JSONResponse struct{ N400JSONResponse }

func (response AgentV1400JSONResponse) VisitAgentV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AgentV1500JSONResponse struct{ N500JSONResponse }

func (response AgentV1500JSONResponse) VisitAgentV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Nonce      PathNonce      `json:"nonce"`
}

type GetRevocationStatusResponseObject interface {
	VisitGetRevocationStatusResponse(w http.ResponseWriter) error
}

type GetRevocationStatus200JSONResponse RevocationStatusResponse

func (response GetRevocationStatus200JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus400JSONResponse struct{ N400JSONResponse }

func (response GetRevocationStatus400JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus500JSONResponse struct{ N500JSONResponse }

func (response GetRevocationStatus500JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AgentRequestObject struct {
	Body *AgentTextRequestBody
}

type AgentResponseObject interface {
	VisitAgentResponse(w http.ResponseWriter) error
}

type Agent200JSONResponse AgentResponse

func (response Agent200JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Agent400JSONResponse struct{ N400JSONResponse }

func (response Agent400JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Agent500JSONResponse struct{ N500JSONResponse }

func (response Agent500JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallbackRequestObject struct {
	Params AuthCallbackParams
	Body   *AuthCallbackTextRequestBody
}

type AuthCallbackResponseObject interface {
	VisitAuthCallbackResponse(w http.ResponseWriter) error
}

type AuthCallback200Response struct {
}

func (response AuthCallback200Response) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthCallback400JSONResponse struct{ N400JSONResponse }

func (response AuthCallback400JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallback500JSONResponse struct{ N500JSONResponse }

func (response AuthCallback500JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthenticationConnectionRequestObject struct {
	Id Id `json:"id"`
}

type GetAuthenticationConnectionResponseObject interface {
	VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error
}

type GetAuthenticationConnection200JSONResponse GetAuthenticationConnectionResponse

func (response GetAuthenticationConnection200JSONResponse) VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthenticationConnection400JSONResponse struct{ N400JSONResponse }

func (response GetAuthenticationConnection400JSONResponse) VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthenticationConnection401JSONResponse struct{ N401JSONResponse }

func (response GetAuthenticationConnection401JSONResponse) VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthenticationConnection404JSONResponse struct{ N404JSONResponse }

func (response GetAuthenticationConnection404JSONResponse) VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthenticationConnection500JSONResponse struct{ N500JSONResponse }

func (response GetAuthenticationConnection500JSONResponse) VisitGetAuthenticationConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentitiesRequestObject struct {
}

type GetIdentitiesResponseObject interface {
	VisitGetIdentitiesResponse(w http.ResponseWriter) error
}

type GetIdentities200JSONResponse []GetIdentitiesResponse

func (response GetIdentities200JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentities401JSONResponse struct{ N401JSONResponse }

func (response GetIdentities401JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentities500JSONResponse struct{ N500JSONResponse }

func (response GetIdentities500JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentityRequestObject struct {
	Body *CreateIdentityJSONRequestBody
}

type CreateIdentityResponseObject interface {
	VisitCreateIdentityResponse(w http.ResponseWriter) error
}

type CreateIdentity201JSONResponse CreateIdentityResponse

func (response CreateIdentity201JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity400JSONResponse struct{ N400JSONResponse }

func (response CreateIdentity400JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity401JSONResponse struct{ N401JSONResponse }

func (response CreateIdentity401JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity403JSONResponse struct{ N403JSONResponse }

func (response CreateIdentity403JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity409JSONResponse struct{ N409JSONResponse }

func (response CreateIdentity409JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity500JSONResponse struct{ N500JSONResponse }

func (response CreateIdentity500JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentityDetailsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type GetIdentityDetailsResponseObject interface {
	VisitGetIdentityDetailsResponse(w http.ResponseWriter) error
}

type GetIdentityDetails200JSONResponse GetIdentityDetailsResponse

func (response GetIdentityDetails200JSONResponse) VisitGetIdentityDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentityDetails400JSONResponse struct{ N400JSONResponse }

func (response GetIdentityDetails400JSONResponse) VisitGetIdentityDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentityDetails401JSONResponse struct{ N401JSONResponse }

func (response GetIdentityDetails401JSONResponse) VisitGetIdentityDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentityDetails500JSONResponse struct{ N500JSONResponse }

func (response GetIdentityDetails500JSONResponse) VisitGetIdentityDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentityRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *UpdateIdentityJSONRequestBody
}

type UpdateIdentityResponseObject interface {
	VisitUpdateIdentityResponse(w http.ResponseWriter) error
}

type UpdateIdentity200JSONResponse GenericMessage

func (response UpdateIdentity200JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity400JSONResponse struct{ N400JSONResponse }

func (response UpdateIdentity400JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity401JSONResponse struct{ N401JSONResponse }

func (response UpdateIdentity401JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity403JSONResponse struct{ N403JSONResponse }

func (response UpdateIdentity403JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity500JSONResponse struct{ N500CreateIdentityJSONResponse }

func (response UpdateIdentity500JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetConnectionsParams
}

type GetConnectionsResponseObject interface {
	VisitGetConnectionsResponse(w http.ResponseWriter) error
}

type GetConnections200JSONResponse ConnectionsPaginated

func (response GetConnections200JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections400JSONResponse struct{ N400JSONResponse }

func (response GetConnections400JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections500JSONResponse struct{ N500JSONResponse }

func (response GetConnections500JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnectionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreateConnectionJSONRequestBody
}

type CreateConnectionResponseObject interface {
	VisitCreateConnectionResponse(w http.ResponseWriter) error
}

type CreateConnection201JSONResponse GenericMessage

func (response CreateConnection201JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection400JSONResponse struct{ N400JSONResponse }

func (response CreateConnection400JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateConnection500JSONResponse struct{ N500JSONResponse }

func (response CreateConnection500JSONResponse) VisitCreateConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
	Params     DeleteConnectionParams
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection200JSONResponse GenericMessage

func (response DeleteConnection200JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection400JSONResponse struct{ N400JSONResponse }

func (response DeleteConnection400JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetConnectionResponseObject interface {
	VisitGetConnectionResponse(w http.ResponseWriter) error
}

type GetConnection200JSONResponse GetConnectionResponse

func (response GetConnection200JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection400JSONResponse struct{ N400JSONResponse }

func (response GetConnection400JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection500JSONResponse struct{ N500JSONResponse }

func (response GetConnection500JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentialsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type DeleteConnectionCredentialsResponseObject interface {
	VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error
}

type DeleteConnectionCredentials200JSONResponse GenericMessage

func (response DeleteConnectionCredentials200JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentials400JSONResponse struct{ N400JSONResponse }

func (response DeleteConnectionCredentials400JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnectionCredentials500JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentialsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type RevokeConnectionCredentialsResponseObject interface {
	VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error
}

type RevokeConnectionCredentials202JSONResponse GenericMessage

func (response RevokeConnectionCredentials202JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials400JSONResponse struct{ N400JSONResponse }

func (response RevokeConnectionCredentials400JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response RevokeConnectionCredentials500JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthCredentialRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Body       *CreateAuthCredentialJSONRequestBody
}

type CreateAuthCredentialResponseObject interface {
	VisitCreateAuthCredentialResponse(w http.ResponseWriter) error
}

type CreateAuthCredential201JSONResponse struct {
	// Id The ID of the created Auth Credential
	Id uuid.UUID `json:"id"`
}

func (response CreateAuthCredential201JSONResponse) VisitCreateAuthCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthCredential400JSONResponse struct{ N400JSONResponse }

func (response CreateAuthCredential400JSONResponse) VisitCreateAuthCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthCredential500JSONResponse struct{ N500JSONResponse }

func (response CreateAuthCredential500JSONResponse) VisitCreateAuthCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetCredentialsParams
}

type GetCredentialsResponseObject interface {
	VisitGetCredentialsResponse(w http.ResponseWriter) error
}

type GetCredentials200JSONResponse CredentialsPaginated

func (response GetCredentials200JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials400JSONResponse struct{ N400JSONResponse }

func (response GetCredentials400JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials404JSONResponse struct{ N404JSONResponse }

func (response GetCredentials404JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials500JSONResponse struct{ N500JSONResponse }

func (response GetCredentials500JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredentialRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreateCredentialJSONRequestBody
}

type CreateCredentialResponseObject interface {
	VisitCreateCredentialResponse(w http.ResponseWriter) error
}

type CreateCredential201JSONResponse CreateCredentialResponse

func (response CreateCredential201JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential400JSONResponse struct{ N400JSONResponse }

func (response CreateCredential400JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential401JSONResponse struct{ N401JSONResponse }

func (response CreateCredential401JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential422JSONResponse struct{ N422JSONResponse }

func (response CreateCredential422JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential500JSONResponse struct{ N500JSONResponse }

func (response CreateCredential500JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinksRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetLinksParams
}

type GetLinksResponseObject interface {
	VisitGetLinksResponse(w http.ResponseWriter) error
}

type GetLinks200JSONResponse []Link

func (response GetLinks200JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks400JSONResponse struct{ N400JSONResponse }

func (response GetLinks400JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks404JSONResponse struct{ N404JSONResponse }

func (response GetLinks404JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks500JSONResponse struct{ N500JSONResponse }

func (response GetLinks500JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreateLinkJSONRequestBody
}

type CreateLinkResponseObject interface {
	VisitCreateLinkResponse(w http.ResponseWriter) error
}

type CreateLink201JSONResponse UUIDResponse

func (response CreateLink201JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink400JSONResponse struct{ N400JSONResponse }

func (response CreateLink400JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink500JSONResponse struct{ N500JSONResponse }

func (response CreateLink500JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallbackRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     CreateLinkQrCodeCallbackParams
	Body       *CreateLinkQrCodeCallbackTextRequestBody
}

type CreateLinkQrCodeCallbackResponseObject interface {
	VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error
}

type CreateLinkQrCodeCallback200JSONResponse Offer

func (response CreateLinkQrCodeCallback200JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallback400JSONResponse struct{ N400JSONResponse }

func (response CreateLinkQrCodeCallback400JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallback500JSONResponse struct{ N500JSONResponse }

func (response CreateLinkQrCodeCallback500JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLinkRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type DeleteLinkResponseObject interface {
	VisitDeleteLinkResponse(w http.ResponseWriter) error
}

type DeleteLink200JSONResponse GenericMessage

func (response DeleteLink200JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink400JSONResponse struct{ N400JSONResponse }

func (response DeleteLink400JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink500JSONResponse struct{ N500JSONResponse }

func (response DeleteLink500JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetLinkResponseObject interface {
	VisitGetLinkResponse(w http.ResponseWriter) error
}

type GetLink200JSONResponse Link

func (response GetLink200JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLink400JSONResponse struct{ N400JSONResponse }

func (response GetLink400JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLink404JSONResponse struct{ N404JSONResponse }

func (response GetLink404JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLink500JSONResponse struct{ N500JSONResponse }

func (response GetLink500JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ActivateLinkRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
	Body       *ActivateLinkJSONRequestBody
}

type ActivateLinkResponseObject interface {
	VisitActivateLinkResponse(w http.ResponseWriter) error
}

type ActivateLink200JSONResponse GenericMessage

func (response ActivateLink200JSONResponse) VisitActivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ActivateLink400JSONResponse struct{ N400JSONResponse }

func (response ActivateLink400JSONResponse) VisitActivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ActivateLink500JSONResponse struct{ N500JSONResponse }

func (response ActivateLink500JSONResponse) VisitActivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkOfferRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type CreateLinkOfferResponseObject interface {
	VisitCreateLinkOfferResponse(w http.ResponseWriter) error
}

type CreateLinkOffer200JSONResponse CredentialLinkQrCodeResponse

func (response CreateLinkOffer200JSONResponse) VisitCreateLinkOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkOffer400JSONResponse struct{ N400JSONResponse }

func (response CreateLinkOffer400JSONResponse) VisitCreateLinkOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkOffer404JSONResponse struct{ N404JSONResponse }

func (response CreateLinkOffer404JSONResponse) VisitCreateLinkOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkOffer500JSONResponse struct{ N500JSONResponse }

func (response CreateLinkOffer500JSONResponse) VisitCreateLinkOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusV2RequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Nonce      PathNonce      `json:"nonce"`
}

type GetRevocationStatusV2ResponseObject interface {
	VisitGetRevocationStatusV2Response(w http.ResponseWriter) error
}

type GetRevocationStatusV2200JSONResponse RevocationStatusResponse

func (response GetRevocationStatusV2200JSONResponse) VisitGetRevocationStatusV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusV2400JSONResponse struct{ N400JSONResponse }

func (response GetRevocationStatusV2400JSONResponse) VisitGetRevocationStatusV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusV2500JSONResponse struct{ N500JSONResponse }

func (response GetRevocationStatusV2500JSONResponse) VisitGetRevocationStatusV2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredentialRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Nonce      PathNonce      `json:"nonce"`
}

type RevokeCredentialResponseObject interface {
	VisitRevokeCredentialResponse(w http.ResponseWriter) error
}

type RevokeCredential202JSONResponse RevokeClaimResponse

func (response RevokeCredential202JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential400JSONResponse struct{ N400JSONResponse }

func (response RevokeCredential400JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential401JSONResponse struct{ N401JSONResponse }

func (response RevokeCredential401JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential404JSONResponse struct{ N404JSONResponse }

func (response RevokeCredential404JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential500JSONResponse struct{ N500JSONResponse }

func (response RevokeCredential500JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredentialRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         PathClaim      `json:"id"`
}

type DeleteCredentialResponseObject interface {
	VisitDeleteCredentialResponse(w http.ResponseWriter) error
}

type DeleteCredential200JSONResponse GenericMessage

func (response DeleteCredential200JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential400JSONResponse struct{ N400JSONResponse }

func (response DeleteCredential400JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential401JSONResponse struct{ N401JSONResponse }

func (response DeleteCredential401JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential500JSONResponse struct{ N500JSONResponse }

func (response DeleteCredential500JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         PathClaim      `json:"id"`
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse Credential

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential400JSONResponse struct{ N400JSONResponse }

func (response GetCredential400JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential401JSONResponse struct{ N401JSONResponse }

func (response GetCredential401JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential404JSONResponse struct{ N404JSONResponse }

func (response GetCredential404JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential500JSONResponse struct{ N500JSONResponse }

func (response GetCredential500JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialOfferRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         PathClaim      `json:"id"`
	Params     GetCredentialOfferParams
}

type GetCredentialOfferResponseObject interface {
	VisitGetCredentialOfferResponse(w http.ResponseWriter) error
}

type GetCredentialOffer200JSONResponse CredentialOfferResponse

func (response GetCredentialOffer200JSONResponse) VisitGetCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialOffer400JSONResponse struct{ N400JSONResponse }

func (response GetCredentialOffer400JSONResponse) VisitGetCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialOffer404JSONResponse struct{ N404JSONResponse }

func (response GetCredentialOffer404JSONResponse) VisitGetCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialOffer409JSONResponse struct{ N409JSONResponse }

func (response GetCredentialOffer409JSONResponse) VisitGetCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialOffer500JSONResponse struct{ N500JSONResponse }

func (response GetCredentialOffer500JSONResponse) VisitGetCredentialOfferResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDisplayMethodsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetAllDisplayMethodsParams
}

type GetAllDisplayMethodsResponseObject interface {
	VisitGetAllDisplayMethodsResponse(w http.ResponseWriter) error
}

type GetAllDisplayMethods200JSONResponse DisplayMethodPaginated

func (response GetAllDisplayMethods200JSONResponse) VisitGetAllDisplayMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDisplayMethods400JSONResponse struct{ N400JSONResponse }

func (response GetAllDisplayMethods400JSONResponse) VisitGetAllDisplayMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDisplayMethods404JSONResponse struct{ N404JSONResponse }

func (response GetAllDisplayMethods404JSONResponse) VisitGetAllDisplayMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDisplayMethods500JSONResponse struct{ N500JSONResponse }

func (response GetAllDisplayMethods500JSONResponse) VisitGetAllDisplayMethodsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateDisplayMethodRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreateDisplayMethodJSONRequestBody
}

type CreateDisplayMethodResponseObject interface {
	VisitCreateDisplayMethodResponse(w http.ResponseWriter) error
}

type CreateDisplayMethod201JSONResponse UUIDResponse

func (response CreateDisplayMethod201JSONResponse) VisitCreateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDisplayMethod400JSONResponse struct{ N400JSONResponse }

func (response CreateDisplayMethod400JSONResponse) VisitCreateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDisplayMethod500JSONResponse struct{ N500JSONResponse }

func (response CreateDisplayMethod500JSONResponse) VisitCreateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDisplayMethodRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type DeleteDisplayMethodResponseObject interface {
	VisitDeleteDisplayMethodResponse(w http.ResponseWriter) error
}

type DeleteDisplayMethod200JSONResponse GenericMessage

func (response DeleteDisplayMethod200JSONResponse) VisitDeleteDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDisplayMethod400JSONResponse struct{ N400JSONResponse }

func (response DeleteDisplayMethod400JSONResponse) VisitDeleteDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDisplayMethod404JSONResponse struct{ N404JSONResponse }

func (response DeleteDisplayMethod404JSONResponse) VisitDeleteDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDisplayMethod500JSONResponse struct{ N500JSONResponse }

func (response DeleteDisplayMethod500JSONResponse) VisitDeleteDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDisplayMethodRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetDisplayMethodResponseObject interface {
	VisitGetDisplayMethodResponse(w http.ResponseWriter) error
}

type GetDisplayMethod200JSONResponse DisplayMethodEntity

func (response GetDisplayMethod200JSONResponse) VisitGetDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDisplayMethod400JSONResponse struct{ N400JSONResponse }

func (response GetDisplayMethod400JSONResponse) VisitGetDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDisplayMethod404JSONResponse struct{ N404JSONResponse }

func (response GetDisplayMethod404JSONResponse) VisitGetDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDisplayMethod500JSONResponse struct{ N500JSONResponse }

func (response GetDisplayMethod500JSONResponse) VisitGetDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDisplayMethodRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
	Body       *UpdateDisplayMethodJSONRequestBody
}

type UpdateDisplayMethodResponseObject interface {
	VisitUpdateDisplayMethodResponse(w http.ResponseWriter) error
}

type UpdateDisplayMethod200JSONResponse GenericMessage

func (response UpdateDisplayMethod200JSONResponse) VisitUpdateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDisplayMethod400JSONResponse struct{ N400JSONResponse }

func (response UpdateDisplayMethod400JSONResponse) VisitUpdateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDisplayMethod404JSONResponse struct{ N404JSONResponse }

func (response UpdateDisplayMethod404JSONResponse) VisitUpdateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDisplayMethod500JSONResponse struct{ N500JSONResponse }

func (response UpdateDisplayMethod500JSONResponse) VisitUpdateDisplayMethodResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeysRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Params     GetKeysParams
}

type GetKeysResponseObject interface {
	VisitGetKeysResponse(w http.ResponseWriter) error
}

type GetKeys200JSONResponse KeysPaginated

func (response GetKeys200JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys400JSONResponse struct{ N400JSONResponse }

func (response GetKeys400JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys404JSONResponse struct{ N404JSONResponse }

func (response GetKeys404JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKeys500JSONResponse struct{ N500JSONResponse }

func (response GetKeys500JSONResponse) VisitGetKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateKeyRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Body       *CreateKeyJSONRequestBody
}

type CreateKeyResponseObject interface {
	VisitCreateKeyResponse(w http.ResponseWriter) error
}

type CreateKey201JSONResponse CreateKeyResponse

func (response CreateKey201JSONResponse) VisitCreateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateKey400JSONResponse struct{ N400JSONResponse }

func (response CreateKey400JSONResponse) VisitCreateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateKey401JSONResponse struct{ N401JSONResponse }

func (response CreateKey401JSONResponse) VisitCreateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateKey500JSONResponse struct{ N500JSONResponse }

func (response CreateKey500JSONResponse) VisitCreateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKeyRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Id         PathKeyID       `json:"id"`
}

type DeleteKeyResponseObject interface {
	VisitDeleteKeyResponse(w http.ResponseWriter) error
}

type DeleteKey200JSONResponse GenericMessage

func (response DeleteKey200JSONResponse) VisitDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKey400JSONResponse struct{ N400JSONResponse }

func (response DeleteKey400JSONResponse) VisitDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKey401JSONResponse struct{ N401JSONResponse }

func (response DeleteKey401JSONResponse) VisitDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKey404JSONResponse struct{ N404JSONResponse }

func (response DeleteKey404JSONResponse) VisitDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteKey500JSONResponse struct{ N500JSONResponse }

func (response DeleteKey500JSONResponse) VisitDeleteKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetKeyRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Id         PathKeyID       `json:"id"`
}

type GetKeyResponseObject interface {
	VisitGetKeyResponse(w http.ResponseWriter) error
}

type GetKey200JSONResponse Key

func (response GetKey200JSONResponse) VisitGetKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetKey400JSONResponse struct{ N400JSONResponse }

func (response GetKey400JSONResponse) VisitGetKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetKey401JSONResponse struct{ N401JSONResponse }

func (response GetKey401JSONResponse) VisitGetKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetKey404JSONResponse struct{ N404JSONResponse }

func (response GetKey404JSONResponse) VisitGetKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetKey500JSONResponse struct{ N500JSONResponse }

func (response GetKey500JSONResponse) VisitGetKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKeyRequestObject struct {
	Identifier PathIdentifier2 `json:"identifier"`
	Id         PathKeyID       `json:"id"`
	Body       *UpdateKeyJSONRequestBody
}

type UpdateKeyResponseObject interface {
	VisitUpdateKeyResponse(w http.ResponseWriter) error
}

type UpdateKey200JSONResponse GenericMessage

func (response UpdateKey200JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey400JSONResponse struct{ N400JSONResponse }

func (response UpdateKey400JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey401JSONResponse struct{ N401JSONResponse }

func (response UpdateKey401JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey404JSONResponse struct{ N404JSONResponse }

func (response UpdateKey404JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateKey500JSONResponse struct{ N500JSONResponse }

func (response UpdateKey500JSONResponse) VisitUpdateKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequestsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type GetPaymentRequestsResponseObject interface {
	VisitGetPaymentRequestsResponse(w http.ResponseWriter) error
}

type GetPaymentRequests200JSONResponse GetPaymentRequestsResponse

func (response GetPaymentRequests200JSONResponse) VisitGetPaymentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequests400JSONResponse struct{ N400JSONResponse }

func (response GetPaymentRequests400JSONResponse) VisitGetPaymentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequests401JSONResponse struct{ N401JSONResponse }

func (response GetPaymentRequests401JSONResponse) VisitGetPaymentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequests500JSONResponse struct{ N500JSONResponse }

func (response GetPaymentRequests500JSONResponse) VisitGetPaymentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentRequestRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreatePaymentRequestJSONRequestBody
}

type CreatePaymentRequestResponseObject interface {
	VisitCreatePaymentRequestResponse(w http.ResponseWriter) error
}

type CreatePaymentRequest201JSONResponse CreatePaymentRequestResponse

func (response CreatePaymentRequest201JSONResponse) VisitCreatePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentRequest400JSONResponse struct{ N400JSONResponse }

func (response CreatePaymentRequest400JSONResponse) VisitCreatePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentRequest401JSONResponse struct{ N401JSONResponse }

func (response CreatePaymentRequest401JSONResponse) VisitCreatePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentRequest500JSONResponse struct{ N500JSONResponse }

func (response CreatePaymentRequest500JSONResponse) VisitCreatePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentRequestRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type DeletePaymentRequestResponseObject interface {
	VisitDeletePaymentRequestResponse(w http.ResponseWriter) error
}

type DeletePaymentRequest200JSONResponse GenericMessage

func (response DeletePaymentRequest200JSONResponse) VisitDeletePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentRequest400JSONResponse struct{ N400JSONResponse }

func (response DeletePaymentRequest400JSONResponse) VisitDeletePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentRequest500JSONResponse struct{ N500JSONResponse }

func (response DeletePaymentRequest500JSONResponse) VisitDeletePaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequestRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetPaymentRequestResponseObject interface {
	VisitGetPaymentRequestResponse(w http.ResponseWriter) error
}

type GetPaymentRequest200JSONResponse CreatePaymentRequestResponse

func (response GetPaymentRequest200JSONResponse) VisitGetPaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequest400JSONResponse struct{ N400JSONResponse }

func (response GetPaymentRequest400JSONResponse) VisitGetPaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequest404JSONResponse struct{ N404JSONResponse }

func (response GetPaymentRequest404JSONResponse) VisitGetPaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentRequest500JSONResponse struct{ N500JSONResponse }

func (response GetPaymentRequest500JSONResponse) VisitGetPaymentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOptionsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type GetPaymentOptionsResponseObject interface {
	VisitGetPaymentOptionsResponse(w http.ResponseWriter) error
}

type GetPaymentOptions200JSONResponse PaymentOptionsPaginated

func (response GetPaymentOptions200JSONResponse) VisitGetPaymentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOptions400JSONResponse struct{ N400JSONResponse }

func (response GetPaymentOptions400JSONResponse) VisitGetPaymentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOptions401JSONResponse struct{ N401JSONResponse }

func (response GetPaymentOptions401JSONResponse) VisitGetPaymentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOptions500JSONResponse struct{ N500JSONResponse }

func (response GetPaymentOptions500JSONResponse) VisitGetPaymentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentOptionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreatePaymentOptionJSONRequestBody
}

type CreatePaymentOptionResponseObject interface {
	VisitCreatePaymentOptionResponse(w http.ResponseWriter) error
}

type CreatePaymentOption201JSONResponse UUIDResponse

func (response CreatePaymentOption201JSONResponse) VisitCreatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentOption400JSONResponse struct{ N400JSONResponse }

func (response CreatePaymentOption400JSONResponse) VisitCreatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentOption401JSONResponse struct{ N401JSONResponse }

func (response CreatePaymentOption401JSONResponse) VisitCreatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentOption409JSONResponse struct{ N409JSONResponse }

func (response CreatePaymentOption409JSONResponse) VisitCreatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePaymentOption500JSONResponse struct{ N500JSONResponse }

func (response CreatePaymentOption500JSONResponse) VisitCreatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentOptionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type DeletePaymentOptionResponseObject interface {
	VisitDeletePaymentOptionResponse(w http.ResponseWriter) error
}

type DeletePaymentOption200JSONResponse GenericMessage

func (response DeletePaymentOption200JSONResponse) VisitDeletePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentOption400JSONResponse struct{ N400JSONResponse }

func (response DeletePaymentOption400JSONResponse) VisitDeletePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePaymentOption500JSONResponse struct{ N500JSONResponse }

func (response DeletePaymentOption500JSONResponse) VisitDeletePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOptionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetPaymentOptionResponseObject interface {
	VisitGetPaymentOptionResponse(w http.ResponseWriter) error
}

type GetPaymentOption200JSONResponse PaymentOption

func (response GetPaymentOption200JSONResponse) VisitGetPaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOption400JSONResponse struct{ N400JSONResponse }

func (response GetPaymentOption400JSONResponse) VisitGetPaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOption404JSONResponse struct{ N404JSONResponse }

func (response GetPaymentOption404JSONResponse) VisitGetPaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentOption500JSONResponse struct{ N500JSONResponse }

func (response GetPaymentOption500JSONResponse) VisitGetPaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePaymentOptionRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
	Body       *UpdatePaymentOptionJSONRequestBody
}

type UpdatePaymentOptionResponseObject interface {
	VisitUpdatePaymentOptionResponse(w http.ResponseWriter) error
}

type UpdatePaymentOption200JSONResponse GenericMessage

func (response UpdatePaymentOption200JSONResponse) VisitUpdatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePaymentOption400JSONResponse struct{ N400JSONResponse }

func (response UpdatePaymentOption400JSONResponse) VisitUpdatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePaymentOption404JSONResponse struct{ N404JSONResponse }

func (response UpdatePaymentOption404JSONResponse) VisitUpdatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePaymentOption500JSONResponse struct{ N500JSONResponse }

func (response UpdatePaymentOption500JSONResponse) VisitUpdatePaymentOptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type VerifyPaymentRequestObject struct {
	Identifier string `json:"identifier"`
	Nonce      string `json:"nonce"`
	Body       *VerifyPaymentJSONRequestBody
}

type VerifyPaymentResponseObject interface {
	VisitVerifyPaymentResponse(w http.ResponseWriter) error
}

type VerifyPayment200JSONResponse PaymentStatus

func (response VerifyPayment200JSONResponse) VisitVerifyPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyPayment400JSONResponse struct{ N400JSONResponse }

func (response VerifyPayment400JSONResponse) VisitVerifyPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type VerifyPayment401JSONResponse struct{ N401JSONResponse }

func (response VerifyPayment401JSONResponse) VisitVerifyPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type VerifyPayment500JSONResponse struct{ N500JSONResponse }

func (response VerifyPayment500JSONResponse) VisitVerifyPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemasRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetSchemasParams
}

type GetSchemasResponseObject interface {
	VisitGetSchemasResponse(w http.ResponseWriter) error
}

type GetSchemas200JSONResponse []Schema

func (response GetSchemas200JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas400JSONResponse struct{ N400JSONResponse }

func (response GetSchemas400JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas500JSONResponse struct{ N500JSONResponse }

func (response GetSchemas500JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchemaRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *ImportSchemaJSONRequestBody
}

type ImportSchemaResponseObject interface {
	VisitImportSchemaResponse(w http.ResponseWriter) error
}

type ImportSchema201JSONResponse UUIDResponse

func (response ImportSchema201JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema400JSONResponse struct{ N400JSONResponse }

func (response ImportSchema400JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema500JSONResponse struct{ N500JSONResponse }

func (response ImportSchema500JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemaRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
}

type GetSchemaResponseObject interface {
	VisitGetSchemaResponse(w http.ResponseWriter) error
}

type GetSchema200JSONResponse Schema

func (response GetSchema200JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema400JSONResponse struct{ N400JSONResponse }

func (response GetSchema400JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema404JSONResponse struct{ N404JSONResponse }

func (response GetSchema404JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema500JSONResponse struct{ N500JSONResponse }

func (response GetSchema500JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSchemaRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         Id             `json:"id"`
	Body       *UpdateSchemaJSONRequestBody
}

type UpdateSchemaResponseObject interface {
	VisitUpdateSchemaResponse(w http.ResponseWriter) error
}

type UpdateSchema200JSONResponse GenericMessage

func (response UpdateSchema200JSONResponse) VisitUpdateSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSchema400JSONResponse struct{ N400JSONResponse }

func (response UpdateSchema400JSONResponse) VisitUpdateSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSchema404JSONResponse struct{ N404JSONResponse }

func (response UpdateSchema404JSONResponse) VisitUpdateSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSchema500JSONResponse struct{ N500JSONResponse }

func (response UpdateSchema500JSONResponse) VisitUpdateSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityStateRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type PublishIdentityStateResponseObject interface {
	VisitPublishIdentityStateResponse(w http.ResponseWriter) error
}

type PublishIdentityState200JSONResponse GenericMessage

func (response PublishIdentityState200JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState202JSONResponse PublishIdentityStateResponse

func (response PublishIdentityState202JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState400JSONResponse struct{ N400JSONResponse }

func (response PublishIdentityState400JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState401JSONResponse struct{ N401JSONResponse }

func (response PublishIdentityState401JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState500JSONResponse struct{ N500JSONResponse }

func (response PublishIdentityState500JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishStateRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type RetryPublishStateResponseObject interface {
	VisitRetryPublishStateResponse(w http.ResponseWriter) error
}

type RetryPublishState202JSONResponse PublishIdentityStateResponse

func (response RetryPublishState202JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishState400JSONResponse struct{ N400JSONResponse }

func (response RetryPublishState400JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishState500JSONResponse struct{ N500JSONResponse }

func (response RetryPublishState500JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStateStatusRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type GetStateStatusResponseObject interface {
	VisitGetStateStatusResponse(w http.ResponseWriter) error
}

type GetStateStatus200JSONResponse StateStatusResponse

func (response GetStateStatus200JSONResponse) VisitGetStateStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStateStatus400JSONResponse struct{ N400JSONResponse }

func (response GetStateStatus400JSONResponse) VisitGetStateStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStateStatus500JSONResponse struct{ N500JSONResponse }

func (response GetStateStatus500JSONResponse) VisitGetStateStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStateTransactionsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetStateTransactionsParams
}

type GetStateTransactionsResponseObject interface {
	VisitGetStateTransactionsResponse(w http.ResponseWriter) error
}

type GetStateTransactions200JSONResponse StateTransactionsPaginated

func (response GetStateTransactions200JSONResponse) VisitGetStateTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStateTransactions400JSONResponse struct{ N400JSONResponse }

func (response GetStateTransactions400JSONResponse) VisitGetStateTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStateTransactions500JSONResponse struct{ N500JSONResponse }

func (response GetStateTransactions500JSONResponse) VisitGetStateTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPaymentSettingsRequestObject struct {
}

type GetPaymentSettingsResponseObject interface {
	VisitGetPaymentSettingsResponse(w http.ResponseWriter) error
}

type GetPaymentSettings200JSONResponse PaymentsConfiguration

func (response GetPaymentSettings200JSONResponse) VisitGetPaymentSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQrFromStoreRequestObject struct {
	Params GetQrFromStoreParams
}

type GetQrFromStoreResponseObject interface {
	VisitGetQrFromStoreResponse(w http.ResponseWriter) error
}

type GetQrFromStore200JSONResponse map[string]interface{}

func (response GetQrFromStore200JSONResponse) VisitGetQrFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQrFromStore400JSONResponse struct{ N400JSONResponse }

func (response GetQrFromStore400JSONResponse) VisitGetQrFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetQrFromStore404JSONResponse struct{ N404JSONResponse }

func (response GetQrFromStore404JSONResponse) VisitGetQrFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetQrFromStore410JSONResponse struct{ N410JSONResponse }

func (response GetQrFromStore410JSONResponse) VisitGetQrFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type GetQrFromStore500JSONResponse struct{ N500JSONResponse }

func (response GetQrFromStore500JSONResponse) VisitGetQrFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSupportedNetworksRequestObject struct {
}

type GetSupportedNetworksResponseObject interface {
	VisitGetSupportedNetworksResponse(w http.ResponseWriter) error
}

type GetSupportedNetworks200JSONResponse []SupportedNetworks

func (response GetSupportedNetworks200JSONResponse) VisitGetSupportedNetworksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSupportedNetworks400JSONResponse struct{ N400JSONResponse }

func (response GetSupportedNetworks400JSONResponse) VisitGetSupportedNetworksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSupportedNetworks401JSONResponse struct{ N401JSONResponse }

func (response GetSupportedNetworks401JSONResponse) VisitGetSupportedNetworksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSupportedNetworks404JSONResponse struct{ N404JSONResponse }

func (response GetSupportedNetworks404JSONResponse) VisitGetSupportedNetworksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSupportedNetworks500JSONResponse struct{ N500JSONResponse }

func (response GetSupportedNetworks500JSONResponse) VisitGetSupportedNetworksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthenticationRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     AuthenticationParams
}

type AuthenticationResponseObject interface {
	VisitAuthenticationResponse(w http.ResponseWriter) error
}

type Authentication200JSONResponse AuthenticationResponse

func (response Authentication200JSONResponse) VisitAuthenticationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Authentication400JSONResponse struct{ N400JSONResponse }

func (response Authentication400JSONResponse) VisitAuthenticationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Authentication500JSONResponse struct{ N500JSONResponse }

func (response Authentication500JSONResponse) VisitAuthenticationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Healthcheck
	// (GET /status)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Agent V1
	// (POST /v1/agent)
	AgentV1(ctx context.Context, request AgentV1RequestObject) (AgentV1ResponseObject, error)
	// Get Revocation Status V1
	// (GET /v1/{identifier}/claims/revocation/status/{nonce})
	GetRevocationStatus(ctx context.Context, request GetRevocationStatusRequestObject) (GetRevocationStatusResponseObject, error)
	// Agent
	// (POST /v2/agent)
	Agent(ctx context.Context, request AgentRequestObject) (AgentResponseObject, error)
	// Authentication Callback
	// (POST /v2/authentication/callback)
	AuthCallback(ctx context.Context, request AuthCallbackRequestObject) (AuthCallbackResponseObject, error)
	// Get Authentication Connection
	// (GET /v2/authentication/sessions/{id})
	GetAuthenticationConnection(ctx context.Context, request GetAuthenticationConnectionRequestObject) (GetAuthenticationConnectionResponseObject, error)
	// Get Identities
	// (GET /v2/identities)
	GetIdentities(ctx context.Context, request GetIdentitiesRequestObject) (GetIdentitiesResponseObject, error)
	// Create Identity
	// (POST /v2/identities)
	CreateIdentity(ctx context.Context, request CreateIdentityRequestObject) (CreateIdentityResponseObject, error)
	// Get Identity Detail
	// (GET /v2/identities/{identifier})
	GetIdentityDetails(ctx context.Context, request GetIdentityDetailsRequestObject) (GetIdentityDetailsResponseObject, error)
	// Update Identity
	// (PATCH /v2/identities/{identifier})
	UpdateIdentity(ctx context.Context, request UpdateIdentityRequestObject) (UpdateIdentityResponseObject, error)
	// Get Connections
	// (GET /v2/identities/{identifier}/connections)
	GetConnections(ctx context.Context, request GetConnectionsRequestObject) (GetConnectionsResponseObject, error)
	// Create Connection
	// (POST /v2/identities/{identifier}/connections)
	CreateConnection(ctx context.Context, request CreateConnectionRequestObject) (CreateConnectionResponseObject, error)
	// Delete Connection
	// (DELETE /v2/identities/{identifier}/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Get Connection
	// (GET /v2/identities/{identifier}/connections/{id})
	GetConnection(ctx context.Context, request GetConnectionRequestObject) (GetConnectionResponseObject, error)
	// Delete Connection Credentials
	// (DELETE /v2/identities/{identifier}/connections/{id}/credentials)
	DeleteConnectionCredentials(ctx context.Context, request DeleteConnectionCredentialsRequestObject) (DeleteConnectionCredentialsResponseObject, error)
	// Revoke Connection Credentials
	// (POST /v2/identities/{identifier}/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(ctx context.Context, request RevokeConnectionCredentialsRequestObject) (RevokeConnectionCredentialsResponseObject, error)
	// Create Auth Credential
	// (POST /v2/identities/{identifier}/create-auth-credential)
	CreateAuthCredential(ctx context.Context, request CreateAuthCredentialRequestObject) (CreateAuthCredentialResponseObject, error)
	// Get Credentials
	// (GET /v2/identities/{identifier}/credentials)
	GetCredentials(ctx context.Context, request GetCredentialsRequestObject) (GetCredentialsResponseObject, error)
	// Create Credential
	// (POST /v2/identities/{identifier}/credentials)
	CreateCredential(ctx context.Context, request CreateCredentialRequestObject) (CreateCredentialResponseObject, error)
	// Get Links
	// (GET /v2/identities/{identifier}/credentials/links)
	GetLinks(ctx context.Context, request GetLinksRequestObject) (GetLinksResponseObject, error)
	// Create Link
	// (POST /v2/identities/{identifier}/credentials/links)
	CreateLink(ctx context.Context, request CreateLinkRequestObject) (CreateLinkResponseObject, error)
	// Create Link QR Code Callback
	// (POST /v2/identities/{identifier}/credentials/links/callback)
	CreateLinkQrCodeCallback(ctx context.Context, request CreateLinkQrCodeCallbackRequestObject) (CreateLinkQrCodeCallbackResponseObject, error)
	// Delete Link
	// (DELETE /v2/identities/{identifier}/credentials/links/{id})
	DeleteLink(ctx context.Context, request DeleteLinkRequestObject) (DeleteLinkResponseObject, error)
	// Get Link
	// (GET /v2/identities/{identifier}/credentials/links/{id})
	GetLink(ctx context.Context, request GetLinkRequestObject) (GetLinkResponseObject, error)
	// Activate | Deactivate Link
	// (PATCH /v2/identities/{identifier}/credentials/links/{id})
	ActivateLink(ctx context.Context, request ActivateLinkRequestObject) (ActivateLinkResponseObject, error)
	// Create a credential offer for a link
	// (POST /v2/identities/{identifier}/credentials/links/{id}/offer)
	CreateLinkOffer(ctx context.Context, request CreateLinkOfferRequestObject) (CreateLinkOfferResponseObject, error)
	// Get Revocation Status
	// (GET /v2/identities/{identifier}/credentials/revocation/status/{nonce})
	GetRevocationStatusV2(ctx context.Context, request GetRevocationStatusV2RequestObject) (GetRevocationStatusV2ResponseObject, error)
	// Revoke Credential
	// (POST /v2/identities/{identifier}/credentials/revoke/{nonce})
	RevokeCredential(ctx context.Context, request RevokeCredentialRequestObject) (RevokeCredentialResponseObject, error)
	// Delete Credential
	// (DELETE /v2/identities/{identifier}/credentials/{id})
	DeleteCredential(ctx context.Context, request DeleteCredentialRequestObject) (DeleteCredentialResponseObject, error)
	// Get Credential
	// (GET /v2/identities/{identifier}/credentials/{id})
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)
	// Get Credentials Offer
	// (GET /v2/identities/{identifier}/credentials/{id}/offer)
	GetCredentialOffer(ctx context.Context, request GetCredentialOfferRequestObject) (GetCredentialOfferResponseObject, error)
	// Get All Display Methods
	// (GET /v2/identities/{identifier}/display-method)
	GetAllDisplayMethods(ctx context.Context, request GetAllDisplayMethodsRequestObject) (GetAllDisplayMethodsResponseObject, error)
	// Create Display Method
	// (POST /v2/identities/{identifier}/display-method)
	CreateDisplayMethod(ctx context.Context, request CreateDisplayMethodRequestObject) (CreateDisplayMethodResponseObject, error)
	// Delete Display Method
	// (DELETE /v2/identities/{identifier}/display-method/{id})
	DeleteDisplayMethod(ctx context.Context, request DeleteDisplayMethodRequestObject) (DeleteDisplayMethodResponseObject, error)
	// Get Display Method
	// (GET /v2/identities/{identifier}/display-method/{id})
	GetDisplayMethod(ctx context.Context, request GetDisplayMethodRequestObject) (GetDisplayMethodResponseObject, error)
	// Update Display Method
	// (PATCH /v2/identities/{identifier}/display-method/{id})
	UpdateDisplayMethod(ctx context.Context, request UpdateDisplayMethodRequestObject) (UpdateDisplayMethodResponseObject, error)
	// Get Keys
	// (GET /v2/identities/{identifier}/keys)
	GetKeys(ctx context.Context, request GetKeysRequestObject) (GetKeysResponseObject, error)
	// Create a Key
	// (POST /v2/identities/{identifier}/keys)
	CreateKey(ctx context.Context, request CreateKeyRequestObject) (CreateKeyResponseObject, error)
	// Delete Key
	// (DELETE /v2/identities/{identifier}/keys/{id})
	DeleteKey(ctx context.Context, request DeleteKeyRequestObject) (DeleteKeyResponseObject, error)
	// Get a Key
	// (GET /v2/identities/{identifier}/keys/{id})
	GetKey(ctx context.Context, request GetKeyRequestObject) (GetKeyResponseObject, error)
	// Update a Key
	// (PATCH /v2/identities/{identifier}/keys/{id})
	UpdateKey(ctx context.Context, request UpdateKeyRequestObject) (UpdateKeyResponseObject, error)
	// Get Payment Requests
	// (GET /v2/identities/{identifier}/payment-request)
	GetPaymentRequests(ctx context.Context, request GetPaymentRequestsRequestObject) (GetPaymentRequestsResponseObject, error)
	// Create Payment Request
	// (POST /v2/identities/{identifier}/payment-request)
	CreatePaymentRequest(ctx context.Context, request CreatePaymentRequestRequestObject) (CreatePaymentRequestResponseObject, error)
	// Delete Payment Request
	// (DELETE /v2/identities/{identifier}/payment-request/{id})
	DeletePaymentRequest(ctx context.Context, request DeletePaymentRequestRequestObject) (DeletePaymentRequestResponseObject, error)
	// Get Payment Request
	// (GET /v2/identities/{identifier}/payment-request/{id})
	GetPaymentRequest(ctx context.Context, request GetPaymentRequestRequestObject) (GetPaymentRequestResponseObject, error)
	// Get Payment Options
	// (GET /v2/identities/{identifier}/payment/options)
	GetPaymentOptions(ctx context.Context, request GetPaymentOptionsRequestObject) (GetPaymentOptionsResponseObject, error)
	// Create Payment Option
	// (POST /v2/identities/{identifier}/payment/options)
	CreatePaymentOption(ctx context.Context, request CreatePaymentOptionRequestObject) (CreatePaymentOptionResponseObject, error)
	// Delete Payment Option
	// (DELETE /v2/identities/{identifier}/payment/options/{id})
	DeletePaymentOption(ctx context.Context, request DeletePaymentOptionRequestObject) (DeletePaymentOptionResponseObject, error)
	// Get Payment Option
	// (GET /v2/identities/{identifier}/payment/options/{id})
	GetPaymentOption(ctx context.Context, request GetPaymentOptionRequestObject) (GetPaymentOptionResponseObject, error)
	// Update Payment Option
	// (PATCH /v2/identities/{identifier}/payment/options/{id})
	UpdatePaymentOption(ctx context.Context, request UpdatePaymentOptionRequestObject) (UpdatePaymentOptionResponseObject, error)
	// Verify Payment
	// (POST /v2/identities/{identifier}/payment/verify/{nonce})
	VerifyPayment(ctx context.Context, request VerifyPaymentRequestObject) (VerifyPaymentResponseObject, error)
	// Get Schemas
	// (GET /v2/identities/{identifier}/schemas)
	GetSchemas(ctx context.Context, request GetSchemasRequestObject) (GetSchemasResponseObject, error)
	// Import JSON schema
	// (POST /v2/identities/{identifier}/schemas)
	ImportSchema(ctx context.Context, request ImportSchemaRequestObject) (ImportSchemaResponseObject, error)
	// Get Schema
	// (GET /v2/identities/{identifier}/schemas/{id})
	GetSchema(ctx context.Context, request GetSchemaRequestObject) (GetSchemaResponseObject, error)
	// Update Schema
	// (PATCH /v2/identities/{identifier}/schemas/{id})
	UpdateSchema(ctx context.Context, request UpdateSchemaRequestObject) (UpdateSchemaResponseObject, error)
	// Publish Identity State
	// (POST /v2/identities/{identifier}/state/publish)
	PublishIdentityState(ctx context.Context, request PublishIdentityStateRequestObject) (PublishIdentityStateResponseObject, error)
	// Retry Publish Identity State
	// (POST /v2/identities/{identifier}/state/retry)
	RetryPublishState(ctx context.Context, request RetryPublishStateRequestObject) (RetryPublishStateResponseObject, error)
	// Get Identity State Status
	// (GET /v2/identities/{identifier}/state/status)
	GetStateStatus(ctx context.Context, request GetStateStatusRequestObject) (GetStateStatusResponseObject, error)
	// Get Identity State Transactions
	// (GET /v2/identities/{identifier}/state/transactions)
	GetStateTransactions(ctx context.Context, request GetStateTransactionsRequestObject) (GetStateTransactionsResponseObject, error)
	// Payments Configuration
	// (GET /v2/payment/settings)
	GetPaymentSettings(ctx context.Context, request GetPaymentSettingsRequestObject) (GetPaymentSettingsResponseObject, error)
	// Get QrCode from store
	// (GET /v2/qr-store)
	GetQrFromStore(ctx context.Context, request GetQrFromStoreRequestObject) (GetQrFromStoreResponseObject, error)
	// Get Supported Networks
	// (GET /v2/supported-networks)
	GetSupportedNetworks(ctx context.Context, request GetSupportedNetworksRequestObject) (GetSupportedNetworksResponseObject, error)
	// Get Authentication Message
	// (POST /v2/{identifier}/authentication)
	Authentication(ctx context.Context, request AuthenticationRequestObject) (AuthenticationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AgentV1 operation middleware
func (sh *strictHandler) AgentV1(w http.ResponseWriter, r *http.Request) {
	var request AgentV1RequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AgentV1TextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AgentV1(ctx, request.(AgentV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AgentV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AgentV1ResponseObject); ok {
		if err := validResponse.VisitAgentV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRevocationStatus operation middleware
func (sh *strictHandler) GetRevocationStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	var request GetRevocationStatusRequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRevocationStatus(ctx, request.(GetRevocationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRevocationStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRevocationStatusResponseObject); ok {
		if err := validResponse.VisitGetRevocationStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Agent operation middleware
func (sh *strictHandler) Agent(w http.ResponseWriter, r *http.Request) {
	var request AgentRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AgentTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Agent(ctx, request.(AgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Agent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AgentResponseObject); ok {
		if err := validResponse.VisitAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthCallback operation middleware
func (sh *strictHandler) AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams) {
	var request AuthCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AuthCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthCallback(ctx, request.(AuthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthCallbackResponseObject); ok {
		if err := validResponse.VisitAuthCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthenticationConnection operation middleware
func (sh *strictHandler) GetAuthenticationConnection(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetAuthenticationConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthenticationConnection(ctx, request.(GetAuthenticationConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthenticationConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthenticationConnectionResponseObject); ok {
		if err := validResponse.VisitGetAuthenticationConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIdentities operation middleware
func (sh *strictHandler) GetIdentities(w http.ResponseWriter, r *http.Request) {
	var request GetIdentitiesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentities(ctx, request.(GetIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIdentitiesResponseObject); ok {
		if err := validResponse.VisitGetIdentitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateIdentity operation middleware
func (sh *strictHandler) CreateIdentity(w http.ResponseWriter, r *http.Request) {
	var request CreateIdentityRequestObject

	var body CreateIdentityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIdentity(ctx, request.(CreateIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIdentity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateIdentityResponseObject); ok {
		if err := validResponse.VisitCreateIdentityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetIdentityDetails operation middleware
func (sh *strictHandler) GetIdentityDetails(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request GetIdentityDetailsRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentityDetails(ctx, request.(GetIdentityDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentityDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIdentityDetailsResponseObject); ok {
		if err := validResponse.VisitGetIdentityDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateIdentity operation middleware
func (sh *strictHandler) UpdateIdentity(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request UpdateIdentityRequestObject

	request.Identifier = identifier

	var body UpdateIdentityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIdentity(ctx, request.(UpdateIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIdentity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateIdentityResponseObject); ok {
		if err := validResponse.VisitUpdateIdentityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConnections operation middleware
func (sh *strictHandler) GetConnections(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetConnectionsParams) {
	var request GetConnectionsRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnections(ctx, request.(GetConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionsResponseObject); ok {
		if err := validResponse.VisitGetConnectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateConnection operation middleware
func (sh *strictHandler) CreateConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreateConnectionRequestObject

	request.Identifier = identifier

	var body CreateConnectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateConnection(ctx, request.(CreateConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateConnectionResponseObject); ok {
		if err := validResponse.VisitCreateConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id, params DeleteConnectionParams) {
	var request DeleteConnectionRequestObject

	request.Identifier = identifier
	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetConnection operation middleware
func (sh *strictHandler) GetConnection(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetConnectionRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnection(ctx, request.(GetConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionResponseObject); ok {
		if err := validResponse.VisitGetConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteConnectionCredentials operation middleware
func (sh *strictHandler) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request DeleteConnectionCredentialsRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnectionCredentials(ctx, request.(DeleteConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RevokeConnectionCredentials operation middleware
func (sh *strictHandler) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request RevokeConnectionCredentialsRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeConnectionCredentials(ctx, request.(RevokeConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitRevokeConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthCredential operation middleware
func (sh *strictHandler) CreateAuthCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2) {
	var request CreateAuthCredentialRequestObject

	request.Identifier = identifier

	var body CreateAuthCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthCredential(ctx, request.(CreateAuthCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAuthCredentialResponseObject); ok {
		if err := validResponse.VisitCreateAuthCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCredentials operation middleware
func (sh *strictHandler) GetCredentials(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetCredentialsParams) {
	var request GetCredentialsRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentials(ctx, request.(GetCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialsResponseObject); ok {
		if err := validResponse.VisitGetCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCredential operation middleware
func (sh *strictHandler) CreateCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreateCredentialRequestObject

	request.Identifier = identifier

	var body CreateCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCredential(ctx, request.(CreateCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCredentialResponseObject); ok {
		if err := validResponse.VisitCreateCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLinks operation middleware
func (sh *strictHandler) GetLinks(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetLinksParams) {
	var request GetLinksRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLinks(ctx, request.(GetLinksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLinks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinksResponseObject); ok {
		if err := validResponse.VisitGetLinksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateLink operation middleware
func (sh *strictHandler) CreateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreateLinkRequestObject

	request.Identifier = identifier

	var body CreateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLink(ctx, request.(CreateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkResponseObject); ok {
		if err := validResponse.VisitCreateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateLinkQrCodeCallback operation middleware
func (sh *strictHandler) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params CreateLinkQrCodeCallbackParams) {
	var request CreateLinkQrCodeCallbackRequestObject

	request.Identifier = identifier
	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := CreateLinkQrCodeCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLinkQrCodeCallback(ctx, request.(CreateLinkQrCodeCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLinkQrCodeCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkQrCodeCallbackResponseObject); ok {
		if err := validResponse.VisitCreateLinkQrCodeCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLink operation middleware
func (sh *strictHandler) DeleteLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request DeleteLinkRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLink(ctx, request.(DeleteLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLinkResponseObject); ok {
		if err := validResponse.VisitDeleteLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLink operation middleware
func (sh *strictHandler) GetLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetLinkRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLink(ctx, request.(GetLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinkResponseObject); ok {
		if err := validResponse.VisitGetLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ActivateLink operation middleware
func (sh *strictHandler) ActivateLink(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request ActivateLinkRequestObject

	request.Identifier = identifier
	request.Id = id

	var body ActivateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ActivateLink(ctx, request.(ActivateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ActivateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ActivateLinkResponseObject); ok {
		if err := validResponse.VisitActivateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateLinkOffer operation middleware
func (sh *strictHandler) CreateLinkOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request CreateLinkOfferRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLinkOffer(ctx, request.(CreateLinkOfferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLinkOffer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkOfferResponseObject); ok {
		if err := validResponse.VisitCreateLinkOfferResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRevocationStatusV2 operation middleware
func (sh *strictHandler) GetRevocationStatusV2(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	var request GetRevocationStatusV2RequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRevocationStatusV2(ctx, request.(GetRevocationStatusV2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRevocationStatusV2")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRevocationStatusV2ResponseObject); ok {
		if err := validResponse.VisitGetRevocationStatusV2Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RevokeCredential operation middleware
func (sh *strictHandler) RevokeCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	var request RevokeCredentialRequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeCredential(ctx, request.(RevokeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeCredentialResponseObject); ok {
		if err := validResponse.VisitRevokeCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCredential operation middleware
func (sh *strictHandler) DeleteCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim) {
	var request DeleteCredentialRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCredential(ctx, request.(DeleteCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCredentialResponseObject); ok {
		if err := validResponse.VisitDeleteCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim) {
	var request GetCredentialRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx, request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		if err := validResponse.VisitGetCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCredentialOffer operation middleware
func (sh *strictHandler) GetCredentialOffer(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim, params GetCredentialOfferParams) {
	var request GetCredentialOfferRequestObject

	request.Identifier = identifier
	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentialOffer(ctx, request.(GetCredentialOfferRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentialOffer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialOfferResponseObject); ok {
		if err := validResponse.VisitGetCredentialOfferResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDisplayMethods operation middleware
func (sh *strictHandler) GetAllDisplayMethods(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetAllDisplayMethodsParams) {
	var request GetAllDisplayMethodsRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDisplayMethods(ctx, request.(GetAllDisplayMethodsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDisplayMethods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDisplayMethodsResponseObject); ok {
		if err := validResponse.VisitGetAllDisplayMethodsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDisplayMethod operation middleware
func (sh *strictHandler) CreateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreateDisplayMethodRequestObject

	request.Identifier = identifier

	var body CreateDisplayMethodJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDisplayMethod(ctx, request.(CreateDisplayMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDisplayMethod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDisplayMethodResponseObject); ok {
		if err := validResponse.VisitCreateDisplayMethodResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDisplayMethod operation middleware
func (sh *strictHandler) DeleteDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request DeleteDisplayMethodRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDisplayMethod(ctx, request.(DeleteDisplayMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDisplayMethod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDisplayMethodResponseObject); ok {
		if err := validResponse.VisitDeleteDisplayMethodResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDisplayMethod operation middleware
func (sh *strictHandler) GetDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetDisplayMethodRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDisplayMethod(ctx, request.(GetDisplayMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDisplayMethod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDisplayMethodResponseObject); ok {
		if err := validResponse.VisitGetDisplayMethodResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDisplayMethod operation middleware
func (sh *strictHandler) UpdateDisplayMethod(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request UpdateDisplayMethodRequestObject

	request.Identifier = identifier
	request.Id = id

	var body UpdateDisplayMethodJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDisplayMethod(ctx, request.(UpdateDisplayMethodRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDisplayMethod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDisplayMethodResponseObject); ok {
		if err := validResponse.VisitUpdateDisplayMethodResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKeys operation middleware
func (sh *strictHandler) GetKeys(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, params GetKeysParams) {
	var request GetKeysRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKeys(ctx, request.(GetKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKeys")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeysResponseObject); ok {
		if err := validResponse.VisitGetKeysResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateKey operation middleware
func (sh *strictHandler) CreateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2) {
	var request CreateKeyRequestObject

	request.Identifier = identifier

	var body CreateKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateKey(ctx, request.(CreateKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateKeyResponseObject); ok {
		if err := validResponse.VisitCreateKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteKey operation middleware
func (sh *strictHandler) DeleteKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	var request DeleteKeyRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteKey(ctx, request.(DeleteKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteKeyResponseObject); ok {
		if err := validResponse.VisitDeleteKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetKey operation middleware
func (sh *strictHandler) GetKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	var request GetKeyRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetKey(ctx, request.(GetKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetKeyResponseObject); ok {
		if err := validResponse.VisitGetKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateKey operation middleware
func (sh *strictHandler) UpdateKey(w http.ResponseWriter, r *http.Request, identifier PathIdentifier2, id PathKeyID) {
	var request UpdateKeyRequestObject

	request.Identifier = identifier
	request.Id = id

	var body UpdateKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateKey(ctx, request.(UpdateKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateKeyResponseObject); ok {
		if err := validResponse.VisitUpdateKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaymentRequests operation middleware
func (sh *strictHandler) GetPaymentRequests(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request GetPaymentRequestsRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaymentRequests(ctx, request.(GetPaymentRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPaymentRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPaymentRequestsResponseObject); ok {
		if err := validResponse.VisitGetPaymentRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePaymentRequest operation middleware
func (sh *strictHandler) CreatePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreatePaymentRequestRequestObject

	request.Identifier = identifier

	var body CreatePaymentRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePaymentRequest(ctx, request.(CreatePaymentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePaymentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePaymentRequestResponseObject); ok {
		if err := validResponse.VisitCreatePaymentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePaymentRequest operation middleware
func (sh *strictHandler) DeletePaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request DeletePaymentRequestRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePaymentRequest(ctx, request.(DeletePaymentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePaymentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePaymentRequestResponseObject); ok {
		if err := validResponse.VisitDeletePaymentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaymentRequest operation middleware
func (sh *strictHandler) GetPaymentRequest(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetPaymentRequestRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaymentRequest(ctx, request.(GetPaymentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPaymentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPaymentRequestResponseObject); ok {
		if err := validResponse.VisitGetPaymentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaymentOptions operation middleware
func (sh *strictHandler) GetPaymentOptions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request GetPaymentOptionsRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaymentOptions(ctx, request.(GetPaymentOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPaymentOptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPaymentOptionsResponseObject); ok {
		if err := validResponse.VisitGetPaymentOptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePaymentOption operation middleware
func (sh *strictHandler) CreatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreatePaymentOptionRequestObject

	request.Identifier = identifier

	var body CreatePaymentOptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePaymentOption(ctx, request.(CreatePaymentOptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePaymentOption")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePaymentOptionResponseObject); ok {
		if err := validResponse.VisitCreatePaymentOptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePaymentOption operation middleware
func (sh *strictHandler) DeletePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request DeletePaymentOptionRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePaymentOption(ctx, request.(DeletePaymentOptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePaymentOption")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePaymentOptionResponseObject); ok {
		if err := validResponse.VisitDeletePaymentOptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaymentOption operation middleware
func (sh *strictHandler) GetPaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetPaymentOptionRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaymentOption(ctx, request.(GetPaymentOptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPaymentOption")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPaymentOptionResponseObject); ok {
		if err := validResponse.VisitGetPaymentOptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePaymentOption operation middleware
func (sh *strictHandler) UpdatePaymentOption(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request UpdatePaymentOptionRequestObject

	request.Identifier = identifier
	request.Id = id

	var body UpdatePaymentOptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePaymentOption(ctx, request.(UpdatePaymentOptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePaymentOption")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePaymentOptionResponseObject); ok {
		if err := validResponse.VisitUpdatePaymentOptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyPayment operation middleware
func (sh *strictHandler) VerifyPayment(w http.ResponseWriter, r *http.Request, identifier string, nonce string) {
	var request VerifyPaymentRequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	var body VerifyPaymentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyPayment(ctx, request.(VerifyPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyPayment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(VerifyPaymentResponseObject); ok {
		if err := validResponse.VisitVerifyPaymentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSchemas operation middleware
func (sh *strictHandler) GetSchemas(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetSchemasParams) {
	var request GetSchemasRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchemas(ctx, request.(GetSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemasResponseObject); ok {
		if err := validResponse.VisitGetSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportSchema operation middleware
func (sh *strictHandler) ImportSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request ImportSchemaRequestObject

	request.Identifier = identifier

	var body ImportSchemaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportSchema(ctx, request.(ImportSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportSchemaResponseObject); ok {
		if err := validResponse.VisitImportSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSchema operation middleware
func (sh *strictHandler) GetSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request GetSchemaRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchema(ctx, request.(GetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemaResponseObject); ok {
		if err := validResponse.VisitGetSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSchema operation middleware
func (sh *strictHandler) UpdateSchema(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id Id) {
	var request UpdateSchemaRequestObject

	request.Identifier = identifier
	request.Id = id

	var body UpdateSchemaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSchema(ctx, request.(UpdateSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSchemaResponseObject); ok {
		if err := validResponse.VisitUpdateSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishIdentityState operation middleware
func (sh *strictHandler) PublishIdentityState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request PublishIdentityStateRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishIdentityState(ctx, request.(PublishIdentityStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishIdentityState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishIdentityStateResponseObject); ok {
		if err := validResponse.VisitPublishIdentityStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryPublishState operation middleware
func (sh *strictHandler) RetryPublishState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request RetryPublishStateRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryPublishState(ctx, request.(RetryPublishStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryPublishState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryPublishStateResponseObject); ok {
		if err := validResponse.VisitRetryPublishStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStateStatus operation middleware
func (sh *strictHandler) GetStateStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request GetStateStatusRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStateStatus(ctx, request.(GetStateStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStateStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStateStatusResponseObject); ok {
		if err := validResponse.VisitGetStateStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStateTransactions operation middleware
func (sh *strictHandler) GetStateTransactions(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetStateTransactionsParams) {
	var request GetStateTransactionsRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStateTransactions(ctx, request.(GetStateTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStateTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStateTransactionsResponseObject); ok {
		if err := validResponse.VisitGetStateTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPaymentSettings operation middleware
func (sh *strictHandler) GetPaymentSettings(w http.ResponseWriter, r *http.Request) {
	var request GetPaymentSettingsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPaymentSettings(ctx, request.(GetPaymentSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPaymentSettings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPaymentSettingsResponseObject); ok {
		if err := validResponse.VisitGetPaymentSettingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQrFromStore operation middleware
func (sh *strictHandler) GetQrFromStore(w http.ResponseWriter, r *http.Request, params GetQrFromStoreParams) {
	var request GetQrFromStoreRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetQrFromStore(ctx, request.(GetQrFromStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQrFromStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetQrFromStoreResponseObject); ok {
		if err := validResponse.VisitGetQrFromStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSupportedNetworks operation middleware
func (sh *strictHandler) GetSupportedNetworks(w http.ResponseWriter, r *http.Request) {
	var request GetSupportedNetworksRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSupportedNetworks(ctx, request.(GetSupportedNetworksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSupportedNetworks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSupportedNetworksResponseObject); ok {
		if err := validResponse.VisitGetSupportedNetworksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Authentication operation middleware
func (sh *strictHandler) Authentication(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params AuthenticationParams) {
	var request AuthenticationRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Authentication(ctx, request.(AuthenticationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Authentication")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthenticationResponseObject); ok {
		if err := validResponse.VisitAuthenticationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
