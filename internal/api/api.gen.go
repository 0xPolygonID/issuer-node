// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// AgentResponse defines model for AgentResponse.
type AgentResponse struct {
	Body     interface{} `json:"body"`
	From     string      `json:"from"`
	Id       string      `json:"id"`
	ThreadID string      `json:"threadID"`
	To       string      `json:"to"`
	Typ      string      `json:"typ"`
	Type     string      `json:"type"`
}

// ByteArray defines model for ByteArray.
type ByteArray = []byte

// CreateClaimRequest defines model for CreateClaimRequest.
type CreateClaimRequest struct {
	CredentialSchema      string                 `json:"credentialSchema"`
	CredentialSubject     map[string]interface{} `json:"credentialSubject"`
	Expiration            *int64                 `json:"expiration,omitempty"`
	MerklizedRootPosition *string                `json:"merklizedRootPosition,omitempty"`
	RevNonce              *uint64                `json:"revNonce,omitempty"`
	SubjectPosition       *string                `json:"subjectPosition,omitempty"`
	Type                  string                 `json:"type"`
	Version               *uint32                `json:"version,omitempty"`
}

// CreateClaimResponse defines model for CreateClaimResponse.
type CreateClaimResponse struct {
	Id string `json:"id"`
}

// CreateIdentityRequest defines model for CreateIdentityRequest.
type CreateIdentityRequest struct {
	DidMetadata struct {
		Blockchain string `json:"blockchain"`
		Method     string `json:"method"`
		Network    string `json:"network"`
	} `json:"didMetadata"`
}

// CreateIdentityResponse defines model for CreateIdentityResponse.
type CreateIdentityResponse struct {
	Identifier *string        `json:"identifier,omitempty"`
	State      *IdentityState `json:"state,omitempty"`
}

// CredentialSchema defines model for CredentialSchema.
type CredentialSchema struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// GetClaimResponse defines model for GetClaimResponse.
type GetClaimResponse struct {
	Context           []string               `json:"@context"`
	CredentialSchema  CredentialSchema       `json:"credentialSchema"`
	CredentialStatus  interface{}            `json:"credentialStatus"`
	CredentialSubject map[string]interface{} `json:"credentialSubject"`
	Expiration        *time.Time             `json:"expiration,omitempty"`
	Id                string                 `json:"id"`
	IssuanceDate      *time.Time             `json:"issuanceDate,omitempty"`
	Issuer            string                 `json:"issuer"`
	Proof             interface{}            `json:"proof"`
	Type              []string               `json:"type"`
}

// GetClaimsResponse defines model for GetClaimsResponse.
type GetClaimsResponse = []GetClaimResponse

// Health defines model for Health.
type Health map[string]bool

// IdentityState defines model for IdentityState.
type IdentityState struct {
	BlockNumber        *int      `json:"blockNumber,omitempty"`
	BlockTimestamp     *int      `json:"blockTimestamp,omitempty"`
	ClaimsTreeRoot     *string   `json:"claimsTreeRoot,omitempty"`
	CreatedAt          time.Time `json:"createdAt"`
	Identifier         string    `json:"-"`
	ModifiedAt         time.Time `json:"modifiedAt"`
	PreviousState      *string   `json:"previousState,omitempty"`
	RevocationTreeRoot *string   `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string   `json:"rootOfRoots,omitempty"`
	State              *string   `json:"state,omitempty"`
	StateID            int64     `json:"-"`
	Status             string    `json:"status"`
	TxID               *string   `json:"txID,omitempty"`
}

// PublishIdentityStateResponse defines model for PublishIdentityStateResponse.
type PublishIdentityStateResponse struct {
	ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
	RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string `json:"rootOfRoots,omitempty"`
	State              *string `json:"state,omitempty"`
	TxID               *string `json:"txID,omitempty"`
}

// RevocationStatusResponse defines model for RevocationStatusResponse.
type RevocationStatusResponse struct {
	Issuer struct {
		ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
		RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
		RootOfRoots        *string `json:"rootOfRoots,omitempty"`
		State              *string `json:"state,omitempty"`
	} `json:"issuer"`
	Mtp struct {
		Existence bool `json:"existence"`
		NodeAux   *struct {
			Key   *ByteArray `json:"key,omitempty"`
			Value *ByteArray `json:"value,omitempty"`
		} `json:"node_aux,omitempty"`
		Siblings *[]ByteArray `json:"siblings"`
	} `json:"mtp"`
}

// RevokeClaimResponse defines model for RevokeClaimResponse.
type RevokeClaimResponse struct {
	Message string `json:"message"`
}

// PathClaim defines model for pathClaim.
type PathClaim = string

// PathIdentifier defines model for pathIdentifier.
type PathIdentifier = string

// PathNonce defines model for pathNonce.
type PathNonce = int64

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N401 defines model for 401.
type N401 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N422 defines model for 422.
type N422 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// N500CreateIdentity defines model for 500-CreateIdentity.
type N500CreateIdentity struct {
	Code      *int    `json:"code,omitempty"`
	Error     *string `json:"error,omitempty"`
	RequestID *string `json:"requestID,omitempty"`
}

// AgentTextBody defines parameters for Agent.
type AgentTextBody = string

// GetClaimsParams defines parameters for GetClaims.
type GetClaimsParams struct {
	// SchemaType Filter per schema type. Example - KYCAgeCredential
	SchemaType *string `form:"schemaType,omitempty" json:"schemaType,omitempty"`

	// SchemaHash Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838
	SchemaHash *string `form:"schemaHash,omitempty" json:"schemaHash,omitempty"`

	// Subject Filter per subject. Example - did:polygonid:polygon:mumbai:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// Revoked Filter per claims revoked or not - Example - true.
	Revoked *bool `form:"revoked,omitempty" json:"revoked,omitempty"`

	// Self Filter per retrieve claims of the provided identifier. Example - true
	Self *bool `form:"self,omitempty" json:"self,omitempty"`

	// QueryField Filter inside the data of the claim.
	QueryField *string `form:"query_field,omitempty" json:"query_field,omitempty"`
}

// AgentTextRequestBody defines body for Agent for text/plain ContentType.
type AgentTextRequestBody = AgentTextBody

// CreateIdentityJSONRequestBody defines body for CreateIdentity for application/json ContentType.
type CreateIdentityJSONRequestBody = CreateIdentityRequest

// CreateClaimJSONRequestBody defines body for CreateClaim for application/json ContentType.
type CreateClaimJSONRequestBody = CreateClaimRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(w http.ResponseWriter, r *http.Request)
	// Get the documentation yaml file
	// (GET /static/docs/api/api.yaml)
	GetYaml(w http.ResponseWriter, r *http.Request)
	// Healthcheck
	// (GET /status)
	Health(w http.ResponseWriter, r *http.Request)
	// Agent
	// (POST /v1/agent)
	Agent(w http.ResponseWriter, r *http.Request)
	// Get Identities
	// (GET /v1/identities)
	GetIdentities(w http.ResponseWriter, r *http.Request)
	// Create Identity
	// (POST /v1/identities)
	CreateIdentity(w http.ResponseWriter, r *http.Request)
	// Get Claims
	// (GET /v1/{identifier}/claims)
	GetClaims(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetClaimsParams)
	// Create Claim
	// (POST /v1/{identifier}/claims)
	CreateClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
	// Get Revocation Status
	// (GET /v1/{identifier}/claims/revocation/status/{nonce})
	GetRevocationStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce)
	// Revoke Claim
	// (POST /v1/{identifier}/claims/revoke/{nonce})
	RevokeClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce)
	// Get Claim
	// (GET /v1/{identifier}/claims/{id})
	GetClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim)
	// Publish Identity State
	// (POST /v1/{identifier}/state/publish)
	PublishIdentityState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetYaml operation middleware
func (siw *ServerInterfaceWrapper) GetYaml(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetYaml(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Agent operation middleware
func (siw *ServerInterfaceWrapper) Agent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Agent(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIdentities operation middleware
func (siw *ServerInterfaceWrapper) GetIdentities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIdentities(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateIdentity operation middleware
func (siw *ServerInterfaceWrapper) CreateIdentity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateIdentity(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClaims operation middleware
func (siw *ServerInterfaceWrapper) GetClaims(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClaimsParams

	// ------------- Optional query parameter "schemaType" -------------

	err = runtime.BindQueryParameter("form", true, false, "schemaType", r.URL.Query(), &params.SchemaType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schemaType", Err: err})
		return
	}

	// ------------- Optional query parameter "schemaHash" -------------

	err = runtime.BindQueryParameter("form", true, false, "schemaHash", r.URL.Query(), &params.SchemaHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schemaHash", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "revoked" -------------

	err = runtime.BindQueryParameter("form", true, false, "revoked", r.URL.Query(), &params.Revoked)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "revoked", Err: err})
		return
	}

	// ------------- Optional query parameter "self" -------------

	err = runtime.BindQueryParameter("form", true, false, "self", r.URL.Query(), &params.Self)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "self", Err: err})
		return
	}

	// ------------- Optional query parameter "query_field" -------------

	err = runtime.BindQueryParameter("form", true, false, "query_field", r.URL.Query(), &params.QueryField)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query_field", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClaims(w, r, identifier, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateClaim operation middleware
func (siw *ServerInterfaceWrapper) CreateClaim(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateClaim(w, r, identifier)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRevocationStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRevocationStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, chi.URLParam(r, "nonce"), &nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRevocationStatus(w, r, identifier, nonce)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RevokeClaim operation middleware
func (siw *ServerInterfaceWrapper) RevokeClaim(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, chi.URLParam(r, "nonce"), &nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeClaim(w, r, identifier, nonce)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClaim operation middleware
func (siw *ServerInterfaceWrapper) GetClaim(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id PathClaim

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClaim(w, r, identifier, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishIdentityState operation middleware
func (siw *ServerInterfaceWrapper) PublishIdentityState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier PathIdentifier

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier", runtime.ParamLocationPath, chi.URLParam(r, "identifier"), &identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishIdentityState(w, r, identifier)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetDocumentation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/static/docs/api/api.yaml", wrapper.GetYaml)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/agent", wrapper.Agent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/identities", wrapper.GetIdentities)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/identities", wrapper.CreateIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/{identifier}/claims", wrapper.GetClaims)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/{identifier}/claims", wrapper.CreateClaim)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/{identifier}/claims/revocation/status/{nonce}", wrapper.GetRevocationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/{identifier}/claims/revoke/{nonce}", wrapper.RevokeClaim)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/{identifier}/claims/{id}", wrapper.GetClaim)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/{identifier}/state/publish", wrapper.PublishIdentityState)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N401JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N422JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type N500CreateIdentityJSONResponse struct {
	Code      *int    `json:"code,omitempty"`
	Error     *string `json:"error,omitempty"`
	RequestID *string `json:"requestID,omitempty"`
}

type GetDocumentationRequestObject struct {
}

type GetDocumentationResponseObject interface {
	VisitGetDocumentationResponse(w http.ResponseWriter) error
}

type GetDocumentation200Response struct {
}

func (response GetDocumentation200Response) VisitGetDocumentationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetYamlRequestObject struct {
}

type GetYamlResponseObject interface {
	VisitGetYamlResponse(w http.ResponseWriter) error
}

type GetYaml200Response struct {
}

func (response GetYaml200Response) VisitGetYamlResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AgentRequestObject struct {
	Body *AgentTextRequestBody
}

type AgentResponseObject interface {
	VisitAgentResponse(w http.ResponseWriter) error
}

type Agent200JSONResponse AgentResponse

func (response Agent200JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Agent400JSONResponse struct{ N400JSONResponse }

func (response Agent400JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Agent500JSONResponse struct{ N500JSONResponse }

func (response Agent500JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentitiesRequestObject struct {
}

type GetIdentitiesResponseObject interface {
	VisitGetIdentitiesResponse(w http.ResponseWriter) error
}

type GetIdentities200JSONResponse []string

func (response GetIdentities200JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentities401JSONResponse struct{ N401JSONResponse }

func (response GetIdentities401JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentities500JSONResponse struct{ N500JSONResponse }

func (response GetIdentities500JSONResponse) VisitGetIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentityRequestObject struct {
	Body *CreateIdentityJSONRequestBody
}

type CreateIdentityResponseObject interface {
	VisitCreateIdentityResponse(w http.ResponseWriter) error
}

type CreateIdentity201JSONResponse CreateIdentityResponse

func (response CreateIdentity201JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity400JSONResponse struct{ N400JSONResponse }

func (response CreateIdentity400JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity401JSONResponse struct{ N401JSONResponse }

func (response CreateIdentity401JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity500JSONResponse struct{ N500CreateIdentityJSONResponse }

func (response CreateIdentity500JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimsRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Params     GetClaimsParams
}

type GetClaimsResponseObject interface {
	VisitGetClaimsResponse(w http.ResponseWriter) error
}

type GetClaims200JSONResponse GetClaimsResponse

func (response GetClaims200JSONResponse) VisitGetClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClaims400JSONResponse struct{ N400JSONResponse }

func (response GetClaims400JSONResponse) VisitGetClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClaims401JSONResponse struct{ N401JSONResponse }

func (response GetClaims401JSONResponse) VisitGetClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetClaims500JSONResponse struct{ N500JSONResponse }

func (response GetClaims500JSONResponse) VisitGetClaimsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateClaimRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Body       *CreateClaimJSONRequestBody
}

type CreateClaimResponseObject interface {
	VisitCreateClaimResponse(w http.ResponseWriter) error
}

type CreateClaim201JSONResponse CreateClaimResponse

func (response CreateClaim201JSONResponse) VisitCreateClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateClaim400JSONResponse struct{ N400JSONResponse }

func (response CreateClaim400JSONResponse) VisitCreateClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateClaim401JSONResponse struct{ N401JSONResponse }

func (response CreateClaim401JSONResponse) VisitCreateClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateClaim422JSONResponse struct{ N422JSONResponse }

func (response CreateClaim422JSONResponse) VisitCreateClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateClaim500JSONResponse struct{ N500JSONResponse }

func (response CreateClaim500JSONResponse) VisitCreateClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Nonce      PathNonce      `json:"nonce"`
}

type GetRevocationStatusResponseObject interface {
	VisitGetRevocationStatusResponse(w http.ResponseWriter) error
}

type GetRevocationStatus200JSONResponse RevocationStatusResponse

func (response GetRevocationStatus200JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus400JSONResponse struct{ N400JSONResponse }

func (response GetRevocationStatus400JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus500JSONResponse struct{ N500JSONResponse }

func (response GetRevocationStatus500JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeClaimRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Nonce      PathNonce      `json:"nonce"`
}

type RevokeClaimResponseObject interface {
	VisitRevokeClaimResponse(w http.ResponseWriter) error
}

type RevokeClaim202JSONResponse RevokeClaimResponse

func (response RevokeClaim202JSONResponse) VisitRevokeClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeClaim401JSONResponse struct{ N401JSONResponse }

func (response RevokeClaim401JSONResponse) VisitRevokeClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RevokeClaim404JSONResponse struct{ N404JSONResponse }

func (response RevokeClaim404JSONResponse) VisitRevokeClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RevokeClaim500JSONResponse struct{ N500JSONResponse }

func (response RevokeClaim500JSONResponse) VisitRevokeClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClaimRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
	Id         PathClaim      `json:"id"`
}

type GetClaimResponseObject interface {
	VisitGetClaimResponse(w http.ResponseWriter) error
}

type GetClaim200JSONResponse GetClaimResponse

func (response GetClaim200JSONResponse) VisitGetClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClaim400JSONResponse struct{ N400JSONResponse }

func (response GetClaim400JSONResponse) VisitGetClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClaim401JSONResponse struct{ N401JSONResponse }

func (response GetClaim401JSONResponse) VisitGetClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetClaim404JSONResponse struct{ N404JSONResponse }

func (response GetClaim404JSONResponse) VisitGetClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetClaim500JSONResponse struct{ N500JSONResponse }

func (response GetClaim500JSONResponse) VisitGetClaimResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityStateRequestObject struct {
	Identifier PathIdentifier `json:"identifier"`
}

type PublishIdentityStateResponseObject interface {
	VisitPublishIdentityStateResponse(w http.ResponseWriter) error
}

type PublishIdentityState200JSONResponse GenericErrorMessage

func (response PublishIdentityState200JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState202JSONResponse PublishIdentityStateResponse

func (response PublishIdentityState202JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState400JSONResponse struct{ N400JSONResponse }

func (response PublishIdentityState400JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState401JSONResponse struct{ N401JSONResponse }

func (response PublishIdentityState401JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PublishIdentityState500JSONResponse struct{ N500JSONResponse }

func (response PublishIdentityState500JSONResponse) VisitPublishIdentityStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(ctx context.Context, request GetDocumentationRequestObject) (GetDocumentationResponseObject, error)
	// Get the documentation yaml file
	// (GET /static/docs/api/api.yaml)
	GetYaml(ctx context.Context, request GetYamlRequestObject) (GetYamlResponseObject, error)
	// Healthcheck
	// (GET /status)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Agent
	// (POST /v1/agent)
	Agent(ctx context.Context, request AgentRequestObject) (AgentResponseObject, error)
	// Get Identities
	// (GET /v1/identities)
	GetIdentities(ctx context.Context, request GetIdentitiesRequestObject) (GetIdentitiesResponseObject, error)
	// Create Identity
	// (POST /v1/identities)
	CreateIdentity(ctx context.Context, request CreateIdentityRequestObject) (CreateIdentityResponseObject, error)
	// Get Claims
	// (GET /v1/{identifier}/claims)
	GetClaims(ctx context.Context, request GetClaimsRequestObject) (GetClaimsResponseObject, error)
	// Create Claim
	// (POST /v1/{identifier}/claims)
	CreateClaim(ctx context.Context, request CreateClaimRequestObject) (CreateClaimResponseObject, error)
	// Get Revocation Status
	// (GET /v1/{identifier}/claims/revocation/status/{nonce})
	GetRevocationStatus(ctx context.Context, request GetRevocationStatusRequestObject) (GetRevocationStatusResponseObject, error)
	// Revoke Claim
	// (POST /v1/{identifier}/claims/revoke/{nonce})
	RevokeClaim(ctx context.Context, request RevokeClaimRequestObject) (RevokeClaimResponseObject, error)
	// Get Claim
	// (GET /v1/{identifier}/claims/{id})
	GetClaim(ctx context.Context, request GetClaimRequestObject) (GetClaimResponseObject, error)
	// Publish Identity State
	// (POST /v1/{identifier}/state/publish)
	PublishIdentityState(ctx context.Context, request PublishIdentityStateRequestObject) (PublishIdentityStateResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDocumentation operation middleware
func (sh *strictHandler) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	var request GetDocumentationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentation(ctx, request.(GetDocumentationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentationResponseObject); ok {
		if err := validResponse.VisitGetDocumentationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetYaml operation middleware
func (sh *strictHandler) GetYaml(w http.ResponseWriter, r *http.Request) {
	var request GetYamlRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetYaml(ctx, request.(GetYamlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetYaml")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetYamlResponseObject); ok {
		if err := validResponse.VisitGetYamlResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Agent operation middleware
func (sh *strictHandler) Agent(w http.ResponseWriter, r *http.Request) {
	var request AgentRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AgentTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Agent(ctx, request.(AgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Agent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AgentResponseObject); ok {
		if err := validResponse.VisitAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetIdentities operation middleware
func (sh *strictHandler) GetIdentities(w http.ResponseWriter, r *http.Request) {
	var request GetIdentitiesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentities(ctx, request.(GetIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetIdentitiesResponseObject); ok {
		if err := validResponse.VisitGetIdentitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateIdentity operation middleware
func (sh *strictHandler) CreateIdentity(w http.ResponseWriter, r *http.Request) {
	var request CreateIdentityRequestObject

	var body CreateIdentityJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIdentity(ctx, request.(CreateIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIdentity")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateIdentityResponseObject); ok {
		if err := validResponse.VisitCreateIdentityResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetClaims operation middleware
func (sh *strictHandler) GetClaims(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, params GetClaimsParams) {
	var request GetClaimsRequestObject

	request.Identifier = identifier
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClaims(ctx, request.(GetClaimsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClaims")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClaimsResponseObject); ok {
		if err := validResponse.VisitGetClaimsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateClaim operation middleware
func (sh *strictHandler) CreateClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request CreateClaimRequestObject

	request.Identifier = identifier

	var body CreateClaimJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateClaim(ctx, request.(CreateClaimRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateClaim")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateClaimResponseObject); ok {
		if err := validResponse.VisitCreateClaimResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRevocationStatus operation middleware
func (sh *strictHandler) GetRevocationStatus(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	var request GetRevocationStatusRequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRevocationStatus(ctx, request.(GetRevocationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRevocationStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRevocationStatusResponseObject); ok {
		if err := validResponse.VisitGetRevocationStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RevokeClaim operation middleware
func (sh *strictHandler) RevokeClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, nonce PathNonce) {
	var request RevokeClaimRequestObject

	request.Identifier = identifier
	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeClaim(ctx, request.(RevokeClaimRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeClaim")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeClaimResponseObject); ok {
		if err := validResponse.VisitRevokeClaimResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetClaim operation middleware
func (sh *strictHandler) GetClaim(w http.ResponseWriter, r *http.Request, identifier PathIdentifier, id PathClaim) {
	var request GetClaimRequestObject

	request.Identifier = identifier
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClaim(ctx, request.(GetClaimRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClaim")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClaimResponseObject); ok {
		if err := validResponse.VisitGetClaimResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PublishIdentityState operation middleware
func (sh *strictHandler) PublishIdentityState(w http.ResponseWriter, r *http.Request, identifier PathIdentifier) {
	var request PublishIdentityStateRequestObject

	request.Identifier = identifier

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishIdentityState(ctx, request.(PublishIdentityStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishIdentityState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishIdentityStateResponseObject); ok {
		if err := validResponse.VisitPublishIdentityStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
