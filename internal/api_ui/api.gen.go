// Package api_ui provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api_ui

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for LinkStatus.
const (
	LinkStatusActive   LinkStatus = "active"
	LinkStatusExceeded LinkStatus = "exceeded"
	LinkStatusInactive LinkStatus = "inactive"
)

// Defines values for StateTransactionStatus.
const (
	Created   StateTransactionStatus = "created"
	Failed    StateTransactionStatus = "failed"
	Pending   StateTransactionStatus = "pending"
	Published StateTransactionStatus = "published"
)

// Defines values for GetCredentialsParamsStatus.
const (
	All     GetCredentialsParamsStatus = "all"
	Expired GetCredentialsParamsStatus = "expired"
	Revoked GetCredentialsParamsStatus = "revoked"
)

// Defines values for GetLinksParamsStatus.
const (
	GetLinksParamsStatusActive   GetLinksParamsStatus = "active"
	GetLinksParamsStatusAll      GetLinksParamsStatus = "all"
	GetLinksParamsStatusExceeded GetLinksParamsStatus = "exceeded"
	GetLinksParamsStatusInactive GetLinksParamsStatus = "inactive"
)

// AgentResponse defines model for AgentResponse.
type AgentResponse struct {
	Body     interface{} `json:"body"`
	From     string      `json:"from"`
	Id       string      `json:"id"`
	ThreadID string      `json:"threadID"`
	To       string      `json:"to"`
	Typ      string      `json:"typ"`
	Type     string      `json:"type"`
}

// AuthenticationQrCodeResponse defines model for AuthenticationQrCodeResponse.
type AuthenticationQrCodeResponse struct {
	Body struct {
		CallbackUrl string        `json:"callbackUrl"`
		Reason      string        `json:"reason"`
		Scope       []interface{} `json:"scope"`
	} `json:"body"`
	From string `json:"from"`
	Id   string `json:"id"`
	Thid string `json:"thid"`
	Typ  string `json:"typ"`
	Type string `json:"type"`
}

// Config defines model for Config.
type Config = []KeyValue

// CreateCredentialRequest defines model for CreateCredentialRequest.
type CreateCredentialRequest struct {
	CredentialSchema  string                 `json:"credentialSchema"`
	CredentialSubject map[string]interface{} `json:"credentialSubject"`
	Expiration        *time.Time             `json:"expiration,omitempty"`
	MtProof           *bool                  `json:"mtProof,omitempty"`
	SignatureProof    *bool                  `json:"signatureProof,omitempty"`
	Type              string                 `json:"type"`
}

// CreateLinkRequest defines model for CreateLinkRequest.
type CreateLinkRequest struct {
	CredentialExpiration *openapi_types.Date `json:"credentialExpiration,omitempty"`
	CredentialSubject    CredentialSubject   `json:"credentialSubject"`
	Expiration           *time.Time          `json:"expiration,omitempty"`
	LimitedClaims        *int                `json:"limitedClaims"`
	MtProof              bool                `json:"mtProof"`
	SchemaID             uuid.UUID           `json:"schemaID"`
	SignatureProof       bool                `json:"signatureProof"`
}

// Credential defines model for Credential.
type Credential struct {
	CreatedAt         time.Time              `json:"createdAt"`
	CredentialSubject map[string]interface{} `json:"credentialSubject"`
	Expired           bool                   `json:"expired"`
	ExpiresAt         *time.Time             `json:"expiresAt"`
	Id                uuid.UUID              `json:"id"`
	ProofTypes        []string               `json:"proofTypes"`
	RevNonce          uint64                 `json:"revNonce"`
	Revoked           bool                   `json:"revoked"`
	SchemaHash        string                 `json:"schemaHash"`
	SchemaType        string                 `json:"schemaType"`
	SchemaUrl         string                 `json:"schemaUrl"`
	UserID            string                 `json:"userID"`
}

// CredentialLinkQrCodeResponse defines model for CredentialLinkQrCodeResponse.
type CredentialLinkQrCodeResponse struct {
	Issuer     IssuerDescription            `json:"issuer"`
	LinkDetail LinkSimple                   `json:"linkDetail"`
	QrCode     AuthenticationQrCodeResponse `json:"qrCode"`
	SessionID  string                       `json:"sessionID"`
}

// CredentialSubject defines model for CredentialSubject.
type CredentialSubject = map[string]interface{}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// GenericMessage defines model for GenericMessage.
type GenericMessage struct {
	Message string `json:"message"`
}

// GetConnectionResponse defines model for GetConnectionResponse.
type GetConnectionResponse struct {
	CreatedAt   time.Time    `json:"createdAt"`
	Credentials []Credential `json:"credentials"`
	Id          string       `json:"id"`
	IssuerID    string       `json:"issuerID"`
	UserID      string       `json:"userID"`
}

// GetConnectionsResponse defines model for GetConnectionsResponse.
type GetConnectionsResponse = []GetConnectionResponse

// GetLinkQrCodeResponse defines model for GetLinkQrCodeResponse.
type GetLinkQrCodeResponse struct {
	LinkDetail LinkSimple      `json:"linkDetail"`
	QrCode     *QrCodeResponse `json:"qrCode,omitempty"`
	Status     *string         `json:"status,omitempty"`
}

// Health defines model for Health.
type Health map[string]bool

// ImportSchemaRequest defines model for ImportSchemaRequest.
type ImportSchemaRequest struct {
	Description *string `json:"description,omitempty"`
	SchemaType  string  `json:"schemaType"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
	Version     string  `json:"version"`
}

// IssuerDescription defines model for IssuerDescription.
type IssuerDescription struct {
	DisplayName string `json:"displayName"`
	Logo        string `json:"logo"`
}

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Link defines model for Link.
type Link struct {
	Active               bool                `json:"active"`
	CreatedAt            time.Time           `json:"createdAt"`
	CredentialExpiration *openapi_types.Date `json:"credentialExpiration"`
	CredentialSubject    CredentialSubject   `json:"credentialSubject"`
	Expiration           *time.Time          `json:"expiration"`
	Id                   uuid.UUID           `json:"id"`
	IssuedClaims         int                 `json:"issuedClaims"`
	MaxIssuance          *int                `json:"maxIssuance"`
	ProofTypes           []string            `json:"proofTypes"`
	SchemaHash           string              `json:"schemaHash"`
	SchemaType           string              `json:"schemaType"`
	SchemaUrl            string              `json:"schemaUrl"`
	Status               LinkStatus          `json:"status"`
}

// LinkStatus defines model for Link.Status.
type LinkStatus string

// LinkSimple defines model for LinkSimple.
type LinkSimple struct {
	Id         uuid.UUID `json:"id"`
	ProofTypes []string  `json:"proofTypes"`
	SchemaHash string    `json:"schemaHash"`
	SchemaType string    `json:"schemaType"`
	SchemaUrl  string    `json:"schemaUrl"`
}

// PublishIdentityStateResponse defines model for PublishIdentityStateResponse.
type PublishIdentityStateResponse struct {
	ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
	RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string `json:"rootOfRoots,omitempty"`
	State              *string `json:"state,omitempty"`
	TxID               *string `json:"txID,omitempty"`
}

// QrCodeBodyResponse defines model for QrCodeBodyResponse.
type QrCodeBodyResponse struct {
	Credentials []QrCodeCredentialResponse `json:"credentials"`
	Url         string                     `json:"url"`
}

// QrCodeCredentialResponse defines model for QrCodeCredentialResponse.
type QrCodeCredentialResponse struct {
	Description string `json:"description"`
	Id          string `json:"id"`
}

// QrCodeResponse defines model for QrCodeResponse.
type QrCodeResponse struct {
	Body QrCodeBodyResponse `json:"body"`
	From string             `json:"from"`
	Id   string             `json:"id"`
	Thid string             `json:"thid"`
	To   string             `json:"to"`
	Typ  string             `json:"typ"`
	Type string             `json:"type"`
}

// RevocationStatusResponse defines model for RevocationStatusResponse.
type RevocationStatusResponse struct {
	Issuer struct {
		ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
		RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
		RootOfRoots        *string `json:"rootOfRoots,omitempty"`
		State              *string `json:"state,omitempty"`
	} `json:"issuer"`
	Mtp struct {
		Existence bool `json:"existence"`
		NodeAux   *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"node_aux,omitempty"`
		Siblings *[]string `json:"siblings"`
	} `json:"mtp"`
}

// RevokeCredentialResponse defines model for RevokeCredentialResponse.
type RevokeCredentialResponse struct {
	Message string `json:"message"`
}

// Schema defines model for Schema.
type Schema struct {
	BigInt      string    `json:"bigInt"`
	CreatedAt   time.Time `json:"createdAt"`
	Description *string   `json:"description"`
	Hash        string    `json:"hash"`
	Id          string    `json:"id"`
	Title       *string   `json:"title"`
	Type        string    `json:"type"`
	Url         string    `json:"url"`
	Version     string    `json:"version"`
}

// StateStatusResponse defines model for StateStatusResponse.
type StateStatusResponse struct {
	PendingActions bool `json:"pendingActions"`
}

// StateTransaction defines model for StateTransaction.
type StateTransaction struct {
	Id          int64                  `json:"id"`
	PublishDate time.Time              `json:"publishDate"`
	State       string                 `json:"state"`
	Status      StateTransactionStatus `json:"status"`
	TxID        string                 `json:"txID"`
}

// StateTransactionStatus defines model for StateTransaction.Status.
type StateTransactionStatus string

// StateTransactionsResponse defines model for StateTransactionsResponse.
type StateTransactionsResponse = []StateTransaction

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Id string `json:"id"`
}

// Id defines model for id.
type Id = uuid.UUID

// LinkID defines model for linkID.
type LinkID = uuid.UUID

// PathNonce defines model for pathNonce.
type PathNonce = int64

// SessionID defines model for sessionID.
type SessionID = uuid.UUID

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N401 defines model for 401.
type N401 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N422 defines model for 422.
type N422 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// AgentTextBody defines parameters for Agent.
type AgentTextBody = string

// AuthCallbackTextBody defines parameters for AuthCallback.
type AuthCallbackTextBody = string

// AuthCallbackParams defines parameters for AuthCallback.
type AuthCallbackParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {
	// Query Query string to do full text search in connections.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Credentials credentials=true to include the connection credentials.
	Credentials *bool `form:"credentials,omitempty" json:"credentials,omitempty"`
}

// DeleteConnectionParams defines parameters for DeleteConnection.
type DeleteConnectionParams struct {
	// RevokeCredentials Set revokeCredentials to true if you want to revoke the credentials of the connection
	RevokeCredentials *bool `form:"revokeCredentials,omitempty" json:"revokeCredentials,omitempty"`

	// DeleteCredentials Set deleteCredentials to true if you want to delete the credentials of the connection
	DeleteCredentials *bool `form:"deleteCredentials,omitempty" json:"deleteCredentials,omitempty"`
}

// GetCredentialsParams defines parameters for GetCredentials.
type GetCredentialsParams struct {
	Did *string `form:"did,omitempty" json:"did,omitempty"`

	// Status Schema type:
	//   * `all` - All Schemas. (default value)
	//   * `revoked` - Only revoked schemas
	//   * `expired` - Only expired schemas
	Status *GetCredentialsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Query Query string to do full text search
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetCredentialsParamsStatus defines parameters for GetCredentials.
type GetCredentialsParamsStatus string

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	// Query Query string to do full text search in schema types and attributes.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Status Schema type:
	//   * `all` - All links. (default value)
	//   * `active` - Only active links. (Not expired, no issuance exceeded and not deactivated
	//   * `inactive` - Only deactivated links
	//   * `exceeded` - Expired or maximum issuance exceeded
	Status *GetLinksParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetLinksParamsStatus defines parameters for GetLinks.
type GetLinksParamsStatus string

// CreateLinkQrCodeCallbackTextBody defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackTextBody = string

// CreateLinkQrCodeCallbackParams defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`

	// LinkID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	LinkID LinkID `form:"linkID" json:"linkID"`
}

// AcivateLinkJSONBody defines parameters for AcivateLink.
type AcivateLinkJSONBody struct {
	Active bool `json:"active"`
}

// GetLinkQRCodeParams defines parameters for GetLinkQRCode.
type GetLinkQRCodeParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// GetSchemasParams defines parameters for GetSchemas.
type GetSchemasParams struct {
	// Query Query string to do full text search in schema types and attributes.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// AgentTextRequestBody defines body for Agent for text/plain ContentType.
type AgentTextRequestBody = AgentTextBody

// AuthCallbackTextRequestBody defines body for AuthCallback for text/plain ContentType.
type AuthCallbackTextRequestBody = AuthCallbackTextBody

// CreateCredentialJSONRequestBody defines body for CreateCredential for application/json ContentType.
type CreateCredentialJSONRequestBody = CreateCredentialRequest

// CreateLinkJSONRequestBody defines body for CreateLink for application/json ContentType.
type CreateLinkJSONRequestBody = CreateLinkRequest

// CreateLinkQrCodeCallbackTextRequestBody defines body for CreateLinkQrCodeCallback for text/plain ContentType.
type CreateLinkQrCodeCallbackTextRequestBody = CreateLinkQrCodeCallbackTextBody

// AcivateLinkJSONRequestBody defines body for AcivateLink for application/json ContentType.
type AcivateLinkJSONRequestBody AcivateLinkJSONBody

// ImportSchemaJSONRequestBody defines body for ImportSchema for application/json ContentType.
type ImportSchemaJSONRequestBody = ImportSchemaRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(w http.ResponseWriter, r *http.Request)
	// Get Config
	// (GET /config)
	GetConfig(w http.ResponseWriter, r *http.Request)
	// Gets the favicon
	// (GET /favicon.ico)
	GetFavicon(w http.ResponseWriter, r *http.Request)
	// Get the documentation yaml file
	// (GET /static/docs/api_ui/api.yaml)
	GetYaml(w http.ResponseWriter, r *http.Request)
	// Healthcheck
	// (GET /status)
	Health(w http.ResponseWriter, r *http.Request)
	// Agent
	// (POST /v1/agent)
	Agent(w http.ResponseWriter, r *http.Request)
	// Authentication Callback
	// (POST /v1/authentication/callback)
	AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams)
	// Get Connection QRCode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(w http.ResponseWriter, r *http.Request)
	// Get Connections
	// (GET /v1/connections)
	GetConnections(w http.ResponseWriter, r *http.Request, params GetConnectionsParams)
	// Delete Connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, id Id, params DeleteConnectionParams)
	// Get Connection
	// (GET /v1/connections/{id})
	GetConnection(w http.ResponseWriter, r *http.Request, id Id)
	// Delete Connection Credentials
	// (DELETE /v1/connections/{id}/credentials)
	DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id)
	// Revoke Connection Credentials
	// (POST /v1/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id)
	// Get Credentials
	// (GET /v1/credentials)
	GetCredentials(w http.ResponseWriter, r *http.Request, params GetCredentialsParams)
	// Create Credential
	// (POST /v1/credentials)
	CreateCredential(w http.ResponseWriter, r *http.Request)
	// Get Links
	// (GET /v1/credentials/links)
	GetLinks(w http.ResponseWriter, r *http.Request, params GetLinksParams)
	// Create Link
	// (POST /v1/credentials/links)
	CreateLink(w http.ResponseWriter, r *http.Request)
	// Create Link QR Code Callback
	// (POST /v1/credentials/links/callback)
	CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, params CreateLinkQrCodeCallbackParams)
	// Delete Link
	// (DELETE /v1/credentials/links/{id})
	DeleteLink(w http.ResponseWriter, r *http.Request, id Id)
	// Get Link
	// (GET /v1/credentials/links/{id})
	GetLink(w http.ResponseWriter, r *http.Request, id Id)
	// Activate | Deactivate Link
	// (PATCH /v1/credentials/links/{id})
	AcivateLink(w http.ResponseWriter, r *http.Request, id Id)
	// Get Credential Link QRCode
	// (GET /v1/credentials/links/{id}/qrcode)
	GetLinkQRCode(w http.ResponseWriter, r *http.Request, id Id, params GetLinkQRCodeParams)
	// Create Authentication Link QRCode
	// (POST /v1/credentials/links/{id}/qrcode)
	CreateLinkQrCode(w http.ResponseWriter, r *http.Request, id Id)
	// Get Revocation Status
	// (GET /v1/credentials/revocation/status/{nonce})
	GetRevocationStatus(w http.ResponseWriter, r *http.Request, nonce PathNonce)
	// Revoke Credential
	// (POST /v1/credentials/revoke/{nonce})
	RevokeCredential(w http.ResponseWriter, r *http.Request, nonce PathNonce)
	// Delete Credential
	// (DELETE /v1/credentials/{id})
	DeleteCredential(w http.ResponseWriter, r *http.Request, id Id)
	// Get Credential
	// (GET /v1/credentials/{id})
	GetCredential(w http.ResponseWriter, r *http.Request, id Id)
	// Get Credential QR code
	// (GET /v1/credentials/{id}/qrcode)
	GetCredentialQrCode(w http.ResponseWriter, r *http.Request, id Id)
	// Get Schemas
	// (GET /v1/schemas)
	GetSchemas(w http.ResponseWriter, r *http.Request, params GetSchemasParams)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(w http.ResponseWriter, r *http.Request)
	// Get Schema
	// (GET /v1/schemas/{id})
	GetSchema(w http.ResponseWriter, r *http.Request, id Id)
	// Publish Identity State
	// (POST /v1/state/publish)
	PublishState(w http.ResponseWriter, r *http.Request)
	// Retry Publish Identity State
	// (POST /v1/state/retry)
	RetryPublishState(w http.ResponseWriter, r *http.Request)
	// Get Identity State Status
	// (GET /v1/state/status)
	GetStateStatus(w http.ResponseWriter, r *http.Request)
	// Get Identity State Transactions
	// (GET /v1/state/transactions)
	GetStateTransactions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfig(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFavicon operation middleware
func (siw *ServerInterfaceWrapper) GetFavicon(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFavicon(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetYaml operation middleware
func (siw *ServerInterfaceWrapper) GetYaml(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetYaml(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Agent operation middleware
func (siw *ServerInterfaceWrapper) Agent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Agent(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthCallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCallback(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthQRCode operation middleware
func (siw *ServerInterfaceWrapper) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthQRCode(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConnections operation middleware
func (siw *ServerInterfaceWrapper) GetConnections(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConnectionsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "credentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "credentials", r.URL.Query(), &params.Credentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credentials", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnections(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteConnectionParams

	// ------------- Optional query parameter "revokeCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "revokeCredentials", r.URL.Query(), &params.RevokeCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "revokeCredentials", Err: err})
		return
	}

	// ------------- Optional query parameter "deleteCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleteCredentials", r.URL.Query(), &params.DeleteCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deleteCredentials", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConnection operation middleware
func (siw *ServerInterfaceWrapper) GetConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnection(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnectionCredentials(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RevokeConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeConnectionCredentials(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialsParams

	// ------------- Optional query parameter "did" -------------

	err = runtime.BindQueryParameter("form", true, false, "did", r.URL.Query(), &params.Did)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "did", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentials(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCredential(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinksParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLink operation middleware
func (siw *ServerInterfaceWrapper) CreateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLink(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLinkQrCodeCallback operation middleware
func (siw *ServerInterfaceWrapper) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateLinkQrCodeCallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	// ------------- Required query parameter "linkID" -------------

	if paramValue := r.URL.Query().Get("linkID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "linkID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "linkID", r.URL.Query(), &params.LinkID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "linkID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLinkQrCodeCallback(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AcivateLink operation middleware
func (siw *ServerInterfaceWrapper) AcivateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AcivateLink(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLinkQRCode operation middleware
func (siw *ServerInterfaceWrapper) GetLinkQRCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinkQRCodeParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinkQRCode(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLinkQrCode operation middleware
func (siw *ServerInterfaceWrapper) CreateLinkQrCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLinkQrCode(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRevocationStatus operation middleware
func (siw *ServerInterfaceWrapper) GetRevocationStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, chi.URLParam(r, "nonce"), &nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRevocationStatus(w, r, nonce)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RevokeCredential operation middleware
func (siw *ServerInterfaceWrapper) RevokeCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, chi.URLParam(r, "nonce"), &nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeCredential(w, r, nonce)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCredential(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredential(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredentialQrCode operation middleware
func (siw *ServerInterfaceWrapper) GetCredentialQrCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentialQrCode(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSchemas operation middleware
func (siw *ServerInterfaceWrapper) GetSchemas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchemasParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchemas(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ImportSchema operation middleware
func (siw *ServerInterfaceWrapper) ImportSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportSchema(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSchema operation middleware
func (siw *ServerInterfaceWrapper) GetSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchema(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishState operation middleware
func (siw *ServerInterfaceWrapper) PublishState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishState(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RetryPublishState operation middleware
func (siw *ServerInterfaceWrapper) RetryPublishState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryPublishState(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStateStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStateStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStateStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStateTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetStateTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStateTransactions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetDocumentation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/config", wrapper.GetConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/favicon.ico", wrapper.GetFavicon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/static/docs/api_ui/api.yaml", wrapper.GetYaml)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/agent", wrapper.Agent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/authentication/callback", wrapper.AuthCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/authentication/qrcode", wrapper.AuthQRCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/connections", wrapper.GetConnections)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/connections/{id}", wrapper.GetConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/connections/{id}/credentials", wrapper.DeleteConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/connections/{id}/credentials/revoke", wrapper.RevokeConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials", wrapper.GetCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials", wrapper.CreateCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/links", wrapper.GetLinks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links", wrapper.CreateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links/callback", wrapper.CreateLinkQrCodeCallback)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/credentials/links/{id}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/links/{id}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/credentials/links/{id}", wrapper.AcivateLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/links/{id}/qrcode", wrapper.GetLinkQRCode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links/{id}/qrcode", wrapper.CreateLinkQrCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/revocation/status/{nonce}", wrapper.GetRevocationStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/revoke/{nonce}", wrapper.RevokeCredential)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/credentials/{id}", wrapper.DeleteCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/{id}", wrapper.GetCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/{id}/qrcode", wrapper.GetCredentialQrCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/schemas", wrapper.GetSchemas)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/schemas", wrapper.ImportSchema)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/schemas/{id}", wrapper.GetSchema)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/state/publish", wrapper.PublishState)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/state/retry", wrapper.RetryPublishState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/state/status", wrapper.GetStateStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/state/transactions", wrapper.GetStateTransactions)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N401JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N422JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type GetDocumentationRequestObject struct {
}

type GetDocumentationResponseObject interface {
	VisitGetDocumentationResponse(w http.ResponseWriter) error
}

type GetDocumentation200Response struct {
}

func (response GetDocumentation200Response) VisitGetDocumentationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse Config

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig500JSONResponse struct{ N500JSONResponse }

func (response GetConfig500JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetFaviconRequestObject struct {
}

type GetFaviconResponseObject interface {
	VisitGetFaviconResponse(w http.ResponseWriter) error
}

type GetFavicon200Response struct {
}

func (response GetFavicon200Response) VisitGetFaviconResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetYamlRequestObject struct {
}

type GetYamlResponseObject interface {
	VisitGetYamlResponse(w http.ResponseWriter) error
}

type GetYaml200Response struct {
}

func (response GetYaml200Response) VisitGetYamlResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AgentRequestObject struct {
	Body *AgentTextRequestBody
}

type AgentResponseObject interface {
	VisitAgentResponse(w http.ResponseWriter) error
}

type Agent200JSONResponse AgentResponse

func (response Agent200JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Agent400JSONResponse struct{ N400JSONResponse }

func (response Agent400JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Agent500JSONResponse struct{ N500JSONResponse }

func (response Agent500JSONResponse) VisitAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallbackRequestObject struct {
	Params AuthCallbackParams
	Body   *AuthCallbackTextRequestBody
}

type AuthCallbackResponseObject interface {
	VisitAuthCallbackResponse(w http.ResponseWriter) error
}

type AuthCallback200Response struct {
}

func (response AuthCallback200Response) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthCallback400JSONResponse struct{ N400JSONResponse }

func (response AuthCallback400JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallback500JSONResponse struct{ N500JSONResponse }

func (response AuthCallback500JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCodeRequestObject struct {
}

type AuthQRCodeResponseObject interface {
	VisitAuthQRCodeResponse(w http.ResponseWriter) error
}

type AuthQRCode200JSONResponse AuthenticationQrCodeResponse

func (response AuthQRCode200JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCode500JSONResponse struct{ N500JSONResponse }

func (response AuthQRCode500JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionsRequestObject struct {
	Params GetConnectionsParams
}

type GetConnectionsResponseObject interface {
	VisitGetConnectionsResponse(w http.ResponseWriter) error
}

type GetConnections200JSONResponse GetConnectionsResponse

func (response GetConnections200JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections400JSONResponse struct{ N400JSONResponse }

func (response GetConnections400JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections500JSONResponse struct{ N500JSONResponse }

func (response GetConnections500JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Id     Id `json:"id"`
	Params DeleteConnectionParams
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection200JSONResponse GenericMessage

func (response DeleteConnection200JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection400JSONResponse struct{ N400JSONResponse }

func (response DeleteConnection400JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionRequestObject struct {
	Id Id `json:"id"`
}

type GetConnectionResponseObject interface {
	VisitGetConnectionResponse(w http.ResponseWriter) error
}

type GetConnection200JSONResponse GetConnectionResponse

func (response GetConnection200JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection400JSONResponse struct{ N400JSONResponse }

func (response GetConnection400JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection500JSONResponse struct{ N500JSONResponse }

func (response GetConnection500JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentialsRequestObject struct {
	Id Id `json:"id"`
}

type DeleteConnectionCredentialsResponseObject interface {
	VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error
}

type DeleteConnectionCredentials200JSONResponse GenericMessage

func (response DeleteConnectionCredentials200JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnectionCredentials500JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentialsRequestObject struct {
	Id Id `json:"id"`
}

type RevokeConnectionCredentialsResponseObject interface {
	VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error
}

type RevokeConnectionCredentials202JSONResponse GenericMessage

func (response RevokeConnectionCredentials202JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials400JSONResponse struct{ N400JSONResponse }

func (response RevokeConnectionCredentials400JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response RevokeConnectionCredentials500JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialsRequestObject struct {
	Params GetCredentialsParams
}

type GetCredentialsResponseObject interface {
	VisitGetCredentialsResponse(w http.ResponseWriter) error
}

type GetCredentials200JSONResponse []Credential

func (response GetCredentials200JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials400JSONResponse struct{ N400JSONResponse }

func (response GetCredentials400JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials404JSONResponse struct{ N404JSONResponse }

func (response GetCredentials404JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials500JSONResponse struct{ N500JSONResponse }

func (response GetCredentials500JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredentialRequestObject struct {
	Body *CreateCredentialJSONRequestBody
}

type CreateCredentialResponseObject interface {
	VisitCreateCredentialResponse(w http.ResponseWriter) error
}

type CreateCredential201JSONResponse UUIDResponse

func (response CreateCredential201JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential400JSONResponse struct{ N400JSONResponse }

func (response CreateCredential400JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential401JSONResponse struct{ N401JSONResponse }

func (response CreateCredential401JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential422JSONResponse struct{ N422JSONResponse }

func (response CreateCredential422JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential500JSONResponse struct{ N500JSONResponse }

func (response CreateCredential500JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinksRequestObject struct {
	Params GetLinksParams
}

type GetLinksResponseObject interface {
	VisitGetLinksResponse(w http.ResponseWriter) error
}

type GetLinks200JSONResponse []Link

func (response GetLinks200JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks400JSONResponse struct{ N400JSONResponse }

func (response GetLinks400JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks404JSONResponse struct{ N404JSONResponse }

func (response GetLinks404JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLinks500JSONResponse struct{ N500JSONResponse }

func (response GetLinks500JSONResponse) VisitGetLinksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkRequestObject struct {
	Body *CreateLinkJSONRequestBody
}

type CreateLinkResponseObject interface {
	VisitCreateLinkResponse(w http.ResponseWriter) error
}

type CreateLink201JSONResponse UUIDResponse

func (response CreateLink201JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink400JSONResponse struct{ N400JSONResponse }

func (response CreateLink400JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink500JSONResponse struct{ N500JSONResponse }

func (response CreateLink500JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallbackRequestObject struct {
	Params CreateLinkQrCodeCallbackParams
	Body   *CreateLinkQrCodeCallbackTextRequestBody
}

type CreateLinkQrCodeCallbackResponseObject interface {
	VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error
}

type CreateLinkQrCodeCallback200Response struct {
}

func (response CreateLinkQrCodeCallback200Response) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateLinkQrCodeCallback400JSONResponse struct{ N400JSONResponse }

func (response CreateLinkQrCodeCallback400JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallback500JSONResponse struct{ N500JSONResponse }

func (response CreateLinkQrCodeCallback500JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLinkRequestObject struct {
	Id Id `json:"id"`
}

type DeleteLinkResponseObject interface {
	VisitDeleteLinkResponse(w http.ResponseWriter) error
}

type DeleteLink200JSONResponse GenericMessage

func (response DeleteLink200JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink400JSONResponse struct{ N400JSONResponse }

func (response DeleteLink400JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink500JSONResponse struct{ N500JSONResponse }

func (response DeleteLink500JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkRequestObject struct {
	Id Id `json:"id"`
}

type GetLinkResponseObject interface {
	VisitGetLinkResponse(w http.ResponseWriter) error
}

type GetLink200JSONResponse Link

func (response GetLink200JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLink404JSONResponse struct{ N404JSONResponse }

func (response GetLink404JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLink500JSONResponse struct{ N500JSONResponse }

func (response GetLink500JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLinkRequestObject struct {
	Id   Id `json:"id"`
	Body *AcivateLinkJSONRequestBody
}

type AcivateLinkResponseObject interface {
	VisitAcivateLinkResponse(w http.ResponseWriter) error
}

type AcivateLink200JSONResponse GenericMessage

func (response AcivateLink200JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLink400JSONResponse struct{ N400JSONResponse }

func (response AcivateLink400JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLink500JSONResponse struct{ N500JSONResponse }

func (response AcivateLink500JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkQRCodeRequestObject struct {
	Id     Id `json:"id"`
	Params GetLinkQRCodeParams
}

type GetLinkQRCodeResponseObject interface {
	VisitGetLinkQRCodeResponse(w http.ResponseWriter) error
}

type GetLinkQRCode200JSONResponse GetLinkQrCodeResponse

func (response GetLinkQRCode200JSONResponse) VisitGetLinkQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkQRCode400JSONResponse struct{ N400JSONResponse }

func (response GetLinkQRCode400JSONResponse) VisitGetLinkQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkQRCode404JSONResponse GenericErrorMessage

func (response GetLinkQRCode404JSONResponse) VisitGetLinkQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkQRCode500JSONResponse struct{ N500JSONResponse }

func (response GetLinkQRCode500JSONResponse) VisitGetLinkQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeRequestObject struct {
	Id Id `json:"id"`
}

type CreateLinkQrCodeResponseObject interface {
	VisitCreateLinkQrCodeResponse(w http.ResponseWriter) error
}

type CreateLinkQrCode200JSONResponse CredentialLinkQrCodeResponse

func (response CreateLinkQrCode200JSONResponse) VisitCreateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCode400JSONResponse struct{ N400JSONResponse }

func (response CreateLinkQrCode400JSONResponse) VisitCreateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCode404JSONResponse struct{ N404JSONResponse }

func (response CreateLinkQrCode404JSONResponse) VisitCreateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCode500JSONResponse struct{ N500JSONResponse }

func (response CreateLinkQrCode500JSONResponse) VisitCreateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatusRequestObject struct {
	Nonce PathNonce `json:"nonce"`
}

type GetRevocationStatusResponseObject interface {
	VisitGetRevocationStatusResponse(w http.ResponseWriter) error
}

type GetRevocationStatus200JSONResponse RevocationStatusResponse

func (response GetRevocationStatus200JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus400JSONResponse struct{ N400JSONResponse }

func (response GetRevocationStatus400JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRevocationStatus500JSONResponse struct{ N500JSONResponse }

func (response GetRevocationStatus500JSONResponse) VisitGetRevocationStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredentialRequestObject struct {
	Nonce PathNonce `json:"nonce"`
}

type RevokeCredentialResponseObject interface {
	VisitRevokeCredentialResponse(w http.ResponseWriter) error
}

type RevokeCredential202JSONResponse RevokeCredentialResponse

func (response RevokeCredential202JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential401JSONResponse struct{ N401JSONResponse }

func (response RevokeCredential401JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential404JSONResponse struct{ N404JSONResponse }

func (response RevokeCredential404JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential500JSONResponse struct{ N500JSONResponse }

func (response RevokeCredential500JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredentialRequestObject struct {
	Id Id `json:"id"`
}

type DeleteCredentialResponseObject interface {
	VisitDeleteCredentialResponse(w http.ResponseWriter) error
}

type DeleteCredential200JSONResponse GenericMessage

func (response DeleteCredential200JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential400JSONResponse struct{ N400JSONResponse }

func (response DeleteCredential400JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential401JSONResponse struct{ N401JSONResponse }

func (response DeleteCredential401JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential500JSONResponse struct{ N500JSONResponse }

func (response DeleteCredential500JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialRequestObject struct {
	Id Id `json:"id"`
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse Credential

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential400JSONResponse struct{ N400JSONResponse }

func (response GetCredential400JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential500JSONResponse struct{ N500JSONResponse }

func (response GetCredential500JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialQrCodeRequestObject struct {
	Id Id `json:"id"`
}

type GetCredentialQrCodeResponseObject interface {
	VisitGetCredentialQrCodeResponse(w http.ResponseWriter) error
}

type GetCredentialQrCode200JSONResponse QrCodeResponse

func (response GetCredentialQrCode200JSONResponse) VisitGetCredentialQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialQrCode400JSONResponse struct{ N400JSONResponse }

func (response GetCredentialQrCode400JSONResponse) VisitGetCredentialQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialQrCode404JSONResponse struct{ N404JSONResponse }

func (response GetCredentialQrCode404JSONResponse) VisitGetCredentialQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialQrCode500JSONResponse struct{ N500JSONResponse }

func (response GetCredentialQrCode500JSONResponse) VisitGetCredentialQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemasRequestObject struct {
	Params GetSchemasParams
}

type GetSchemasResponseObject interface {
	VisitGetSchemasResponse(w http.ResponseWriter) error
}

type GetSchemas200JSONResponse []Schema

func (response GetSchemas200JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas400JSONResponse struct{ N400JSONResponse }

func (response GetSchemas400JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas500JSONResponse struct{ N500JSONResponse }

func (response GetSchemas500JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchemaRequestObject struct {
	Body *ImportSchemaJSONRequestBody
}

type ImportSchemaResponseObject interface {
	VisitImportSchemaResponse(w http.ResponseWriter) error
}

type ImportSchema201JSONResponse UUIDResponse

func (response ImportSchema201JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema400JSONResponse struct{ N400JSONResponse }

func (response ImportSchema400JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema500JSONResponse struct{ N500JSONResponse }

func (response ImportSchema500JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemaRequestObject struct {
	Id Id `json:"id"`
}

type GetSchemaResponseObject interface {
	VisitGetSchemaResponse(w http.ResponseWriter) error
}

type GetSchema200JSONResponse Schema

func (response GetSchema200JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema400JSONResponse struct{ N400JSONResponse }

func (response GetSchema400JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema404JSONResponse struct{ N404JSONResponse }

func (response GetSchema404JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema500JSONResponse struct{ N500JSONResponse }

func (response GetSchema500JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishStateRequestObject struct {
}

type PublishStateResponseObject interface {
	VisitPublishStateResponse(w http.ResponseWriter) error
}

type PublishState202JSONResponse PublishIdentityStateResponse

func (response PublishState202JSONResponse) VisitPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type PublishState400JSONResponse struct{ N400JSONResponse }

func (response PublishState400JSONResponse) VisitPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishState500JSONResponse struct{ N500JSONResponse }

func (response PublishState500JSONResponse) VisitPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishStateRequestObject struct {
}

type RetryPublishStateResponseObject interface {
	VisitRetryPublishStateResponse(w http.ResponseWriter) error
}

type RetryPublishState202JSONResponse PublishIdentityStateResponse

func (response RetryPublishState202JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishState400JSONResponse struct{ N400JSONResponse }

func (response RetryPublishState400JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RetryPublishState500JSONResponse struct{ N500JSONResponse }

func (response RetryPublishState500JSONResponse) VisitRetryPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStateStatusRequestObject struct {
}

type GetStateStatusResponseObject interface {
	VisitGetStateStatusResponse(w http.ResponseWriter) error
}

type GetStateStatus200JSONResponse StateStatusResponse

func (response GetStateStatus200JSONResponse) VisitGetStateStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStateStatus500JSONResponse struct{ N500JSONResponse }

func (response GetStateStatus500JSONResponse) VisitGetStateStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStateTransactionsRequestObject struct {
}

type GetStateTransactionsResponseObject interface {
	VisitGetStateTransactionsResponse(w http.ResponseWriter) error
}

type GetStateTransactions200JSONResponse StateTransactionsResponse

func (response GetStateTransactions200JSONResponse) VisitGetStateTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStateTransactions500JSONResponse struct{ N500JSONResponse }

func (response GetStateTransactions500JSONResponse) VisitGetStateTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(ctx context.Context, request GetDocumentationRequestObject) (GetDocumentationResponseObject, error)
	// Get Config
	// (GET /config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)
	// Gets the favicon
	// (GET /favicon.ico)
	GetFavicon(ctx context.Context, request GetFaviconRequestObject) (GetFaviconResponseObject, error)
	// Get the documentation yaml file
	// (GET /static/docs/api_ui/api.yaml)
	GetYaml(ctx context.Context, request GetYamlRequestObject) (GetYamlResponseObject, error)
	// Healthcheck
	// (GET /status)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Agent
	// (POST /v1/agent)
	Agent(ctx context.Context, request AgentRequestObject) (AgentResponseObject, error)
	// Authentication Callback
	// (POST /v1/authentication/callback)
	AuthCallback(ctx context.Context, request AuthCallbackRequestObject) (AuthCallbackResponseObject, error)
	// Get Connection QRCode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(ctx context.Context, request AuthQRCodeRequestObject) (AuthQRCodeResponseObject, error)
	// Get Connections
	// (GET /v1/connections)
	GetConnections(ctx context.Context, request GetConnectionsRequestObject) (GetConnectionsResponseObject, error)
	// Delete Connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Get Connection
	// (GET /v1/connections/{id})
	GetConnection(ctx context.Context, request GetConnectionRequestObject) (GetConnectionResponseObject, error)
	// Delete Connection Credentials
	// (DELETE /v1/connections/{id}/credentials)
	DeleteConnectionCredentials(ctx context.Context, request DeleteConnectionCredentialsRequestObject) (DeleteConnectionCredentialsResponseObject, error)
	// Revoke Connection Credentials
	// (POST /v1/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(ctx context.Context, request RevokeConnectionCredentialsRequestObject) (RevokeConnectionCredentialsResponseObject, error)
	// Get Credentials
	// (GET /v1/credentials)
	GetCredentials(ctx context.Context, request GetCredentialsRequestObject) (GetCredentialsResponseObject, error)
	// Create Credential
	// (POST /v1/credentials)
	CreateCredential(ctx context.Context, request CreateCredentialRequestObject) (CreateCredentialResponseObject, error)
	// Get Links
	// (GET /v1/credentials/links)
	GetLinks(ctx context.Context, request GetLinksRequestObject) (GetLinksResponseObject, error)
	// Create Link
	// (POST /v1/credentials/links)
	CreateLink(ctx context.Context, request CreateLinkRequestObject) (CreateLinkResponseObject, error)
	// Create Link QR Code Callback
	// (POST /v1/credentials/links/callback)
	CreateLinkQrCodeCallback(ctx context.Context, request CreateLinkQrCodeCallbackRequestObject) (CreateLinkQrCodeCallbackResponseObject, error)
	// Delete Link
	// (DELETE /v1/credentials/links/{id})
	DeleteLink(ctx context.Context, request DeleteLinkRequestObject) (DeleteLinkResponseObject, error)
	// Get Link
	// (GET /v1/credentials/links/{id})
	GetLink(ctx context.Context, request GetLinkRequestObject) (GetLinkResponseObject, error)
	// Activate | Deactivate Link
	// (PATCH /v1/credentials/links/{id})
	AcivateLink(ctx context.Context, request AcivateLinkRequestObject) (AcivateLinkResponseObject, error)
	// Get Credential Link QRCode
	// (GET /v1/credentials/links/{id}/qrcode)
	GetLinkQRCode(ctx context.Context, request GetLinkQRCodeRequestObject) (GetLinkQRCodeResponseObject, error)
	// Create Authentication Link QRCode
	// (POST /v1/credentials/links/{id}/qrcode)
	CreateLinkQrCode(ctx context.Context, request CreateLinkQrCodeRequestObject) (CreateLinkQrCodeResponseObject, error)
	// Get Revocation Status
	// (GET /v1/credentials/revocation/status/{nonce})
	GetRevocationStatus(ctx context.Context, request GetRevocationStatusRequestObject) (GetRevocationStatusResponseObject, error)
	// Revoke Credential
	// (POST /v1/credentials/revoke/{nonce})
	RevokeCredential(ctx context.Context, request RevokeCredentialRequestObject) (RevokeCredentialResponseObject, error)
	// Delete Credential
	// (DELETE /v1/credentials/{id})
	DeleteCredential(ctx context.Context, request DeleteCredentialRequestObject) (DeleteCredentialResponseObject, error)
	// Get Credential
	// (GET /v1/credentials/{id})
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)
	// Get Credential QR code
	// (GET /v1/credentials/{id}/qrcode)
	GetCredentialQrCode(ctx context.Context, request GetCredentialQrCodeRequestObject) (GetCredentialQrCodeResponseObject, error)
	// Get Schemas
	// (GET /v1/schemas)
	GetSchemas(ctx context.Context, request GetSchemasRequestObject) (GetSchemasResponseObject, error)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(ctx context.Context, request ImportSchemaRequestObject) (ImportSchemaResponseObject, error)
	// Get Schema
	// (GET /v1/schemas/{id})
	GetSchema(ctx context.Context, request GetSchemaRequestObject) (GetSchemaResponseObject, error)
	// Publish Identity State
	// (POST /v1/state/publish)
	PublishState(ctx context.Context, request PublishStateRequestObject) (PublishStateResponseObject, error)
	// Retry Publish Identity State
	// (POST /v1/state/retry)
	RetryPublishState(ctx context.Context, request RetryPublishStateRequestObject) (RetryPublishStateResponseObject, error)
	// Get Identity State Status
	// (GET /v1/state/status)
	GetStateStatus(ctx context.Context, request GetStateStatusRequestObject) (GetStateStatusResponseObject, error)
	// Get Identity State Transactions
	// (GET /v1/state/transactions)
	GetStateTransactions(ctx context.Context, request GetStateTransactionsRequestObject) (GetStateTransactionsResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictHttpHandlerFunc
type StrictMiddlewareFunc = runtime.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDocumentation operation middleware
func (sh *strictHandler) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	var request GetDocumentationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentation(ctx, request.(GetDocumentationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentationResponseObject); ok {
		if err := validResponse.VisitGetDocumentationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(w http.ResponseWriter, r *http.Request) {
	var request GetConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx, request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		if err := validResponse.VisitGetConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetFavicon operation middleware
func (sh *strictHandler) GetFavicon(w http.ResponseWriter, r *http.Request) {
	var request GetFaviconRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFavicon(ctx, request.(GetFaviconRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFavicon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFaviconResponseObject); ok {
		if err := validResponse.VisitGetFaviconResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetYaml operation middleware
func (sh *strictHandler) GetYaml(w http.ResponseWriter, r *http.Request) {
	var request GetYamlRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetYaml(ctx, request.(GetYamlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetYaml")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetYamlResponseObject); ok {
		if err := validResponse.VisitGetYamlResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Agent operation middleware
func (sh *strictHandler) Agent(w http.ResponseWriter, r *http.Request) {
	var request AgentRequestObject

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AgentTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Agent(ctx, request.(AgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Agent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AgentResponseObject); ok {
		if err := validResponse.VisitAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthCallback operation middleware
func (sh *strictHandler) AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams) {
	var request AuthCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AuthCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthCallback(ctx, request.(AuthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthCallbackResponseObject); ok {
		if err := validResponse.VisitAuthCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthQRCode operation middleware
func (sh *strictHandler) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	var request AuthQRCodeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthQRCode(ctx, request.(AuthQRCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthQRCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthQRCodeResponseObject); ok {
		if err := validResponse.VisitAuthQRCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConnections operation middleware
func (sh *strictHandler) GetConnections(w http.ResponseWriter, r *http.Request, params GetConnectionsParams) {
	var request GetConnectionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnections(ctx, request.(GetConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionsResponseObject); ok {
		if err := validResponse.VisitGetConnectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, id Id, params DeleteConnectionParams) {
	var request DeleteConnectionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConnection operation middleware
func (sh *strictHandler) GetConnection(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnection(ctx, request.(GetConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionResponseObject); ok {
		if err := validResponse.VisitGetConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteConnectionCredentials operation middleware
func (sh *strictHandler) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteConnectionCredentialsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnectionCredentials(ctx, request.(DeleteConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RevokeConnectionCredentials operation middleware
func (sh *strictHandler) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id) {
	var request RevokeConnectionCredentialsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeConnectionCredentials(ctx, request.(RevokeConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitRevokeConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetCredentials operation middleware
func (sh *strictHandler) GetCredentials(w http.ResponseWriter, r *http.Request, params GetCredentialsParams) {
	var request GetCredentialsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentials(ctx, request.(GetCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialsResponseObject); ok {
		if err := validResponse.VisitGetCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateCredential operation middleware
func (sh *strictHandler) CreateCredential(w http.ResponseWriter, r *http.Request) {
	var request CreateCredentialRequestObject

	var body CreateCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCredential(ctx, request.(CreateCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCredentialResponseObject); ok {
		if err := validResponse.VisitCreateCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLinks operation middleware
func (sh *strictHandler) GetLinks(w http.ResponseWriter, r *http.Request, params GetLinksParams) {
	var request GetLinksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLinks(ctx, request.(GetLinksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLinks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinksResponseObject); ok {
		if err := validResponse.VisitGetLinksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateLink operation middleware
func (sh *strictHandler) CreateLink(w http.ResponseWriter, r *http.Request) {
	var request CreateLinkRequestObject

	var body CreateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLink(ctx, request.(CreateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkResponseObject); ok {
		if err := validResponse.VisitCreateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateLinkQrCodeCallback operation middleware
func (sh *strictHandler) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, params CreateLinkQrCodeCallbackParams) {
	var request CreateLinkQrCodeCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := CreateLinkQrCodeCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLinkQrCodeCallback(ctx, request.(CreateLinkQrCodeCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLinkQrCodeCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkQrCodeCallbackResponseObject); ok {
		if err := validResponse.VisitCreateLinkQrCodeCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteLink operation middleware
func (sh *strictHandler) DeleteLink(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteLinkRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLink(ctx, request.(DeleteLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLinkResponseObject); ok {
		if err := validResponse.VisitDeleteLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLink operation middleware
func (sh *strictHandler) GetLink(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetLinkRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLink(ctx, request.(GetLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinkResponseObject); ok {
		if err := validResponse.VisitGetLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AcivateLink operation middleware
func (sh *strictHandler) AcivateLink(w http.ResponseWriter, r *http.Request, id Id) {
	var request AcivateLinkRequestObject

	request.Id = id

	var body AcivateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AcivateLink(ctx, request.(AcivateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AcivateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AcivateLinkResponseObject); ok {
		if err := validResponse.VisitAcivateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLinkQRCode operation middleware
func (sh *strictHandler) GetLinkQRCode(w http.ResponseWriter, r *http.Request, id Id, params GetLinkQRCodeParams) {
	var request GetLinkQRCodeRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLinkQRCode(ctx, request.(GetLinkQRCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLinkQRCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinkQRCodeResponseObject); ok {
		if err := validResponse.VisitGetLinkQRCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateLinkQrCode operation middleware
func (sh *strictHandler) CreateLinkQrCode(w http.ResponseWriter, r *http.Request, id Id) {
	var request CreateLinkQrCodeRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLinkQrCode(ctx, request.(CreateLinkQrCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLinkQrCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkQrCodeResponseObject); ok {
		if err := validResponse.VisitCreateLinkQrCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetRevocationStatus operation middleware
func (sh *strictHandler) GetRevocationStatus(w http.ResponseWriter, r *http.Request, nonce PathNonce) {
	var request GetRevocationStatusRequestObject

	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRevocationStatus(ctx, request.(GetRevocationStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRevocationStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRevocationStatusResponseObject); ok {
		if err := validResponse.VisitGetRevocationStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RevokeCredential operation middleware
func (sh *strictHandler) RevokeCredential(w http.ResponseWriter, r *http.Request, nonce PathNonce) {
	var request RevokeCredentialRequestObject

	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeCredential(ctx, request.(RevokeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeCredentialResponseObject); ok {
		if err := validResponse.VisitRevokeCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteCredential operation middleware
func (sh *strictHandler) DeleteCredential(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteCredentialRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCredential(ctx, request.(DeleteCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCredentialResponseObject); ok {
		if err := validResponse.VisitDeleteCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetCredentialRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx, request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		if err := validResponse.VisitGetCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetCredentialQrCode operation middleware
func (sh *strictHandler) GetCredentialQrCode(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetCredentialQrCodeRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentialQrCode(ctx, request.(GetCredentialQrCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentialQrCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialQrCodeResponseObject); ok {
		if err := validResponse.VisitGetCredentialQrCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSchemas operation middleware
func (sh *strictHandler) GetSchemas(w http.ResponseWriter, r *http.Request, params GetSchemasParams) {
	var request GetSchemasRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchemas(ctx, request.(GetSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemasResponseObject); ok {
		if err := validResponse.VisitGetSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ImportSchema operation middleware
func (sh *strictHandler) ImportSchema(w http.ResponseWriter, r *http.Request) {
	var request ImportSchemaRequestObject

	var body ImportSchemaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportSchema(ctx, request.(ImportSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportSchemaResponseObject); ok {
		if err := validResponse.VisitImportSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSchema operation middleware
func (sh *strictHandler) GetSchema(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetSchemaRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchema(ctx, request.(GetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemaResponseObject); ok {
		if err := validResponse.VisitGetSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PublishState operation middleware
func (sh *strictHandler) PublishState(w http.ResponseWriter, r *http.Request) {
	var request PublishStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishState(ctx, request.(PublishStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishStateResponseObject); ok {
		if err := validResponse.VisitPublishStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RetryPublishState operation middleware
func (sh *strictHandler) RetryPublishState(w http.ResponseWriter, r *http.Request) {
	var request RetryPublishStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryPublishState(ctx, request.(RetryPublishStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryPublishState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryPublishStateResponseObject); ok {
		if err := validResponse.VisitRetryPublishStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetStateStatus operation middleware
func (sh *strictHandler) GetStateStatus(w http.ResponseWriter, r *http.Request) {
	var request GetStateStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStateStatus(ctx, request.(GetStateStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStateStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStateStatusResponseObject); ok {
		if err := validResponse.VisitGetStateStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetStateTransactions operation middleware
func (sh *strictHandler) GetStateTransactions(w http.ResponseWriter, r *http.Request) {
	var request GetStateTransactionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStateTransactions(ctx, request.(GetStateTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStateTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStateTransactionsResponseObject); ok {
		if err := validResponse.VisitGetStateTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
