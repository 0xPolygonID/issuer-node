// Package api_admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api_admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for GetCredentialsParamsType.
const (
	All     GetCredentialsParamsType = "all"
	Expired GetCredentialsParamsType = "expired"
	Revoked GetCredentialsParamsType = "revoked"
)

// AuthenticationQrCodeResponse defines model for AuthenticationQrCodeResponse.
type AuthenticationQrCodeResponse struct {
	Body struct {
		CallbackUrl string        `json:"callbackUrl"`
		Reason      string        `json:"reason"`
		Scope       []interface{} `json:"scope"`
	} `json:"body"`
	From string `json:"from"`
	Id   string `json:"id"`
	Thid string `json:"thid"`
	Typ  string `json:"typ"`
	Type string `json:"type"`
}

// CreateCredentialRequest defines model for CreateCredentialRequest.
type CreateCredentialRequest struct {
	CredentialSchema  string                 `json:"credentialSchema"`
	CredentialSubject map[string]interface{} `json:"credentialSubject"`
	Expiration        *int64                 `json:"expiration,omitempty"`
	MtProof           *bool                  `json:"mtProof,omitempty"`
	SignatureProof    *bool                  `json:"signatureProof,omitempty"`
	Type              string                 `json:"type"`
}

// CreateLinkRequest defines model for CreateLinkRequest.
type CreateLinkRequest struct {
	Attributes          []LinkRequestAttributesType `json:"attributes"`
	ClaimLinkExpiration *time.Time                  `json:"claimLinkExpiration,omitempty"`
	ExpirationDate      *openapi_types.Date         `json:"expirationDate,omitempty"`
	LimitedClaims       *int                        `json:"limitedClaims"`
	MtProof             bool                        `json:"mtProof"`
	SchemaID            uuid.UUID                   `json:"schemaID"`
	SignatureProof      bool                        `json:"signatureProof"`
}

// Credential defines model for Credential.
type Credential struct {
	Attributes map[string]interface{} `json:"attributes"`
	CreatedAt  time.Time              `json:"createdAt"`
	Expired    bool                   `json:"expired"`
	ExpiresAt  *time.Time             `json:"expiresAt,omitempty"`
	Id         uuid.UUID              `json:"id"`
	ProofTypes []string               `json:"proofTypes"`
	RevNonce   uint64                 `json:"revNonce"`
	Revoked    bool                   `json:"revoked"`
	SchemaHash string                 `json:"schemaHash"`
	SchemaType string                 `json:"schemaType"`
}

// CredentialLinkQrCodeResponse defines model for CredentialLinkQrCodeResponse.
type CredentialLinkQrCodeResponse struct {
	Issuer    *IssuerDescription            `json:"issuer,omitempty"`
	LinkID    *string                       `json:"linkID,omitempty"`
	QrCode    *AuthenticationQrCodeResponse `json:"qrCode,omitempty"`
	SessionID *string                       `json:"sessionID,omitempty"`
}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// GenericMessage defines model for GenericMessage.
type GenericMessage struct {
	Message string `json:"message"`
}

// GetConnectionResponse defines model for GetConnectionResponse.
type GetConnectionResponse struct {
	CreatedAt   time.Time    `json:"createdAt"`
	Credentials []Credential `json:"credentials"`
	Id          string       `json:"id"`
	IssuerID    string       `json:"issuerID"`
	UserID      string       `json:"userID"`
}

// GetConnectionsResponse defines model for GetConnectionsResponse.
type GetConnectionsResponse = []GetConnectionResponse

// GetLinkQrCodeCredentialsResponseType defines model for GetLinkQrCodeCredentialsResponseType.
type GetLinkQrCodeCredentialsResponseType struct {
	Description string `json:"description"`
	Id          string `json:"id"`
}

// GetLinkQrCodeResponse defines model for GetLinkQrCodeResponse.
type GetLinkQrCodeResponse struct {
	QrCode *GetLinkQrCodeResponseType `json:"qrCode,omitempty"`
	Status *string                    `json:"status,omitempty"`
}

// GetLinkQrCodeResponseBodyType defines model for GetLinkQrCodeResponseBodyType.
type GetLinkQrCodeResponseBodyType struct {
	Credentials []GetLinkQrCodeCredentialsResponseType `json:"credentials"`
	Url         string                                 `json:"url"`
}

// GetLinkQrCodeResponseType defines model for GetLinkQrCodeResponseType.
type GetLinkQrCodeResponseType struct {
	Body GetLinkQrCodeResponseBodyType `json:"body"`
	From string                        `json:"from"`
	Id   string                        `json:"id"`
	Thid string                        `json:"thid"`
	To   string                        `json:"to"`
	Typ  string                        `json:"typ"`
	Type string                        `json:"type"`
}

// Health defines model for Health.
type Health map[string]bool

// ImportSchemaRequest defines model for ImportSchemaRequest.
type ImportSchemaRequest struct {
	SchemaType string `json:"schemaType"`
	Url        string `json:"url"`
}

// IssuerDescription defines model for IssuerDescription.
type IssuerDescription struct {
	DisplayName *string `json:"displayName,omitempty"`
	Logo        *string `json:"logo,omitempty"`
}

// LinkRequestAttributesType defines model for LinkRequestAttributesType.
type LinkRequestAttributesType struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// PublishIdentityStateResponse defines model for PublishIdentityStateResponse.
type PublishIdentityStateResponse struct {
	ClaimsTreeRoot     *string `json:"claimsTreeRoot,omitempty"`
	RevocationTreeRoot *string `json:"revocationTreeRoot,omitempty"`
	RootOfRoots        *string `json:"rootOfRoots,omitempty"`
	State              *string `json:"state,omitempty"`
	TxID               *string `json:"txID,omitempty"`
}

// RevokeCredentialResponse defines model for RevokeCredentialResponse.
type RevokeCredentialResponse struct {
	Message string `json:"message"`
}

// Schema defines model for Schema.
type Schema struct {
	BigInt    string    `json:"bigInt"`
	CreatedAt time.Time `json:"createdAt"`
	Hash      string    `json:"hash"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
	Url       string    `json:"url"`
}

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Id string `json:"id"`
}

// Id defines model for id.
type Id = uuid.UUID

// LinkID defines model for linkID.
type LinkID = uuid.UUID

// PathNonce defines model for pathNonce.
type PathNonce = int64

// SessionID defines model for sessionID.
type SessionID = uuid.UUID

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N401 defines model for 401.
type N401 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N422 defines model for 422.
type N422 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// AuthCallbackTextBody defines parameters for AuthCallback.
type AuthCallbackTextBody = string

// AuthCallbackParams defines parameters for AuthCallback.
type AuthCallbackParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// GetConnectionsParams defines parameters for GetConnections.
type GetConnectionsParams struct {
	// Query Query string to do full text search in connections.
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Credentials credentials=true to include the connection credentials.
	Credentials *bool `form:"credentials,omitempty" json:"credentials,omitempty"`
}

// DeleteConnectionParams defines parameters for DeleteConnection.
type DeleteConnectionParams struct {
	// RevokeCredentials Set revokeCredentials to true if you want to revoke the credentials of the connection
	RevokeCredentials *bool `form:"revokeCredentials,omitempty" json:"revokeCredentials,omitempty"`

	// DeleteCredentials Set deleteCredentials to true if you want to delete the credentials of the connection
	DeleteCredentials *bool `form:"deleteCredentials,omitempty" json:"deleteCredentials,omitempty"`
}

// GetCredentialsParams defines parameters for GetCredentials.
type GetCredentialsParams struct {
	// Type Schema type:
	//   * `all` - All schemas. Default value if query parameter is not present
	//   * `revoked` - Only revoked schemas
	//   * `expired` - Only expired schemas
	Type *GetCredentialsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Query Query string to do full text search
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetCredentialsParamsType defines parameters for GetCredentials.
type GetCredentialsParamsType string

// CreateLinkQrCodeCallbackTextBody defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackTextBody = string

// CreateLinkQrCodeCallbackParams defines parameters for CreateLinkQrCodeCallback.
type CreateLinkQrCodeCallbackParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`

	// LinkID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	LinkID LinkID `form:"linkID" json:"linkID"`
}

// GetLinkParams defines parameters for GetLink.
type GetLinkParams struct {
	// SessionID Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// AcivateLinkJSONBody defines parameters for AcivateLink.
type AcivateLinkJSONBody struct {
	Active bool `json:"active"`
}

// GetSchemasParams defines parameters for GetSchemas.
type GetSchemasParams struct {
	// Query Query string to do full text search in schema types and attributes.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// AuthCallbackTextRequestBody defines body for AuthCallback for text/plain ContentType.
type AuthCallbackTextRequestBody = AuthCallbackTextBody

// CreateCredentialJSONRequestBody defines body for CreateCredential for application/json ContentType.
type CreateCredentialJSONRequestBody = CreateCredentialRequest

// CreateLinkJSONRequestBody defines body for CreateLink for application/json ContentType.
type CreateLinkJSONRequestBody = CreateLinkRequest

// CreateLinkQrCodeCallbackTextRequestBody defines body for CreateLinkQrCodeCallback for text/plain ContentType.
type CreateLinkQrCodeCallbackTextRequestBody = CreateLinkQrCodeCallbackTextBody

// AcivateLinkJSONRequestBody defines body for AcivateLink for application/json ContentType.
type AcivateLinkJSONRequestBody AcivateLinkJSONBody

// ImportSchemaJSONRequestBody defines body for ImportSchema for application/json ContentType.
type ImportSchemaJSONRequestBody = ImportSchemaRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(w http.ResponseWriter, r *http.Request)
	// Get the documentation yaml file
	// (GET /static/docs/api_admin/api.yaml)
	GetYaml(w http.ResponseWriter, r *http.Request)
	// Healthcheck
	// (GET /status)
	Health(w http.ResponseWriter, r *http.Request)
	// Authentication Callback
	// (POST /v1/authentication/callback)
	AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams)
	// Get Authentication QRCode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(w http.ResponseWriter, r *http.Request)
	// Get Connections
	// (GET /v1/connections)
	GetConnections(w http.ResponseWriter, r *http.Request, params GetConnectionsParams)
	// Delete Connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, id Id, params DeleteConnectionParams)
	// Get Connection
	// (GET /v1/connections/{id})
	GetConnection(w http.ResponseWriter, r *http.Request, id Id)
	// Delete Connection Credentials
	// (DELETE /v1/connections/{id}/credentials)
	DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id)
	// Revoke Connection Credentials
	// (POST /v1/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id)
	// Get all credentials. Optional filter by status and text query search.
	// (GET /v1/credentials)
	GetCredentials(w http.ResponseWriter, r *http.Request, params GetCredentialsParams)
	// Create Credential
	// (POST /v1/credentials)
	CreateCredential(w http.ResponseWriter, r *http.Request)
	// Endpoint to create a link
	// (POST /v1/credentials/links)
	CreateLink(w http.ResponseWriter, r *http.Request)
	// Create Link QR Code Callback
	// (POST /v1/credentials/links/callback)
	CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, params CreateLinkQrCodeCallbackParams)
	// Endpoint to delete a link
	// (DELETE /v1/credentials/links/{id})
	DeleteLink(w http.ResponseWriter, r *http.Request, id Id)
	// Endpoint to get a link
	// (GET /v1/credentials/links/{id})
	GetLink(w http.ResponseWriter, r *http.Request, id Id, params GetLinkParams)
	// Endpoint to activate|deactivate a link
	// (PATCH /v1/credentials/links/{id})
	AcivateLink(w http.ResponseWriter, r *http.Request, id Id)
	// Endpoint to create a link qr code
	// (POST /v1/credentials/links/{id}/qrcode)
	CrateLinkQrCode(w http.ResponseWriter, r *http.Request, id Id)
	// Revoke Credential
	// (POST /v1/credentials/revoke/{nonce})
	RevokeCredential(w http.ResponseWriter, r *http.Request, nonce PathNonce)
	// Delete Credential
	// (DELETE /v1/credentials/{id})
	DeleteCredential(w http.ResponseWriter, r *http.Request, id Id)
	// Get Credential
	// (GET /v1/credentials/{id})
	GetCredential(w http.ResponseWriter, r *http.Request, id Id)
	// Get Schemas
	// (GET /v1/schemas)
	GetSchemas(w http.ResponseWriter, r *http.Request, params GetSchemasParams)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(w http.ResponseWriter, r *http.Request)
	// Get Schema
	// (GET /v1/schemas/{id})
	GetSchema(w http.ResponseWriter, r *http.Request, id Id)
	// Endpoint to publish identity state
	// (POST /v1/state/publish)
	PublishState(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetYaml operation middleware
func (siw *ServerInterfaceWrapper) GetYaml(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetYaml(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthCallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCallback(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthQRCode operation middleware
func (siw *ServerInterfaceWrapper) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthQRCode(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConnections operation middleware
func (siw *ServerInterfaceWrapper) GetConnections(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConnectionsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "credentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "credentials", r.URL.Query(), &params.Credentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "credentials", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnections(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteConnectionParams

	// ------------- Optional query parameter "revokeCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "revokeCredentials", r.URL.Query(), &params.RevokeCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "revokeCredentials", Err: err})
		return
	}

	// ------------- Optional query parameter "deleteCredentials" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleteCredentials", r.URL.Query(), &params.DeleteCredentials)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deleteCredentials", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConnection operation middleware
func (siw *ServerInterfaceWrapper) GetConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConnection(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnectionCredentials(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RevokeConnectionCredentials operation middleware
func (siw *ServerInterfaceWrapper) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeConnectionCredentials(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredentials operation middleware
func (siw *ServerInterfaceWrapper) GetCredentials(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCredentialsParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredentials(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCredential(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLink operation middleware
func (siw *ServerInterfaceWrapper) CreateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLink(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLinkQrCodeCallback operation middleware
func (siw *ServerInterfaceWrapper) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateLinkQrCodeCallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	// ------------- Required query parameter "linkID" -------------

	if paramValue := r.URL.Query().Get("linkID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "linkID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "linkID", r.URL.Query(), &params.LinkID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "linkID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLinkQrCodeCallback(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinkParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, id, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AcivateLink operation middleware
func (siw *ServerInterfaceWrapper) AcivateLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AcivateLink(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CrateLinkQrCode operation middleware
func (siw *ServerInterfaceWrapper) CrateLinkQrCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CrateLinkQrCode(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RevokeCredential operation middleware
func (siw *ServerInterfaceWrapper) RevokeCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "nonce" -------------
	var nonce PathNonce

	err = runtime.BindStyledParameterWithLocation("simple", false, "nonce", runtime.ParamLocationPath, chi.URLParam(r, "nonce"), &nonce)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nonce", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RevokeCredential(w, r, nonce)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCredential operation middleware
func (siw *ServerInterfaceWrapper) DeleteCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCredential(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCredential operation middleware
func (siw *ServerInterfaceWrapper) GetCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCredential(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSchemas operation middleware
func (siw *ServerInterfaceWrapper) GetSchemas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchemasParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchemas(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ImportSchema operation middleware
func (siw *ServerInterfaceWrapper) ImportSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportSchema(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSchema operation middleware
func (siw *ServerInterfaceWrapper) GetSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchema(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishState operation middleware
func (siw *ServerInterfaceWrapper) PublishState(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishState(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetDocumentation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/static/docs/api_admin/api.yaml", wrapper.GetYaml)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/authentication/callback", wrapper.AuthCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/authentication/qrcode", wrapper.AuthQRCode)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/connections", wrapper.GetConnections)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/connections/{id}", wrapper.GetConnection)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/connections/{id}/credentials", wrapper.DeleteConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/connections/{id}/credentials/revoke", wrapper.RevokeConnectionCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials", wrapper.GetCredentials)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials", wrapper.CreateCredential)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links", wrapper.CreateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links/callback", wrapper.CreateLinkQrCodeCallback)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/credentials/links/{id}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/links/{id}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/v1/credentials/links/{id}", wrapper.AcivateLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/links/{id}/qrcode", wrapper.CrateLinkQrCode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials/revoke/{nonce}", wrapper.RevokeCredential)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/credentials/{id}", wrapper.DeleteCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/credentials/{id}", wrapper.GetCredential)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/schemas", wrapper.GetSchemas)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/schemas", wrapper.ImportSchema)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/schemas/{id}", wrapper.GetSchema)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/state/publish", wrapper.PublishState)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N401JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N422JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type GetDocumentationRequestObject struct {
}

type GetDocumentationResponseObject interface {
	VisitGetDocumentationResponse(w http.ResponseWriter) error
}

type GetDocumentation200Response struct {
}

func (response GetDocumentation200Response) VisitGetDocumentationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetYamlRequestObject struct {
}

type GetYamlResponseObject interface {
	VisitGetYamlResponse(w http.ResponseWriter) error
}

type GetYaml200Response struct {
}

func (response GetYaml200Response) VisitGetYamlResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallbackRequestObject struct {
	Params AuthCallbackParams
	Body   *AuthCallbackTextRequestBody
}

type AuthCallbackResponseObject interface {
	VisitAuthCallbackResponse(w http.ResponseWriter) error
}

type AuthCallback200Response struct {
}

func (response AuthCallback200Response) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthCallback400JSONResponse struct{ N400JSONResponse }

func (response AuthCallback400JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallback500JSONResponse struct{ N500JSONResponse }

func (response AuthCallback500JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCodeRequestObject struct {
}

type AuthQRCodeResponseObject interface {
	VisitAuthQRCodeResponse(w http.ResponseWriter) error
}

type AuthQRCode200JSONResponse AuthenticationQrCodeResponse

func (response AuthQRCode200JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCode500JSONResponse struct{ N500JSONResponse }

func (response AuthQRCode500JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionsRequestObject struct {
	Params GetConnectionsParams
}

type GetConnectionsResponseObject interface {
	VisitGetConnectionsResponse(w http.ResponseWriter) error
}

type GetConnections200JSONResponse GetConnectionsResponse

func (response GetConnections200JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections400JSONResponse struct{ N400JSONResponse }

func (response GetConnections400JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnections500JSONResponse struct{ N500JSONResponse }

func (response GetConnections500JSONResponse) VisitGetConnectionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Id     Id `json:"id"`
	Params DeleteConnectionParams
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection200JSONResponse GenericMessage

func (response DeleteConnection200JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection400JSONResponse struct{ N400JSONResponse }

func (response DeleteConnection400JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConnectionRequestObject struct {
	Id Id `json:"id"`
}

type GetConnectionResponseObject interface {
	VisitGetConnectionResponse(w http.ResponseWriter) error
}

type GetConnection200JSONResponse GetConnectionResponse

func (response GetConnection200JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection400JSONResponse struct{ N400JSONResponse }

func (response GetConnection400JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConnection500JSONResponse struct{ N500JSONResponse }

func (response GetConnection500JSONResponse) VisitGetConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentialsRequestObject struct {
	Id Id `json:"id"`
}

type DeleteConnectionCredentialsResponseObject interface {
	VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error
}

type DeleteConnectionCredentials200JSONResponse GenericMessage

func (response DeleteConnectionCredentials200JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnectionCredentials500JSONResponse) VisitDeleteConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentialsRequestObject struct {
	Id Id `json:"id"`
}

type RevokeConnectionCredentialsResponseObject interface {
	VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error
}

type RevokeConnectionCredentials202JSONResponse GenericMessage

func (response RevokeConnectionCredentials202JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials400JSONResponse struct{ N400JSONResponse }

func (response RevokeConnectionCredentials400JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RevokeConnectionCredentials500JSONResponse struct{ N500JSONResponse }

func (response RevokeConnectionCredentials500JSONResponse) VisitRevokeConnectionCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialsRequestObject struct {
	Params GetCredentialsParams
}

type GetCredentialsResponseObject interface {
	VisitGetCredentialsResponse(w http.ResponseWriter) error
}

type GetCredentials200JSONResponse []Credential

func (response GetCredentials200JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials400JSONResponse struct{ N400JSONResponse }

func (response GetCredentials400JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials404JSONResponse struct{ N404JSONResponse }

func (response GetCredentials404JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentials500JSONResponse struct{ N500JSONResponse }

func (response GetCredentials500JSONResponse) VisitGetCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredentialRequestObject struct {
	Body *CreateCredentialJSONRequestBody
}

type CreateCredentialResponseObject interface {
	VisitCreateCredentialResponse(w http.ResponseWriter) error
}

type CreateCredential201JSONResponse UUIDResponse

func (response CreateCredential201JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential400JSONResponse struct{ N400JSONResponse }

func (response CreateCredential400JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential401JSONResponse struct{ N401JSONResponse }

func (response CreateCredential401JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential422JSONResponse struct{ N422JSONResponse }

func (response CreateCredential422JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential500JSONResponse struct{ N500JSONResponse }

func (response CreateCredential500JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkRequestObject struct {
	Body *CreateLinkJSONRequestBody
}

type CreateLinkResponseObject interface {
	VisitCreateLinkResponse(w http.ResponseWriter) error
}

type CreateLink201JSONResponse UUIDResponse

func (response CreateLink201JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink400JSONResponse struct{ N400JSONResponse }

func (response CreateLink400JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLink500JSONResponse struct{ N500JSONResponse }

func (response CreateLink500JSONResponse) VisitCreateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallbackRequestObject struct {
	Params CreateLinkQrCodeCallbackParams
	Body   *CreateLinkQrCodeCallbackTextRequestBody
}

type CreateLinkQrCodeCallbackResponseObject interface {
	VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error
}

type CreateLinkQrCodeCallback200Response struct {
}

func (response CreateLinkQrCodeCallback200Response) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateLinkQrCodeCallback400JSONResponse struct{ N400JSONResponse }

func (response CreateLinkQrCodeCallback400JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLinkQrCodeCallback500JSONResponse struct{ N500JSONResponse }

func (response CreateLinkQrCodeCallback500JSONResponse) VisitCreateLinkQrCodeCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLinkRequestObject struct {
	Id Id `json:"id"`
}

type DeleteLinkResponseObject interface {
	VisitDeleteLinkResponse(w http.ResponseWriter) error
}

type DeleteLink200JSONResponse GenericMessage

func (response DeleteLink200JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink400JSONResponse struct{ N400JSONResponse }

func (response DeleteLink400JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLink500JSONResponse struct{ N500JSONResponse }

func (response DeleteLink500JSONResponse) VisitDeleteLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLinkRequestObject struct {
	Id     Id `json:"id"`
	Params GetLinkParams
}

type GetLinkResponseObject interface {
	VisitGetLinkResponse(w http.ResponseWriter) error
}

type GetLink200JSONResponse GetLinkQrCodeResponse

func (response GetLink200JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLink400JSONResponse struct{ N400JSONResponse }

func (response GetLink400JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetLink500JSONResponse struct{ N500JSONResponse }

func (response GetLink500JSONResponse) VisitGetLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLinkRequestObject struct {
	Id   Id `json:"id"`
	Body *AcivateLinkJSONRequestBody
}

type AcivateLinkResponseObject interface {
	VisitAcivateLinkResponse(w http.ResponseWriter) error
}

type AcivateLink200JSONResponse GenericMessage

func (response AcivateLink200JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLink400JSONResponse struct{ N400JSONResponse }

func (response AcivateLink400JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AcivateLink500JSONResponse struct{ N500JSONResponse }

func (response AcivateLink500JSONResponse) VisitAcivateLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CrateLinkQrCodeRequestObject struct {
	Id Id `json:"id"`
}

type CrateLinkQrCodeResponseObject interface {
	VisitCrateLinkQrCodeResponse(w http.ResponseWriter) error
}

type CrateLinkQrCode200JSONResponse CredentialLinkQrCodeResponse

func (response CrateLinkQrCode200JSONResponse) VisitCrateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CrateLinkQrCode400JSONResponse struct{ N400JSONResponse }

func (response CrateLinkQrCode400JSONResponse) VisitCrateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CrateLinkQrCode500JSONResponse struct{ N500JSONResponse }

func (response CrateLinkQrCode500JSONResponse) VisitCrateLinkQrCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredentialRequestObject struct {
	Nonce PathNonce `json:"nonce"`
}

type RevokeCredentialResponseObject interface {
	VisitRevokeCredentialResponse(w http.ResponseWriter) error
}

type RevokeCredential202JSONResponse RevokeCredentialResponse

func (response RevokeCredential202JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential401JSONResponse struct{ N401JSONResponse }

func (response RevokeCredential401JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential404JSONResponse struct{ N404JSONResponse }

func (response RevokeCredential404JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RevokeCredential500JSONResponse struct{ N500JSONResponse }

func (response RevokeCredential500JSONResponse) VisitRevokeCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredentialRequestObject struct {
	Id Id `json:"id"`
}

type DeleteCredentialResponseObject interface {
	VisitDeleteCredentialResponse(w http.ResponseWriter) error
}

type DeleteCredential200JSONResponse GenericMessage

func (response DeleteCredential200JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential400JSONResponse struct{ N400JSONResponse }

func (response DeleteCredential400JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential401JSONResponse struct{ N401JSONResponse }

func (response DeleteCredential401JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCredential500JSONResponse struct{ N500JSONResponse }

func (response DeleteCredential500JSONResponse) VisitDeleteCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCredentialRequestObject struct {
	Id Id `json:"id"`
}

type GetCredentialResponseObject interface {
	VisitGetCredentialResponse(w http.ResponseWriter) error
}

type GetCredential200JSONResponse Credential

func (response GetCredential200JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential400JSONResponse struct{ N400JSONResponse }

func (response GetCredential400JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCredential500JSONResponse struct{ N500JSONResponse }

func (response GetCredential500JSONResponse) VisitGetCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemasRequestObject struct {
	Params GetSchemasParams
}

type GetSchemasResponseObject interface {
	VisitGetSchemasResponse(w http.ResponseWriter) error
}

type GetSchemas200JSONResponse []Schema

func (response GetSchemas200JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas400JSONResponse struct{ N400JSONResponse }

func (response GetSchemas400JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemas500JSONResponse struct{ N500JSONResponse }

func (response GetSchemas500JSONResponse) VisitGetSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchemaRequestObject struct {
	Body *ImportSchemaJSONRequestBody
}

type ImportSchemaResponseObject interface {
	VisitImportSchemaResponse(w http.ResponseWriter) error
}

type ImportSchema201JSONResponse UUIDResponse

func (response ImportSchema201JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema400JSONResponse struct{ N400JSONResponse }

func (response ImportSchema400JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema500JSONResponse struct{ N500JSONResponse }

func (response ImportSchema500JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemaRequestObject struct {
	Id Id `json:"id"`
}

type GetSchemaResponseObject interface {
	VisitGetSchemaResponse(w http.ResponseWriter) error
}

type GetSchema200JSONResponse Schema

func (response GetSchema200JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema400JSONResponse struct{ N400JSONResponse }

func (response GetSchema400JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema404JSONResponse struct{ N404JSONResponse }

func (response GetSchema404JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema500JSONResponse struct{ N500JSONResponse }

func (response GetSchema500JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishStateRequestObject struct {
}

type PublishStateResponseObject interface {
	VisitPublishStateResponse(w http.ResponseWriter) error
}

type PublishState202JSONResponse PublishIdentityStateResponse

func (response PublishState202JSONResponse) VisitPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type PublishState500JSONResponse struct{ N500JSONResponse }

func (response PublishState500JSONResponse) VisitPublishStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(ctx context.Context, request GetDocumentationRequestObject) (GetDocumentationResponseObject, error)
	// Get the documentation yaml file
	// (GET /static/docs/api_admin/api.yaml)
	GetYaml(ctx context.Context, request GetYamlRequestObject) (GetYamlResponseObject, error)
	// Healthcheck
	// (GET /status)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Authentication Callback
	// (POST /v1/authentication/callback)
	AuthCallback(ctx context.Context, request AuthCallbackRequestObject) (AuthCallbackResponseObject, error)
	// Get Authentication QRCode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(ctx context.Context, request AuthQRCodeRequestObject) (AuthQRCodeResponseObject, error)
	// Get Connections
	// (GET /v1/connections)
	GetConnections(ctx context.Context, request GetConnectionsRequestObject) (GetConnectionsResponseObject, error)
	// Delete Connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Get Connection
	// (GET /v1/connections/{id})
	GetConnection(ctx context.Context, request GetConnectionRequestObject) (GetConnectionResponseObject, error)
	// Delete Connection Credentials
	// (DELETE /v1/connections/{id}/credentials)
	DeleteConnectionCredentials(ctx context.Context, request DeleteConnectionCredentialsRequestObject) (DeleteConnectionCredentialsResponseObject, error)
	// Revoke Connection Credentials
	// (POST /v1/connections/{id}/credentials/revoke)
	RevokeConnectionCredentials(ctx context.Context, request RevokeConnectionCredentialsRequestObject) (RevokeConnectionCredentialsResponseObject, error)
	// Get all credentials. Optional filter by status and text query search.
	// (GET /v1/credentials)
	GetCredentials(ctx context.Context, request GetCredentialsRequestObject) (GetCredentialsResponseObject, error)
	// Create Credential
	// (POST /v1/credentials)
	CreateCredential(ctx context.Context, request CreateCredentialRequestObject) (CreateCredentialResponseObject, error)
	// Endpoint to create a link
	// (POST /v1/credentials/links)
	CreateLink(ctx context.Context, request CreateLinkRequestObject) (CreateLinkResponseObject, error)
	// Create Link QR Code Callback
	// (POST /v1/credentials/links/callback)
	CreateLinkQrCodeCallback(ctx context.Context, request CreateLinkQrCodeCallbackRequestObject) (CreateLinkQrCodeCallbackResponseObject, error)
	// Endpoint to delete a link
	// (DELETE /v1/credentials/links/{id})
	DeleteLink(ctx context.Context, request DeleteLinkRequestObject) (DeleteLinkResponseObject, error)
	// Endpoint to get a link
	// (GET /v1/credentials/links/{id})
	GetLink(ctx context.Context, request GetLinkRequestObject) (GetLinkResponseObject, error)
	// Endpoint to activate|deactivate a link
	// (PATCH /v1/credentials/links/{id})
	AcivateLink(ctx context.Context, request AcivateLinkRequestObject) (AcivateLinkResponseObject, error)
	// Endpoint to create a link qr code
	// (POST /v1/credentials/links/{id}/qrcode)
	CrateLinkQrCode(ctx context.Context, request CrateLinkQrCodeRequestObject) (CrateLinkQrCodeResponseObject, error)
	// Revoke Credential
	// (POST /v1/credentials/revoke/{nonce})
	RevokeCredential(ctx context.Context, request RevokeCredentialRequestObject) (RevokeCredentialResponseObject, error)
	// Delete Credential
	// (DELETE /v1/credentials/{id})
	DeleteCredential(ctx context.Context, request DeleteCredentialRequestObject) (DeleteCredentialResponseObject, error)
	// Get Credential
	// (GET /v1/credentials/{id})
	GetCredential(ctx context.Context, request GetCredentialRequestObject) (GetCredentialResponseObject, error)
	// Get Schemas
	// (GET /v1/schemas)
	GetSchemas(ctx context.Context, request GetSchemasRequestObject) (GetSchemasResponseObject, error)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(ctx context.Context, request ImportSchemaRequestObject) (ImportSchemaResponseObject, error)
	// Get Schema
	// (GET /v1/schemas/{id})
	GetSchema(ctx context.Context, request GetSchemaRequestObject) (GetSchemaResponseObject, error)
	// Endpoint to publish identity state
	// (POST /v1/state/publish)
	PublishState(ctx context.Context, request PublishStateRequestObject) (PublishStateResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDocumentation operation middleware
func (sh *strictHandler) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	var request GetDocumentationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentation(ctx, request.(GetDocumentationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentationResponseObject); ok {
		if err := validResponse.VisitGetDocumentationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetYaml operation middleware
func (sh *strictHandler) GetYaml(w http.ResponseWriter, r *http.Request) {
	var request GetYamlRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetYaml(ctx, request.(GetYamlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetYaml")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetYamlResponseObject); ok {
		if err := validResponse.VisitGetYamlResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthCallback operation middleware
func (sh *strictHandler) AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams) {
	var request AuthCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AuthCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthCallback(ctx, request.(AuthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthCallbackResponseObject); ok {
		if err := validResponse.VisitAuthCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthQRCode operation middleware
func (sh *strictHandler) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	var request AuthQRCodeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthQRCode(ctx, request.(AuthQRCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthQRCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthQRCodeResponseObject); ok {
		if err := validResponse.VisitAuthQRCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConnections operation middleware
func (sh *strictHandler) GetConnections(w http.ResponseWriter, r *http.Request, params GetConnectionsParams) {
	var request GetConnectionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnections(ctx, request.(GetConnectionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnections")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionsResponseObject); ok {
		if err := validResponse.VisitGetConnectionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, id Id, params DeleteConnectionParams) {
	var request DeleteConnectionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConnection operation middleware
func (sh *strictHandler) GetConnection(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConnection(ctx, request.(GetConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConnectionResponseObject); ok {
		if err := validResponse.VisitGetConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteConnectionCredentials operation middleware
func (sh *strictHandler) DeleteConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteConnectionCredentialsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnectionCredentials(ctx, request.(DeleteConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RevokeConnectionCredentials operation middleware
func (sh *strictHandler) RevokeConnectionCredentials(w http.ResponseWriter, r *http.Request, id Id) {
	var request RevokeConnectionCredentialsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeConnectionCredentials(ctx, request.(RevokeConnectionCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeConnectionCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeConnectionCredentialsResponseObject); ok {
		if err := validResponse.VisitRevokeConnectionCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetCredentials operation middleware
func (sh *strictHandler) GetCredentials(w http.ResponseWriter, r *http.Request, params GetCredentialsParams) {
	var request GetCredentialsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredentials(ctx, request.(GetCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredentials")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialsResponseObject); ok {
		if err := validResponse.VisitGetCredentialsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateCredential operation middleware
func (sh *strictHandler) CreateCredential(w http.ResponseWriter, r *http.Request) {
	var request CreateCredentialRequestObject

	var body CreateCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCredential(ctx, request.(CreateCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCredentialResponseObject); ok {
		if err := validResponse.VisitCreateCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateLink operation middleware
func (sh *strictHandler) CreateLink(w http.ResponseWriter, r *http.Request) {
	var request CreateLinkRequestObject

	var body CreateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLink(ctx, request.(CreateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkResponseObject); ok {
		if err := validResponse.VisitCreateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateLinkQrCodeCallback operation middleware
func (sh *strictHandler) CreateLinkQrCodeCallback(w http.ResponseWriter, r *http.Request, params CreateLinkQrCodeCallbackParams) {
	var request CreateLinkQrCodeCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := CreateLinkQrCodeCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLinkQrCodeCallback(ctx, request.(CreateLinkQrCodeCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLinkQrCodeCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLinkQrCodeCallbackResponseObject); ok {
		if err := validResponse.VisitCreateLinkQrCodeCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteLink operation middleware
func (sh *strictHandler) DeleteLink(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteLinkRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLink(ctx, request.(DeleteLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLinkResponseObject); ok {
		if err := validResponse.VisitDeleteLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetLink operation middleware
func (sh *strictHandler) GetLink(w http.ResponseWriter, r *http.Request, id Id, params GetLinkParams) {
	var request GetLinkRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLink(ctx, request.(GetLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLinkResponseObject); ok {
		if err := validResponse.VisitGetLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AcivateLink operation middleware
func (sh *strictHandler) AcivateLink(w http.ResponseWriter, r *http.Request, id Id) {
	var request AcivateLinkRequestObject

	request.Id = id

	var body AcivateLinkJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AcivateLink(ctx, request.(AcivateLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AcivateLink")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AcivateLinkResponseObject); ok {
		if err := validResponse.VisitAcivateLinkResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CrateLinkQrCode operation middleware
func (sh *strictHandler) CrateLinkQrCode(w http.ResponseWriter, r *http.Request, id Id) {
	var request CrateLinkQrCodeRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CrateLinkQrCode(ctx, request.(CrateLinkQrCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CrateLinkQrCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CrateLinkQrCodeResponseObject); ok {
		if err := validResponse.VisitCrateLinkQrCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// RevokeCredential operation middleware
func (sh *strictHandler) RevokeCredential(w http.ResponseWriter, r *http.Request, nonce PathNonce) {
	var request RevokeCredentialRequestObject

	request.Nonce = nonce

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RevokeCredential(ctx, request.(RevokeCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RevokeCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RevokeCredentialResponseObject); ok {
		if err := validResponse.VisitRevokeCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteCredential operation middleware
func (sh *strictHandler) DeleteCredential(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteCredentialRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCredential(ctx, request.(DeleteCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCredentialResponseObject); ok {
		if err := validResponse.VisitDeleteCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetCredential operation middleware
func (sh *strictHandler) GetCredential(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetCredentialRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCredential(ctx, request.(GetCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCredentialResponseObject); ok {
		if err := validResponse.VisitGetCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSchemas operation middleware
func (sh *strictHandler) GetSchemas(w http.ResponseWriter, r *http.Request, params GetSchemasParams) {
	var request GetSchemasRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchemas(ctx, request.(GetSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemasResponseObject); ok {
		if err := validResponse.VisitGetSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ImportSchema operation middleware
func (sh *strictHandler) ImportSchema(w http.ResponseWriter, r *http.Request) {
	var request ImportSchemaRequestObject

	var body ImportSchemaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportSchema(ctx, request.(ImportSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportSchemaResponseObject); ok {
		if err := validResponse.VisitImportSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSchema operation middleware
func (sh *strictHandler) GetSchema(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetSchemaRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchema(ctx, request.(GetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemaResponseObject); ok {
		if err := validResponse.VisitGetSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PublishState operation middleware
func (sh *strictHandler) PublishState(w http.ResponseWriter, r *http.Request) {
	var request PublishStateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishState(ctx, request.(PublishStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishStateResponseObject); ok {
		if err := validResponse.VisitPublishStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x8aXPbOJ73V0FxnlfPiBIviaSqprYcO4fTSSex49pOMq4dEAQlxBRBk6ATJaPvvoVD",
	"4i3RTpxW12y/SNskCPyP3/8E4O8aoquUJjhhuTb/rqUwgyvMcCZ+IyH/N8Q5ykjKCE20uXZ1dX4GdsNG",
	"AI8Xc+DhMPRM09KRY05108ShHhj2TA9xgG0XmygIZ/9MtJFG+BQpZEttpCVwhbU5X2SkZfi2IBkOtTnL",
	"CjzScrTEK8hXZ+uUj8pZRpKFNtK+6guqq4dFQcIxJ6j6XCerlGaMf6tW4MO0kVx2ri0IWxbBGNHVZEHp",
	"IsYT8X6z2Yy0mCQ352dtpi9xnhOagPMzxa8fWr4XQd2cwpnuQDPUYWDaemgaM9+ZuRiHYcnvbYGzdcmw",
	"WuRomOZDfqcJwm2+T2NIViDhL5WmHdOznJntunafPsXovdxFNFtBxlWfsJmjjbbskoThBc40TlQuJf7o",
	"yijXORJ9bDgdeUqTHAsbdAyD/w/RhOFETAjTNCYIcmlMPudcJN8rpP6/DEfaXPvbpDTsiXybT57jBGcE",
	"Pc0ymr3GeQ4XWEKgLuAnMAQX+LbAOdM2I80xzF9NwVUCC7akGfmGQ0mC86tJeJowwtYgoQxEtEgkGZb1",
	"6yWRZhTx90GMwalaeTPSpr8eF+cJw1kCY3CJszucAczHS2uVE/F1Tgq2xAlThLzLTmmILxSgRYTJaIoz",
	"RiS6Axqu208RjOMAopurLOa/4q9wlcbciJaMpfl8MrmDMQmvLl5N7swJrC042X77XzvL/scQB1F6IWXk",
	"wg6hEmNJQX21rq9yRFNc++jT9UgjDK84b5vdFzDL4FqT9r71O59qrO8o2E56vfuYBp8xEjiIMrqqkxiS",
	"cJ7SeL2gSfnTfFWsAkjm1u2z9O0Lym5mdA3/MCOUpe+evXeevE5WC+9D/u3qy9cPDNLnFHfxJhOCcqnI",
	"RTMURr7uuR7WHQPZuudHpu5Ng8iMAs/wZtOuedjyp820ThsKqlgBCXFiI7pa6WkMSaJ/zrtVJh90AU3M",
	"oPMpikTNOiZ0svVOchlzbEwy5S9bszf0SxTStgOVLEbSEpQ6u/R8mmHI8GmGQw4/GG8ddJXs7xravb9U",
	"lr9jJYNfxjLsFDnOlN8QEUgwOUE81uvSkvU7imAwWUGS7JwEF97ktw+nJ4sKFfqdPVZSrSxdSKq5fZOM",
	"LUO41uam788Mx3JGWkhRscIJey9YtCSqtO8RiWPwhbAlCEm44SzjrynJpJ3NLcOays9X7G1GabQL0mSR",
	"QFZkuPZUia9JLp+14WpaAuuK9nTF7Tdla20ewTjHmx5261rr+bLK1oBkqMLxboGA0hjDRLibBv9dY7b4",
	"HsBY0x01xbODbZv/ftS+IslNBa91DUDGMhIUTP629ZN741VlvpPd1wJOLfc60gSu+RdPa3Ivbd0yLEs3",
	"PN1035vW3LHntjV2rY/cGLe6CSHDOiOrTqdY6vMMMtyee2JaE8toTtc1U0y4OkKRdecVhW2x0AOo/fgQ",
	"MpN59PA0tmOVw0BrYGe3cuvbkuRRVf09ANra7gHkVLzgcK9zIFaenZ39tqKOPXv68fnpk5O7m9uPn0/O",
	"PtDfL17m326eu1fr1Ud8+uKdttfjDPIKSFhKeMJaALJ1w9Yt471pzqfO3DDHpmlY/vTvhjk3jPuhFNej",
	"bs1XVjAjx+YdtEx/Ci3N4D+kfdCa5zGrMBElaMSxUsfWJ+3Jy5eXWzRbhmVqleSuL7MonVGG73al9m5S",
	"y7RnhjG1bKMiwKI/HmT4jt40VClgNOq1/xcwX9ZljvzAsl3Dds3AjaAX2CEMLDgNoGcGM8/2ulNbPtf7",
	"3mzpZ6QYehxObtZom1jocfi3lk0NSrIqGqxaV2kJNdnUmKvoqeagStHvd1U82hyqfEieFzg7FOnOxaiz",
	"ShlW61JV0t5gGk7DINIhhFAPgiDQA9+z9cjxYIThzMFGZ/58K8g8RMbeoq7ZrflRojYdsu2qUFsiXZUv",
	"Shou6QqzJUkWYAnTFCcHwbOd5bqfjCEU/Mgi7JQmCUZc1v0AOhAweDZjzE2PO2nHMFzLuqeTLhO84YlZ",
	"Z9yTzq8n7DVDgRtF0YNCQdfcwniaoHys8riHCO4J70nC649Z9CT/o3j+7P2Xy9ub2w83xPW+PbNTbN6x",
	"P+jtC2d98SqP8mEkdPlGRVRFRHUXWdX9QYjmVYwOgkk3wjvC5XPMSl9agmu34jYU1S2j1rU6qjjVxjty",
	"feQjw9E95Hu6Y0SWDl1o6FOMYRAZXujZs4fruSqJHj0OiVXDgkTnZNuqLGeQFXnDDGiCwb9BipNQcjUo",
	"EHQs8oSG624oNJxYZ0tuOFN9COxAbjGodbnAyeGWUSFagQNMskf6vU3XeytzJ+f/6zsyei/m37LTW/O/",
	"z1KyYrf5s7c3afDkw7fFt7PgpUfsNPHvXpy9Wj+b2f8xLU4hwS4cv8AwZqJWgWFI+OIwfluDb19/60CB",
	"fS5qQdnG6m1G9VU4dxAhkghZnPLREZdUJ1R7Df+x+69DnEiFvS7Zt6uNdmwleRrD9e+inK6yuVoDVdJ0",
	"NbbogralMp9MVms9LYKYIJ0PmfB/xp/TgbGgvw3I0RPHbyJt/qnJQNKifNct6iD8DsbFA1unYqHtDG1p",
	"X29G2lvOer48F8pk60sGWS0KVxv7oif4PsP4glKeu9szw4OGG5qhM536rmNMHWM2DWem7QWBg2e2AyPo",
	"Qn82jSzfN/3ICY3I8R0cQCPyTaSKWWnwlXmNH/yPz0spexPx+XJtrk3tYIoNzwtM5NuBhaHjOl6ALH/m",
	"+MhE4SwwIsd1/AAGduTPQiv0IwNC5GEYmIHpazJ5EH2i0AijwAzcAPmmgW3HxVEQQNty8Mxw7KnvmVPk",
	"GMF0FrguNn0zCiEyceBGrmuYYir2lSfjmvHVmUIcGa5teFNnZsyCyMfQRjAIoGdMHTOCdohmpmfbyIWG",
	"F8yQa1mha1vO1IwwdGYdWwkNFX3v2lFsS7xrWFWAHe+VPLr6TV+7Or2d1nMhWhnVDaW+9K+zru7L2oaY",
	"xr7qt9yGaSQtZHGe1Gtde2zPZubUsWzfMHzTd6b477Y3Grx/c6jf6s4Nc27b4+nMMU3/PuVzz5rLVhfO",
	"9CLbcE0H2lM4DQPPQ9ByXMtDBpraYRQOLnUfrazoSh1++3B6SouEZes30QXOefxC++qevtL4OELl4Gpq",
	"KRuFCokjFVPL/TCFpy5UX12dn+3pBf7CorBNnejfoSLjEYgLUNkbzAk6KWQqJgQrYiV/Wi7NFSZPipAk",
	"ou2jWmdq00W4PBDRDLAlBjLNADq4Ogcnb8/F2SxGmGD9rcycwfkZ0JsDeTTFWS6nNsbm2OCipSlOYEp4",
	"SBSPZHdf8DDh/yywMHEub0HGeajNebVUo01rnLqy5OmaOjd5gRDOcwCTEGSYFVmSC37CGpckAS/ev34F",
	"lJsQ4i1WK5it5brtT4TqiDpcI3dl+FcT7uYJmoQU5ROYkv+B4Yok/KfxGq7ifbx94O9/Kkt8xnuwBNZi",
	"PInxPuZkQ6CTCVUGdPPwUw49qRU6zjmdxDHIcXZHEM4BzDDIiiRRAVYdu+qaeEfphA+qC0kuhpYY3Yg3",
	"ew4uCfdAZXHSoKv2Adh9MGrIjo87LV9Wz/R+6ia9HDIpW/mba+k8cM6eqI5BRfAMf2UTUXPWRV56sc9f",
	"vumM3nS23DfN05abIWilN/Iw4AAV8EEPV1dD0hVhMrjgYhTnwLTrHlXeZkj1yxS29+pRje7S4ruLU/nq",
	"0axg/85O2zakCh4oVu4qGszvOOwWLCq7zL3iXGAGquNGbX94WnvdMIj6bO8KnK2BBCpgFIQUREUcA453",
	"kGOYoSX3h5UFxz1Hi7e/9h0j3mxGzcUrTb5/cKvgBJAExUWIhY8tVwWVoX0EVFuGHWSU5zauHxFgPVsF",
	"vdB6POtWOY7QeSW7+XTN+a+DtI6XLTTLp50AnXwn4UbCM8as4zS9fF5RYguqZ2LEaXXA/bw3CbU2qi4x",
	"A1mj2ss5tATESATWtABfYML4MzlQoq0ymkYNAPaeqG+ttB97ndRKSQ2gVon04dS2VvozLaW2uXy8FiJR",
	"Cmow7bSR0RCHvd9fP8gCfpk/+8u5s3t6s0lj/2ywZwP12LPfy9Wt79jUPcwof42hgbqoOlRZOzE5SK8T",
	"6bD7yw4VEQYqV7UVH1G51i9U7glCOGXbS0h/silL0f4MONStutNJX4huAIA89W1EV7aEDKwgQ0ssuwUR",
	"iZnY+Gk78n3ab8R9oRTAQ+78nwkA/x/8C8bxv4AORD0uVTYGZziCRcyA2Ffh6YAI6OWNVEBycWkrzXCO",
	"E6ZmUuf2+GxvknitspxwO60apU4G7kap38tRPUmEagFWiuCkWIliJo4rhwbLo4fXo8O1wIBC5MGFx496",
	"zB89DNZhaa9IznjeVsXmPY1O3RI8NNZ51FjLDaZam4E3qdzEVlYCAq5UyArZdBPalBCWOh1XDblqu6Me",
	"9/w0CVNKZDosm9AAglozvm6VzYtE2r4uz8N9a999pUG9n5934bTWeO+AnbzhrJr39wecOWSsWbk7emCs",
	"ZT0aOKVC6sjoBFo7SExiktzk1QyhC1KvSHLzqGCqXiM6Mhhx0h6KokfRdqdXiKWGtlp/JbTar/ABLWkF",
	"KsH+uwtwSkNc7Zb2wUQdp/sJPerRwcHqtPx/cDf7gJJ6Oq8tNLTbW11lnfICf7UqTghHcnZ8BqzK614D",
	"HvVuBD5YG6N7bxQ9Xr+l44jyX02DC54Z9qsv5cVUW4EniNzBHzWph0Xjxk1LxMgdHnB3sHHeQH3XceZg",
	"qMv8leZfpOFRxm8hRcjwv0O8/fEBwVz0fcqdyb5Mrhahj86R771j16dXyTRYcBQcf4IGbjOA6nuie3Qr",
	"ewuT7+KvLm36E7XqcqqhByt1al8brzrgfkgo/6rUo7bwek8xHmzm3aN0+7P7CtvG30NKt0Obkp15xp72",
	"wVljw+wvmOvJmv+BqcJ9gPOomwIHwdCz+/Ycs4rhgxAzSOJ8f/P2iOPAsW+9DbXZyp/Q6kvmL9WQn3OC",
	"JS/77bIVWV50Hx93Y1kdER/QVFZ7CojGsdoQORZclLrcgmL7pNrprUOgeoPpkRptXZekjqzVpnQq/7TH",
	"kSRzUmzg5eWb35VddSq2buq70Lzf3o/O927Nr181iTwo/AB7O4otnMvDGmSQ4Ukqr2/1V1Pqfpe416U9",
	"YhK89x5Zh57UeLEPhYE6A85jxPoHuozVRFJJBhBFkVypKlHx+/VGqia7645krygScVNcFNleGYz5wyXN",
	"2dw2DEtAXc3aak7v3D6gEcCKvhxkOOZlICd0K7Iyxu2etHdkB8xXC/dqxto+6APmfE0DeY5ezXeykH8C",
	"9CHk1c41bukrjwtsrjf/GwAA//9V6lM1EloAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
