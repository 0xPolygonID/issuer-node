// Package api_admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api_admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// AuthenticationQrCodeResponse defines model for AuthenticationQrCodeResponse.
type AuthenticationQrCodeResponse struct {
	Body struct {
		CallbackUrl string        `json:"callbackUrl"`
		Reason      string        `json:"reason"`
		Scope       []interface{} `json:"scope"`
	} `json:"body"`
	From string `json:"from"`
	Id   string `json:"id"`
	Thid string `json:"thid"`
	Typ  string `json:"typ"`
	Type string `json:"type"`
}

// CreateCredentialRequest defines model for CreateCredentialRequest.
type CreateCredentialRequest struct {
	CredentialSchema  string                 `json:"credentialSchema"`
	CredentialSubject map[string]interface{} `json:"credentialSubject"`
	Expiration        *int64                 `json:"expiration,omitempty"`
	Type              string                 `json:"type"`
}

// CreateCredentialResponse defines model for CreateCredentialResponse.
type CreateCredentialResponse struct {
	Id string `json:"id"`
}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// GenericMessage defines model for GenericMessage.
type GenericMessage struct {
	Message string `json:"message"`
}

// Health defines model for Health.
type Health map[string]bool

// ImportSchemaRequest defines model for ImportSchemaRequest.
type ImportSchemaRequest struct {
	SchemaType string `json:"schemaType"`
	Url        string `json:"url"`
}

// Schema defines model for Schema.
type Schema struct {
	BigInt    string    `json:"bigInt"`
	CreatedAt time.Time `json:"createdAt"`
	Hash      string    `json:"hash"`
	Id        string    `json:"id"`
	Type      string    `json:"type"`
	Url       string    `json:"url"`
}

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Id string `json:"id"`
}

// Id defines model for id.
type Id = uuid.UUID

// SessionID defines model for sessionID.
type SessionID = string

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N401 defines model for 401.
type N401 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N422 defines model for 422.
type N422 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// AuthCallbackTextBody defines parameters for AuthCallback.
type AuthCallbackTextBody = string

// AuthCallbackParams defines parameters for AuthCallback.
type AuthCallbackParams struct {
	// SessionID Session ID
	SessionID *SessionID `form:"sessionID,omitempty" json:"sessionID,omitempty"`
}

// AuthCallbackTextRequestBody defines body for AuthCallback for text/plain ContentType.
type AuthCallbackTextRequestBody = AuthCallbackTextBody

// CreateCredentialJSONRequestBody defines body for CreateCredential for application/json ContentType.
type CreateCredentialJSONRequestBody = CreateCredentialRequest

// ImportSchemaJSONRequestBody defines body for ImportSchema for application/json ContentType.
type ImportSchemaJSONRequestBody = ImportSchemaRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(w http.ResponseWriter, r *http.Request)
	// Get the documentation yaml file
	// (GET /static/docs/api_admin/api.yaml)
	GetYaml(w http.ResponseWriter, r *http.Request)
	// Healthcheck
	// (GET /status)
	Health(w http.ResponseWriter, r *http.Request)
	// authentication callback
	// (POST /v1/authentication/callback)
	AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams)
	// get authentication qrcode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(w http.ResponseWriter, r *http.Request)
	// delete connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(w http.ResponseWriter, r *http.Request, id Id)
	// Create a Credential
	// (POST /v1/credentials)
	CreateCredential(w http.ResponseWriter, r *http.Request)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(w http.ResponseWriter, r *http.Request)
	// Retrieves schema with this id
	// (GET /v1/schemas/{id})
	GetSchema(w http.ResponseWriter, r *http.Request, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetYaml operation middleware
func (siw *ServerInterfaceWrapper) GetYaml(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetYaml(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthCallbackParams

	// ------------- Optional query parameter "sessionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCallback(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AuthQRCode operation middleware
func (siw *ServerInterfaceWrapper) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthQRCode(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteConnection operation middleware
func (siw *ServerInterfaceWrapper) DeleteConnection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteConnection(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCredential operation middleware
func (siw *ServerInterfaceWrapper) CreateCredential(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCredential(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ImportSchema operation middleware
func (siw *ServerInterfaceWrapper) ImportSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ImportSchema(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSchema operation middleware
func (siw *ServerInterfaceWrapper) GetSchema(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchema(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetDocumentation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/static/docs/api_admin/api.yaml", wrapper.GetYaml)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/authentication/callback", wrapper.AuthCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/authentication/qrcode", wrapper.AuthQRCode)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/connections/{id}", wrapper.DeleteConnection)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/credentials", wrapper.CreateCredential)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/schemas", wrapper.ImportSchema)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/schemas/{id}", wrapper.GetSchema)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N401JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N422JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type GetDocumentationRequestObject struct {
}

type GetDocumentationResponseObject interface {
	VisitGetDocumentationResponse(w http.ResponseWriter) error
}

type GetDocumentation200Response struct {
}

func (response GetDocumentation200Response) VisitGetDocumentationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetYamlRequestObject struct {
}

type GetYamlResponseObject interface {
	VisitGetYamlResponse(w http.ResponseWriter) error
}

type GetYaml200Response struct {
}

func (response GetYaml200Response) VisitGetYamlResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallbackRequestObject struct {
	Params AuthCallbackParams
	Body   *AuthCallbackTextRequestBody
}

type AuthCallbackResponseObject interface {
	VisitAuthCallbackResponse(w http.ResponseWriter) error
}

type AuthCallback200Response struct {
}

func (response AuthCallback200Response) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AuthCallback400JSONResponse struct{ N400JSONResponse }

func (response AuthCallback400JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AuthCallback500JSONResponse struct{ N500JSONResponse }

func (response AuthCallback500JSONResponse) VisitAuthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCodeRequestObject struct {
}

type AuthQRCodeResponseObject interface {
	VisitAuthQRCodeResponse(w http.ResponseWriter) error
}

type AuthQRCode200JSONResponse AuthenticationQrCodeResponse

func (response AuthQRCode200JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthQRCode500JSONResponse struct{ N500JSONResponse }

func (response AuthQRCode500JSONResponse) VisitAuthQRCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnectionRequestObject struct {
	Id Id `json:"id"`
}

type DeleteConnectionResponseObject interface {
	VisitDeleteConnectionResponse(w http.ResponseWriter) error
}

type DeleteConnection200JSONResponse GenericMessage

func (response DeleteConnection200JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection400JSONResponse struct{ N400JSONResponse }

func (response DeleteConnection400JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteConnection500JSONResponse struct{ N500JSONResponse }

func (response DeleteConnection500JSONResponse) VisitDeleteConnectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredentialRequestObject struct {
	Body *CreateCredentialJSONRequestBody
}

type CreateCredentialResponseObject interface {
	VisitCreateCredentialResponse(w http.ResponseWriter) error
}

type CreateCredential201JSONResponse CreateCredentialResponse

func (response CreateCredential201JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential400JSONResponse struct{ N400JSONResponse }

func (response CreateCredential400JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential401JSONResponse struct{ N401JSONResponse }

func (response CreateCredential401JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential422JSONResponse struct{ N422JSONResponse }

func (response CreateCredential422JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateCredential500JSONResponse struct{ N500JSONResponse }

func (response CreateCredential500JSONResponse) VisitCreateCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchemaRequestObject struct {
	Body *ImportSchemaJSONRequestBody
}

type ImportSchemaResponseObject interface {
	VisitImportSchemaResponse(w http.ResponseWriter) error
}

type ImportSchema201JSONResponse UUIDResponse

func (response ImportSchema201JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema400JSONResponse struct{ N400JSONResponse }

func (response ImportSchema400JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportSchema500JSONResponse struct{ N500JSONResponse }

func (response ImportSchema500JSONResponse) VisitImportSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchemaRequestObject struct {
	Id Id `json:"id"`
}

type GetSchemaResponseObject interface {
	VisitGetSchemaResponse(w http.ResponseWriter) error
}

type GetSchema200JSONResponse Schema

func (response GetSchema200JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema400JSONResponse struct{ N400JSONResponse }

func (response GetSchema400JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema404JSONResponse struct{ N404JSONResponse }

func (response GetSchema404JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSchema500JSONResponse struct{ N500JSONResponse }

func (response GetSchema500JSONResponse) VisitGetSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(ctx context.Context, request GetDocumentationRequestObject) (GetDocumentationResponseObject, error)
	// Get the documentation yaml file
	// (GET /static/docs/api_admin/api.yaml)
	GetYaml(ctx context.Context, request GetYamlRequestObject) (GetYamlResponseObject, error)
	// Healthcheck
	// (GET /status)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// authentication callback
	// (POST /v1/authentication/callback)
	AuthCallback(ctx context.Context, request AuthCallbackRequestObject) (AuthCallbackResponseObject, error)
	// get authentication qrcode
	// (GET /v1/authentication/qrcode)
	AuthQRCode(ctx context.Context, request AuthQRCodeRequestObject) (AuthQRCodeResponseObject, error)
	// delete connection
	// (DELETE /v1/connections/{id})
	DeleteConnection(ctx context.Context, request DeleteConnectionRequestObject) (DeleteConnectionResponseObject, error)
	// Create a Credential
	// (POST /v1/credentials)
	CreateCredential(ctx context.Context, request CreateCredentialRequestObject) (CreateCredentialResponseObject, error)
	// Import JSON schema
	// (POST /v1/schemas)
	ImportSchema(ctx context.Context, request ImportSchemaRequestObject) (ImportSchemaResponseObject, error)
	// Retrieves schema with this id
	// (GET /v1/schemas/{id})
	GetSchema(ctx context.Context, request GetSchemaRequestObject) (GetSchemaResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDocumentation operation middleware
func (sh *strictHandler) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	var request GetDocumentationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentation(ctx, request.(GetDocumentationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentationResponseObject); ok {
		if err := validResponse.VisitGetDocumentationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetYaml operation middleware
func (sh *strictHandler) GetYaml(w http.ResponseWriter, r *http.Request) {
	var request GetYamlRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetYaml(ctx, request.(GetYamlRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetYaml")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetYamlResponseObject); ok {
		if err := validResponse.VisitGetYamlResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthCallback operation middleware
func (sh *strictHandler) AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams) {
	var request AuthCallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := AuthCallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthCallback(ctx, request.(AuthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthCallbackResponseObject); ok {
		if err := validResponse.VisitAuthCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// AuthQRCode operation middleware
func (sh *strictHandler) AuthQRCode(w http.ResponseWriter, r *http.Request) {
	var request AuthQRCodeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AuthQRCode(ctx, request.(AuthQRCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthQRCode")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AuthQRCodeResponseObject); ok {
		if err := validResponse.VisitAuthQRCodeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteConnection operation middleware
func (sh *strictHandler) DeleteConnection(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteConnectionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteConnection(ctx, request.(DeleteConnectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteConnection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteConnectionResponseObject); ok {
		if err := validResponse.VisitDeleteConnectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateCredential operation middleware
func (sh *strictHandler) CreateCredential(w http.ResponseWriter, r *http.Request) {
	var request CreateCredentialRequestObject

	var body CreateCredentialJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCredential(ctx, request.(CreateCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCredential")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCredentialResponseObject); ok {
		if err := validResponse.VisitCreateCredentialResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ImportSchema operation middleware
func (sh *strictHandler) ImportSchema(w http.ResponseWriter, r *http.Request) {
	var request ImportSchemaRequestObject

	var body ImportSchemaJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ImportSchema(ctx, request.(ImportSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ImportSchemaResponseObject); ok {
		if err := validResponse.VisitImportSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetSchema operation middleware
func (sh *strictHandler) GetSchema(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetSchemaRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchema(ctx, request.(GetSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchema")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchemaResponseObject); ok {
		if err := validResponse.VisitGetSchemaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
