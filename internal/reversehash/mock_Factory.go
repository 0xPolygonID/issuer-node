// Code generated by mockery v2.44.1. DO NOT EDIT.

package reversehash

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	kms "github.com/polygonid/sh-id-platform/internal/kms"
)

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

// BuildPublishers provides a mock function with given fields: ctx, resolverPrefix, kmsKey
func (_m *MockFactory) BuildPublishers(ctx context.Context, resolverPrefix string, kmsKey *kms.KeyID) ([]RhsPublisher, error) {
	ret := _m.Called(ctx, resolverPrefix, kmsKey)

	if len(ret) == 0 {
		panic("no return value specified for BuildPublishers")
	}

	var r0 []RhsPublisher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *kms.KeyID) ([]RhsPublisher, error)); ok {
		return rf(ctx, resolverPrefix, kmsKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *kms.KeyID) []RhsPublisher); ok {
		r0 = rf(ctx, resolverPrefix, kmsKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RhsPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *kms.KeyID) error); ok {
		r1 = rf(ctx, resolverPrefix, kmsKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
