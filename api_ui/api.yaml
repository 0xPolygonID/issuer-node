openapi: 3.1.0
info:
  title: Polygon ID - Issuer - UI API
  description: |
    Documentation for the Issuer - UI API
  version: "1"

servers:
  - description: Local
    url: http://localhost:3002

tags:
  - name: Credential
    description: Collection of endpoints related to Credential
  - name: Schemas
    description: Collection of endpoints related to Schemas
  - name: Auth
    description: Collection of endpoints related to Authentication
  - name: Connection
    description: Collection of endpoints related to Connections
  - name: Links
    description: Collection of endpoints related to Links
  - name: Agent
    description: Collection of endpoints related to Mobile

paths:
  /config:
    get:
      summary: Get Config
      operationId: GetConfig
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: Config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '500':
          $ref: '#/components/responses/500'

  #authentication
  /v1/authentication/qrcode:
    get:
      summary: Get Connection QRCode
      operationId: authQRCode
      description: Authentication qrcode
      tags:
        - Auth
        - Connection
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationQrCodeResponse'
        '500':
          $ref: '#/components/responses/500'

  /v1/authentication/callback:
    post:
      summary: Authentication Callback
      operationId: authCallback
      description: Authentication callback
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/sessionID'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: ok
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  #connections:
  /v1/connections/{id}:
    get:
      summary: Get Connection
      operationId: getConnection
      description: get connection
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectionResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete Connection
      operationId: deleteConnection
      description: delete connection
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
        - name: revokeCredentials
          in: query
          required: false
          description: |
            Set revokeCredentials to true if you want to revoke the credentials of the connection
          schema:
            type: boolean
        - name: deleteCredentials
          in: query
          required: false
          description: |
            Set deleteCredentials to true if you want to delete the credentials of the connection
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/connections/{id}/credentials:
    delete:
      summary: Delete Connection Credentials
      operationId: deleteConnectionCredentials
      description: delete connection credentials
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '500':
          $ref: '#/components/responses/500'

  /v1/connections:
    get:
      summary: Get Connections
      operationId: getConnections
      description: get connections
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in connections.
        - in: query
          name: credentials
          schema:
            type: boolean
          description: credentials=true to include the connection credentials.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectionsResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/connections/{id}/credentials/revoke:
    post:
      summary: Revoke Connection Credentials
      operationId: revokeConnectionCredentials
      description: revoke connection credentials
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  #credentials:
  /v1/credentials:
    post:
      summary: Create Credential
      operationId: CreateCredential
      description: Endpoint to create a Credential
      tags:
        - Credential
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredentialRequest'
      responses:
        '201':
          description: Claim created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Credentials
      operationId: GetCredentials
      description: |
        Return all the credentials. 
        Filter between all | revoked | expired credentials and also perform a full text search with the query parameter.
      tags:
        - Credential
      security:
        - basicAuth: [ ]
      parameters:
        - in: query
          name: did
          schema:
            type: string
            example: did:polygonid:polygon:mumbai:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe
        - in: query
          name: status
          schema:
            type: string
            enum: [all, revoked, expired]
          description: >
             Schema type:
               * `all` - All Schemas. (default value)
               * `revoked` - Only revoked schemas
               * `expired` - Only expired schemas
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search
      responses:
        '200':
          description: List of credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/{id}:
    get:
      summary: Get Credential
      operationId: getCredential
      description: Get credential details
      tags:
        - Credential
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete Credential
      operationId: DeleteCredential
      description: Endpoint to delete a Credential
      tags:
        - Credential
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Claim deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/revoke/{nonce}:
    post:
      summary: Revoke Credential
      operationId: RevokeCredential
      description: Endpoint to revoke a credential
      tags:
        - Credential
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeCredentialResponse'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/revocation/status/{nonce}:
    get:
      summary: Get Revocation Status
      operationId: GetRevocationStatus
      description: Endpoint to get the revocation status of a credential
      tags:
        - Credential
      parameters:
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '200':
          description: Proof
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevocationStatusResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/{id}/qrcode:
    get:
      summary: Get Credential QR code
      operationId: GetCredentialQrCode
      description: Returns a a json that can be used to create the QR Code to scan for accepting a credential.
      tags:
        - Credential
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  #schemas:
  /v1/schemas:
    post:
      summary: Import JSON schema
      operationId: ImportSchema
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportSchemaRequest'
      responses:
        '201':
          description: Schema imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Schemas
      operationId: GetSchemas
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in schema types and attributes.
      responses:
        '200':
          description: Schema collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/schemas/{id}:
    get:
      summary: Get Schema
      operationId: GetSchema
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Schema information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  #agent
  /v1/agent:
    post:
      summary: Agent
      operationId: Agent
      description: Mobile agent endpoint
      tags:
        - Agent
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: TBD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'



  #state:
  /v1/state/publish:
    post:
      summary: Publish Identity State
      operationId: PublishState
      security:
        - basicAuth: [ ]
      tags:
        - State
      responses:
        '202':
          description: Publish state successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishIdentityStateResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/state/retry:
    post:
      summary: Retry Publish Identity State
      operationId: RetryPublishState
      security:
        - basicAuth: [ ]
      tags:
        - State
      responses:
        '202':
          description: Publish state successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishIdentityStateResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/state/status:
    get:
      summary: Get Identity State Status
      operationId: GetStateStatus
      security:
        - basicAuth: [ ]
      tags:
        - State
      responses:
        '200':
          description: State status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateStatusResponse'
        '500':
          $ref: '#/components/responses/500'

  /v1/state/transactions:
    get:
      summary: Get Identity State Transactions
      operationId: GetStateTransactions
      security:
        - basicAuth: [ ]
      tags:
        - State
      responses:
        '200':
          description: State transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateTransactionsResponse'
        '500':
          $ref: '#/components/responses/500'

  # Links
  /v1/credentials/links:
    get:
      summary: Get Links
      operationId: GetLinks
      security:
        - basicAuth: [ ]
      tags:
        - Links
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in schema types and attributes.
        - in: query
          name: status
          schema:
            type: string
            enum: [ all, active, inactive, exceeded ]
          description: >
            Schema type:
              * `all` - All links. (default value)
              * `active` - Only active links. (Not expired, no issuance exceeded and not deactivated
              * `inactive` - Only deactivated links
              * `exceeded` - Expired or maximum issuance exceeded
      responses:
        '200':
          description: Link collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        '400':
          $ref: '#/components/responses/400'
        '404':
            $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    post:
      summary: Create Link
      operationId: CreateLink
      security:
        - basicAuth: [ ]
      tags:
        - Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkRequest'
      responses:
        '201':
          description: Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/links/{id}:
    get:
      summary: Get Link
      operationId: GetLink
      security:
        - basicAuth: [ ]
      tags:
        - Links
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Credential link response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Activate | Deactivate Link
      operationId: AcivateLink
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Link updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete Link
      operationId: DeleteLink
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      responses:
        '200':
          description: Link deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /v1/credentials/links/{id}/qrcode:
    post:
      summary: Create Authentication Link QRCode
      operationId: CreateLinkQrCode
      parameters:
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      responses:
        '200':
          description: Link qrcode generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialLinkQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    get:
      summary: Get Credential Link QRCode
      operationId: GetLinkQRCode
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/sessionID'
      tags:
        - Links
      responses:
        '200':
          description: Credential link QRCode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLinkQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Entity not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/links/callback:
    post:
      summary: Create Link QR Code Callback
      operationId: CreateLinkQrCodeCallback
      description: Create Link QR Code Callback
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/sessionID'
        - $ref: '#/components/parameters/linkID'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: ok
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  #others:
  /:
    get:
      summary: Get the documentation
      operationId: GetDocumentation
      x-internal: true
      responses:
        200:
          description: success and returns the documentation in HTML format

  /static/docs/api_ui/api.yaml:
    get:
      summary: Get the documentation yaml file
      operationId: GetYaml
      x-internal: true
      responses:
        200:
          description: success and returns the documentation in Yaml format

  /favicon.ico:
    get:
      summary: Gets the favicon
      operationId: GetFavicon
      x-internal: true
      responses:
        200:
          description: success and returns a favicon

  /status:
    get:
      summary: Healthcheck
      operationId: Health
      responses:
        '200':
          description: All services are running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    KeyValue:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string

    Config:
      type: array
      items:
        $ref: '#/components/schemas/KeyValue'


    ImportSchemaRequest:
      type: object
      required:
        - url
        - schemaType
        - version
      properties:
        url:
          type: string
          example: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        schemaType:
          type: string
          example: "vaccinationCertificate"
        title:
          type: string
          example: "KYC Age Credential"
        description:
          type: string
          example: "KYC Age Credential description"
        version:
          type: string
          example: "1.0.0"

    Health:
      type: object
      x-omitempty: false
      additionalProperties:
        type: boolean

    AuthenticationQrCodeResponse:
      type: object
      required:
        - id
        - typ
        - type
        - thid
        - body
        - from
      properties:
        id:
          type: string
          example: f7c6cdf9-878e-40c3-89f1-85bf1fb80865
        typ:
          type: string
          example: application/iden3comm-plain-json
        type:
          type: string
          example: https://iden3-communication.io/authorization/1.0/request
        thid:
          type: string
          example: f7c6cdf9-878e-40c3-89f1-85bf1fb80865
        body:
          type: object
          required:
            - callbackUrl
            - reason
            - scope
          properties:
            callbackUrl:
              type: string
              example: https://validURL/v1/authentication/callback?sessionID=89d298fa-15a6-4a1d-ab13-d1069467eedd
            reason:
              type: string
              example: authentication
            scope:
              type: array
              items:
                type:
              example: [ ]
        from:
          type: string
          example: did:polygonid:polygon:mumbai:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe

    QrCodeResponse:
      type: object
      required:
        - id
        - typ
        - type
        - thid
        - body
        - from
        - to
      properties:
        id:
          type: string
          example: f7c6cdf9-878e-40c3-89f1-85bf1fb80865
        typ:
          type: string
          example: application/iden3comm-plain-json
        type:
          type: string
          example: https://iden3-communication.io/authorization/1.0/request
        thid:
          type: string
          example: f7c6cdf9-878e-40c3-89f1-85bf1fb80865
        body:
          $ref: '#/components/schemas/QrCodeBodyResponse'
        from:
          type: string
          example: did:polygonid:polygon:mumbai:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe
        to:
          type: string
          example: did:polygonid:polygon:mumbai:2qPtCq1WDpimtqsFPkpbBYzgzDbJ8i3pn9vHDLyF63

    QrCodeBodyResponse:
      type: object
      required:
        - url
        - credentials
      properties:
        url:
          type: string
          example: https://validURL/v1/agent
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/QrCodeCredentialResponse'
          example: [ ]

    QrCodeCredentialResponse:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: string
          x-omitempty: false
          example: c79c9c04-8c98-40f2-a7a0-5eeabf08d836
        description:
          type: string
          example: https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld#KYCAgeCredential


    CredentialLinkQrCodeResponse:
      type: object
      required:
        - issuer
        - qrCode
        - sessionID
        - linkID
        - linkDetail
      properties:
        issuer:
          $ref: '#/components/schemas/IssuerDescription'
        qrCode:
          $ref: '#/components/schemas/AuthenticationQrCodeResponse'
        sessionID:
          type: string
          example: ab5d5dbf-aaaa-bbbb-b983-f48afea64e05
        linkDetail:
          $ref: '#/components/schemas/LinkSimple'

    IssuerDescription:
      type: object
      required:
        - displayName
        - logo
      properties:
        displayName:
          type: string
          example: my issuer
        logo:
          type: string
          example: "http://my-public-logo/logo.jpg"

    GetLinkQrCodeResponse:
      type: object
      required:
        - linkDetail
      properties:
        qrCode:
          $ref: '#/components/schemas/QrCodeResponse'
        status:
          type: string
          example: done | pending | pendingPublish
        linkDetail:
          $ref: '#/components/schemas/LinkSimple'

    UUIDResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          x-omitempty: false
          example: c79c9c04-8c98-40f2-a7a0-5eeabf08d836

    GenericErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Something happen'

    Credential:
      type: object
      required:
        - id
        - proofTypes
        - createdAt
        - expired
        - schemaHash
        - schemaType
        - schemaUrl
        - revNonce
        - credentialSubject
        - revoked
        - userID
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        proofTypes:
          type: array
          items:
            type: string
          example: ["BJJSignature2021"]
        createdAt:
          type: string
          format: date-time
          example: "2023-03-20T11:54:01.110295+01:00"
        expiresAt:
          type: string
          format: date-time
          x-omitempty: false
          nullable: true
          example: "2025-03-20T11:54:01.110295+01:00"
        expired:
          type: boolean
          example: true
        schemaHash:
          type: string
          example: "c9b2370371b7fa8b3dab2a5ba81b6838"
        schemaType:
          type: string
          example: "KYCAgeCredential"
        schemaUrl:
          type: string
          example: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        revoked:
          type: boolean
          example: false
        revNonce:
          type: integer
          format: uint64
          example: 2136005230
        credentialSubject:
          type: object
          x-omitempty: false
          example:
            birthday: 19960424
            documentType: 2
            id: "did:polygonid:polygon:mumbai:2qDDDKmo436EZGCBAvkqZjADYoNRJszkG7UymZeCHQ"
        userID:
          type: string
          example: did:polygonid:polygon:mumbai:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe

    Link:
      type: object
      required:
        - id
        - schemaUrl
        - schemaType
        - credentialSubject
        - issuedClaims
        - active
        - status
        - proofTypes
        - schemaHash
        - createdAt
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        schemaUrl:
          type: string
          example: https://someValidURL.com
        schemaType:
          type: string
          example: KYCAgeCredential
        schemaHash:
          type: string
          example: c9b2370371b7fa8b3dab2a5ba81b6838
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'
        maxIssuance:
          type: integer
          x-omitempty: false
          nullable: true
        issuedClaims:
          type: integer
        expiration:
          type: string
          format: date-time
          example: 2023-03-17T10:18:01.400722+01:00
          x-omitempty: false
          nullable: true
        credentialExpiration:
          type: string
          format: date
          example: "2022-12-20"
          x-omitempty: false
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: 2023-03-16T10:18:01.400722+01:00
        active:
          type: boolean
        status:
          type: string
          enum: [ active, inactive, exceeded ]
        proofTypes:
          type: array
          items:
            type: string
          example: [ "BJJSignature2021" ]

    LinkSimple:
      type: object
      required:
        - id
        - schemaUrl
        - schemaType
        - proofTypes
        - schemaHash
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        schemaUrl:
          type: string
          example: https://someValidURL.com
        schemaType:
          type: string
          example: KYCAgeCredential
        schemaHash:
          type: string
          example: c9b2370371b7fa8b3dab2a5ba81b6838
        proofTypes:
          type: array
          items:
            type: string
          example: [ "BJJSignature2021" ]

    StateTransactionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/StateTransaction'

    StateTransaction:
      type: object
      required:
        - id
        - txID
        - state
        - publishDate
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 1
        txID:
          type: string
          example: 0x8f271174b45ba7892d83d7210c9b54b70ee1e02a63a0f7abf6308663bc462eac
        state:
          type: string
          example: 13f9aadd4801d775e85a7ef45c2f6d02cdf83f0d724250417b165ff9cd88ee21
        publishDate:
          type: string
          format: date-time
          example: 2023-03-17T10:18:01.400722+01:00
        status:
          type: string
          enum: [created, pending, published, failed]
          example: published

    StateStatusResponse:
      type: object
      required:
        - pendingActions
      properties:
        pendingActions:
          type: boolean
          example: true

    GenericMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    GetConnectionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetConnectionResponse'

    GetConnectionResponse:
      type: object
      required:
        - id
        - userID
        - issuerID
        - createdAt
        - credentials
      properties:
        id:
          type: string
          x-omitempty: false
          example: 7fff8112-c415-11ed-b036-debe37e1cbd6
        userID:
          type: string
          x-omitempty: false
          example: did:polygonid:polygon:mumbai:2qMZrfBsXuGFTwSqkqYki78zF3pe1vtXoqH4yRLsfs
        issuerID:
          type: string
          x-omitempty: false
          example: did:polygonid:polygon:mumbai:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe
        createdAt:
          type: string
          format: date-time
          example: 2023-03-17T10:18:01.400722+01:00
        credentials:
          type: array
          x-omitempty: false
          items:
            $ref: '#/components/schemas/Credential'

    CreateCredentialRequest:
      type: object
      required:
        - credentialSchema
        - type
        - credentialSubject
      properties:
        credentialSchema:
          type: string
          x-omitempty: false
          example: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        type:
          type: string
          x-omitempty: false
          example: "KYCAgeCredential"
        credentialSubject:
          type: object
          x-omitempty: false
          example:
            id: "{fill with did}"
            birthday: 19960424
            documentType: 2
        expiration:
          type: string
          format: date-time
          example: 2022-08-17T12:43:32.720Z
        signatureProof:
          type: boolean
          example: true
        mtProof:
          type: boolean
          example: true

    Schema:
      type: object
      required:
        - id
        - hash
        - bigInt
        - url
        - type
        - createdAt
        - version
      properties:
        id:
          type: string
          x-omitempty: false
          example: c79c9c04-8c98-40f2-a7a0-5eeabf08d836
        hash:
          type: string
          x-omitempty: false
          example: 18f30714a35a5db88ca24728c0c53dfd
        bigInt:
          type: string
          x-omitempty: false
          example: "336615423900919464193075592850483704600"
        url:
          type: string
          x-omitempty: false
          example: https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json
        type:
          type: string
          x-omitempty: false
          example: KYCCountryOfResidenceCredential
        createdAt:
          type: string
          format: date-time
          x-omitempty: false
          example: 2023-03-20T17:01:33.564119+01:00
        title:
          type: string
          x-omitempty: false
          example: "KYC Age Credential"
        description:
          type: string
          x-omitempty: false
          example: "KYC Age Credential description"
        version:
          type: string
          x-omitempty: false
          example: "1.0.0"

    RevokeCredentialResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          x-omitempty: false
          example: pending

    PublishIdentityStateResponse:
      type: object
      properties:
        txID:
          type: string
        claimsTreeRoot:
          type: string
        state:
          type: string
        revocationTreeRoot:
          type: string
        rootOfRoots:
          type: string
      example:
        claimsTreeRoot: "3608a07d1d455974054065d6138bb4e634afa7a965f29919f4d0f494eba0f91c"
        revocationTreeRoot: "0000000000000000000000000000000000000000000000000000000000000000"
        rootOfRoots: "53b5e088b1c93b2ea4748bc29649c1cd6b0f4749bab3f96d2d9f0aac8eab1b19"
        state: "8d0dfb1b7bc910e347efbba324e604359815c40b56b77e191fdac1eb7f770119"
        txID: "0x45aef0730854606bf9ea3cabba80541fa3dc61833c7a08b6c722d732451fea46"

    CreateLinkRequest:
      type: object
      required:
        - schemaID
        - signatureProof
        - mtProof
        - credentialSubject
      properties:
        schemaID:
          type: string
          x-go-type: uuid.UUID
          x-omitempty: false
        credentialExpiration:
          type: string
          format: date
          example: "2022-12-20"
        expiration:
          type: string
          format: date-time
          example: 2025-04-17T11:40:43.681857-03:00
        limitedClaims:
          type: integer
          example: 5
          x-omitempty: false
        signatureProof:
          type: boolean
          example: true
        mtProof:
          type: boolean
          example: false
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'

    CredentialSubject:
      type: object
      x-omitempty: false
      example:
        birthday: 19960424
        documentType: 2
        type: "KYCAgeCredential"

    RevocationStatusResponse:
      type: object
      required:
        - issuer
        - mtp
      properties:
        issuer:
          type: object
          properties:
            state:
              type: string
            rootOfRoots:
              type: string
            claimsTreeRoot:
              type: string
            revocationTreeRoot:
              type: string
        mtp:
          type: object
          required:
            - existence
          properties:
            existence:
              type: boolean
            siblings:
              type: array
              x-omitempty: false
              items:
                type: string

            node_aux:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string


    #Agent
    AgentResponse:
      type: object
      required:
        - body
        - id
        - typ
        - type
        - threadID
        - from
        - to
      properties:
        id:
          type: string
        typ:
          type: string
        type:
          type: string
        threadID:
          type: string
        body:
          type: null
        from:
          type: string
        to:
          type: string

  parameters:
    sessionID:
      name: sessionID
      in: query
      required: true
      description: | 
        Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    linkID:
      name: linkID
      in: query
      required: true
      description: |
        Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    id:
      name: id
      in: path
      required: true
      description: | 
        UUID parameter, e.g: 8edd8112-c415-11ed-b036-debe37e1cbd6
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    pathNonce:
      name: nonce
      in: path
      required: true
      description: |
        Claim nonce, e.g: 4182463773
      schema:
        type: integer
        format: int64
  responses:
    '400':
      description: 'Bad Request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '401':
      description: 'Unauthorized'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '404':
      description: 'Entity not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '422':
      description: 'Unprocessable Content'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '500':
      description: 'Internal Server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
