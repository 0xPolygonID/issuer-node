openapi: 3.0.0
info:
  title: Privado ID - Issuer
  description: |
    Documentation for the Issuer
  version: "1"

tags:
  - name: Identity
    description: Collection of endpoints related to Identity
  - name: Credentials
    description: Collection of endpoints related to Credentials
  - name: Agent
    description: Collection of endpoints related to Mobile

paths:
  /:
    get:
      summary: Get the documentation
      operationId: GetDocumentation
      x-internal: true
      responses:
        200:
          description: success and returns the documentation in HTML format

  /favicon.ico:
    get:
      summary: Gets the favicon
      operationId: GetFavicon
      x-internal: true
      responses:
        200:
          description: success and returns a favicon

  /static/docs/api/api.yaml:
    get:
      summary: Get the documentation yaml file
      operationId: GetYaml
      x-internal: true
      responses:
        200:
          description: success and returns the documentation in Yaml format

  /status:
    get:
      summary: Healthcheck
      operationId: Health
      responses:
        '200':
          description: All services are running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '500':
          $ref: '#/components/responses/500'
  /config:
    get:
      summary: Get Config
      operationId: GetConfig
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: Config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '500':
          $ref: '#/components/responses/500'

  #authentication
  /v1/authentication/sessions/{id}:
    get:
      summary: Get Authentication Connection
      operationId: getAuthenticationConnection
      description: get authentication connection
      parameters:
        - $ref: '#/components/parameters/id'
      tags:
        - Auth
        - Connection
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthenticationConnectionResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/authentication/qrcode:
    post:
      summary: Get Connection QRCode
      operationId: authQRCode
      description: Authentication qrcode
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - name: type
          in: query
          required: false
          description: >
            Type:
              * `link` - (default value) Return a QR code with a link redirection to the raw content. Easier to scan.   
              * `raw` - Return the raw QR code.
          schema:
            type: string
            enum: [ raw, link ]

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QrCodeLinkShortResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/authentication/callback:
    post:
      summary: Authentication Callback
      operationId: authCallback
      description: Authentication callback
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/sessionID'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: ok
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  #identity:
  /v1/identities:
    post:
      summary: Create Identity
      operationId: CreateIdentity
      description: Endpoint to create an identity
      tags:
        - Identity
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityRequest'
      responses:
        '201':
          description: Identity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIdentityResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500-CreateIdentity'
    get:
      summary: Get Identities
      operationId: GetIdentities
      description: Endpoint to get all the identities
      tags:
        - Identity
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: all good
          content:
            application/json:
              schema:
                type: array
                x-omitempty: false
                items:
                  type: string
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /v1/identities/{identifier}/details:
    get:
      summary: Identity Detail
      operationId: GetIdentityDetails
      description: Endpoint to get an identity details
      tags:
        - Identity
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      responses:
        '200':
          description: Identity top up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityDetailsResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/state/retry:
    post:
      summary: Retry Publish Identity State
      operationId: RetryPublishState
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      tags:
        - Identity
      responses:
        '202':
          description: Publish state successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishIdentityStateResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/state/publish:
    post:
      summary: Publish Identity State
      operationId: PublishIdentityState
      description: Endpoint to publish identity state
      tags:
        - Identity
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      responses:
        '200':
          description: No transactions to process to the given identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
        '202':
          description: Transaction ID of the published  state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishIdentityStateResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/state/status:
    get:
      summary: Get Identity State Status
      operationId: GetStateStatus
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      tags:
        - State
      responses:
        '200':
          description: State status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateStatusResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/state/transactions:
    get:
      summary: Get Identity State Transactions
      operationId: GetStateTransactions
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      tags:
        - State
      responses:
        '200':
          description: State transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateTransactionsResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  #connections:
  /v1/{identifier}/connections/{id}:
    get:
      summary: Get Connection
      operationId: getConnection
      description: get connection
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectionResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete Connection
      operationId: deleteConnection
      description: delete connection
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
        - name: revokeCredentials
          in: query
          required: false
          description: |
            Set revokeCredentials to true if you want to revoke the credentials of the connection
          schema:
            type: boolean
        - name: deleteCredentials
          in: query
          required: false
          description: |
            Set deleteCredentials to true if you want to delete the credentials of the connection
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/connections/{id}/credentials:
    delete:
      summary: Delete Connection Credentials
      operationId: deleteConnectionCredentials
      description: delete connection credentials
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/connections:
    get:
      summary: Get Connections
      operationId: getConnections
      description: get connections
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in connections.
        - in: query
          name: credentials
          schema:
            type: boolean
          description: credentials=true to include the connection credentials.
        - in: query
          name: page
          schema:
            type: integer
            format: uint
            minimum: 1
            example: 1
          description: Page to fetch. First is one. If omitted, all results will be returned.
        - in: query
          name: max_results
          schema:
            type: integer
            format: uint
            example: 50
            default: 50
          description: Number of items to fetch on each page. Minimum is 10. Default is 50. No maximum by the moment.
        - in: query
          name: sort
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [ "createdAt", "-createdAt", "userID", "-userID" ]
              default: "-createdAt"

            description: >
              The minus sign (-) before createdAt means descending order.

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsPaginated'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/connections/{id}/credentials/revoke:
    post:
      summary: Revoke Connection Credentials
      operationId: revokeConnectionCredentials
      description: revoke connection credentials
      tags:
        - Connection
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  #credentials:
  /v1/{identifier}/credentials:
    post:
      summary: Create Credential
      operationId: CreateCredential
      description: Endpoint to create a Credential
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClaimRequest'
      responses:
        '201':
          description: Credential Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Credentials
      operationId: GetCredentials
      description: |
        Endpoint to retrieve Credentials 
        > ⚠️ **self** and **subject** filter cannot be used together
      tags:
        - Claim
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - in: query
          name: schemaType
          schema:
            type: string
          description: Filter per schema type. Example - KYCAgeCredential
        - in: query
          name: schemaHash
          schema:
            type: string
          description: Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838
        - in: query
          name: subject
          schema:
            type: string
          description: Filter per subject. Example - did:polygonid:polygon:amoy:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ
        - in: query
          name: revoked
          schema:
            type: boolean
          description: Filter per credentials revoked or not - Example - true.
        - in: query
          name: self
          schema:
            type: boolean
          description: Filter per retrieve credentials of the provided identifier. Example - true
        - in: query
          name: query_field
          schema:
            type: string
          description: Filter this field inside the data of the claim
        - in: query
          name: query_value
          schema:
            type: string
          description: Filter this value inside the data of the claim for the specified field in query_field
      responses:
        '200':
          description: Credentials found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimsResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/claims:
    post:
      summary: Create Claim (Deprecated)
      operationId: CreateClaim
      description: Endpoint to create a Claim. Deprecated, use /v1/{identifier}/credentials instead
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClaimRequest'
      responses:
        '201':
          description: Claim created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Claims (Deprecated)
      operationId: GetClaims
      description: |
        Endpoint to retrieve claims. Deprecated, use /v1/{identifier}/credentials instead
        > ⚠️ **self** and **subject** filter cannot be used together
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - in: query
          name: schemaType
          schema:
            type: string
          description: Filter per schema type. Example - KYCAgeCredential
        - in: query
          name: schemaHash
          schema:
            type: string
          description: Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838
        - in: query
          name: subject
          schema:
            type: string
          description: Filter per subject. Example - did:polygonid:polygon:amoy:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ
        - in: query
          name: revoked
          schema:
            type: boolean
          description: Filter per claims revoked or not - Example - true.
        - in: query
          name: self
          schema:
            type: boolean
          description: Filter per retrieve claims of the provided identifier. Example - true
        - in: query
          name: query_field
          schema:
            type: string
          description: Filter this field inside the data of the claim
        - in: query
          name: query_value
          schema:
            type: string
          description: Filter this value inside the data of the claim for the specified field in query_field
      responses:
        '200':
          description: Claims found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimsResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'


  /v1/{identifier}/credentials/{id}:
    get:
      summary: Get Claim
      operationId: GetCredential
      description: Endpoint to retrieve a created Credential
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathClaim'
      responses:
        '200':
          description: Credential found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/claims/{id}:
    get:
      summary: Get Claim
      operationId: GetClaim
      description: Endpoint to retrieve a created Claim
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathClaim'
      responses:
        '200':
          description: Claim found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/credentials/revoke/{nonce}:
    post:
      summary: Revoke Credential
      operationId: RevokeCredential
      description: Endpoint to revoke a credential
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/claims/revoke/{nonce}:
    post:
      summary: Revoke Claim (Deprecated)
      operationId: RevokeClaim
      description: Endpoint to revoke a claim. DEPRECATED, use /v1/{identifier}/credentials/revoke/{nonce} instead
      tags:
        - Credentials
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeClaimResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/credentials/revocation/status/{nonce}:
    get:
      summary: Get Revocation Status
      operationId: GetRevocationStatusV2
      description: Endpoint to get the revocation status
      tags:
        - Credentials
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '200':
          description: Proof
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevocationStatusResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/claims/revocation/status/{nonce}:
    get:
      summary: Get Revocation Status (Deprecated)
      operationId: GetRevocationStatus
      description: Endpoint to get the revocation status. DEPRECATED use /v1/{identifier}/credentials/revocation/status/{nonce} instead
      tags:
        - Credentials
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathNonce'
      responses:
        '200':
          description: Proof
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevocationStatusResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/credentials/{id}/qrcode:
    get:
      summary: Get Credentials QR code
      operationId: GetCredentialQrCode
      description: Returns a a json that can be used to create the QR Code to scan for accepting a claim.
      tags:
        - Claim
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathClaim'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/claims/{id}/qrcode:
    get:
      summary: Get Claim QR code (Deprecated)
      operationId: GetClaimQrCode
      description: Returns a a json that can be used to create the QR Code to scan for accepting a claim. DEPRECATED use /v1/{identifier}/credentials/{id}/qrcode instead
      tags:
        - Claim
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/pathClaim'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClaimQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  #agent
  /v1/agent:
    post:
      summary: Agent
      operationId: Agent
      description: Mobile agent endpoint
      tags:
        - Agent
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: TBD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/qr-store:
    get:
      summary: QrCode body
      operationId: GetQrFromStore
      description: Returns a previously generated QR code via url shortener method
      tags:
        - Agent
      parameters:
        - in: query
          name: id
          schema:
            type: string
            x-go-type: uuid.UUID
            x-go-type-import:
              name: uuid
              path: github.com/google/uuid
            example: 8edd8112-c415-11ed-b036-debe37e1cbd6
      responses:
        '200':
          description: A json to generate a QR code
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  #schemas:
  /v1/{identifier}/schemas:
    post:
      summary: Import JSON schema
      operationId: ImportSchema
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportSchemaRequest'
      responses:
        '201':
          description: Schema imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      summary: Get Schemas
      operationId: GetSchemas
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in schema types and attributes.
      responses:
        '200':
          description: Schema collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/schemas/{id}:
    get:
      summary: Get Schema
      operationId: GetSchema
      security:
        - basicAuth: [ ]
      tags:
        - Schemas
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Schema information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'


  # Links
  /v1/{identifier}/credentials/links:
    get:
      summary: Get Links
      operationId: GetLinks
      security:
        - basicAuth: [ ]
      tags:
        - Links
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - in: query
          name: query
          schema:
            type: string
          description: Query string to do full text search in schema types and attributes.
        - in: query
          name: status
          schema:
            type: string
            enum: [ all, active, inactive, exceeded ]
          description: >
            Schema type:
              * `all` - All links. (default value)
              * `active` - Only active links. (Not expired, no issuance exceeded and not deactivated
              * `inactive` - Only deactivated links
              * `exceeded` - Expired or maximum issuance exceeded
      responses:
        '200':
          description: Link collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    post:
      summary: Create Link
      operationId: CreateLink
      security:
        - basicAuth: [ ]
      tags:
        - Links
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkRequest'
      responses:
        '201':
          description: Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UUIDResponse'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /v1/{identifier}/credentials/links/{id}:
    get:
      summary: Get Link
      operationId: GetLink
      security:
        - basicAuth: [ ]
      tags:
        - Links
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Credential link response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Activate | Deactivate Link
      operationId: ActivateLink
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Link updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete Link
      operationId: DeleteLink
      security:
        - basicAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      responses:
        '200':
          description: Link deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericMessage'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'


  /v1/{identifier}/credentials/links/{id}/qrcode:
    post:
      summary: Create Authentication Link QRCode
      operationId: CreateLinkQrCode
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
      tags:
        - Links
      responses:
        '200':
          description: Link qrcode generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialLinkQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    get:
      summary: Get Credential Link QRCode
      operationId: GetLinkQRCode
      parameters:
        - $ref: '#/components/parameters/pathIdentifier'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/sessionID'
      tags:
        - Links
      responses:
        '200':
          description: Credential link QRCode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLinkQrCodeResponse'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Entity not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorMessage'
        '500':
          $ref: '#/components/responses/500'

  /v1/credentials/links/callback:
    post:
      summary: Create Link QR Code Callback
      operationId: CreateLinkQrCodeCallback
      description: Create Link QR Code Callback
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/sessionID'
        - $ref: '#/components/parameters/linkID'
        - $ref: '#/components/parameters/credentialStatusType'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: jwz-token
      responses:
        '200':
          description: ok
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    KeyValue:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string

    Config:
      type: array
      items:
        $ref: '#/components/schemas/KeyValue'
    Health:
      type: object
      x-omitempty: false
      additionalProperties:
        type: boolean

    UUIDString:
      type: string
      x-omitempty: false
      example: b7144f1c-d54e-4f67-a4f1-f2e7ff1beb07

    UUIDResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          x-omitempty: false
          example: c79c9c04-8c98-40f2-a7a0-5eeabf08d836

    GenericMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    GenericErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Something happen'

    #identity
    CreateIdentityRequest:
      type: object
      required:
        - didMetadata
      properties:
        didMetadata:
          type: object
          required:
            - method
            - blockchain
            - network
            - type
          properties:
            method:
              type: string
              x-omitempty: false
              example: "polygonid"
            blockchain:
              type: string
              x-omitempty: false
              example: "polygon"
            network:
              type: string
              x-omitempty: false
              example: "amoy"
            type:
              type: string
              x-omitempty: false
              example: "BJJ"
              enum: [ BJJ, ETH ]
            authBJJCredentialStatus:
              type: string
              x-omitempty: true
              example: "Iden3ReverseSparseMerkleTreeProof"
              enum: [ Iden3commRevocationStatusV1.0, Iden3ReverseSparseMerkleTreeProof, Iden3OnchainSparseMerkleTreeProof2023 ]

    CreateIdentityResponse:
      type: object
      required:
        - identity
        - status
      properties:
        identifier:
          type: string
        state:
          $ref: '#/components/schemas/IdentityState'
        address:
          type: string
          x-omitempty: false

    GetIdentityDetailsResponse:
      type: object
      required:
        - identity
        - status
      properties:
        identifier:
          type: string
        state:
          $ref: '#/components/schemas/IdentityState'
        address:
          type: string
        balance:
          type: string


    IdentityState:
      type: object
      required:
        - stateID
        - identifier
        - status
        - modifiedAt
        - createdAt
      properties:
        stateID:
          type: integer
          format: int64
          x-go-json-ignore: true
        identifier:
          type: string
          x-go-json-ignore: true
        state:
          type: string
        rootOfRoots:
          type: string
        claimsTreeRoot:
          type: string
        revocationTreeRoot:
          type: string
        blockTimestamp:
          type: integer
        blockNumber:
          type: integer
        txID:
          type: string
        previousState:
          type: string
        status:
          type: string
        modifiedAt:
          $ref: '#/components/schemas/TimeUTC'
        createdAt:
          $ref: '#/components/schemas/TimeUTC'

    PublishIdentityStateResponse:
      type: object
      properties:
        txID:
          type: string
        claimsTreeRoot:
          type: string
        state:
          type: string
        revocationTreeRoot:
          type: string
        rootOfRoots:
          type: string

    ConnectionsPaginated:
      type: object
      required: [ items, meta ]
      properties:
        items:
          $ref: '#/components/schemas/GetConnectionsResponse'
        meta:
          $ref: '#/components/schemas/PaginatedMetadata'

    GetConnectionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetConnectionResponse'

    GetConnectionResponse:
      type: object
      required:
        - id
        - userID
        - issuerID
        - createdAt
        - credentials
      properties:
        id:
          type: string
          x-omitempty: false
          example: 7fff8112-c415-11ed-b036-debe37e1cbd6
        userID:
          type: string
          x-omitempty: false
          example: did:polygonid:polygon:amoy:2qMZrfBsXuGFTwSqkqYki78zF3pe1vtXoqH4yRLsfs
        issuerID:
          type: string
          x-omitempty: false
          example: did:polygonid:polygon:amoy:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe
        createdAt:
          $ref: '#/components/schemas/TimeUTC'
        credentials:
          type: array
          x-omitempty: false
          items:
            $ref: '#/components/schemas/Credential'

    # refresh service
    RefreshService:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          x-omitempty: false
        type:
          type: string
          x-omitempty: false
          enum:
            - "Iden3RefreshService2023"

    PaginatedMetadata:
      type: object
      required:
        - total
        - page
        - max_results
      properties:
        total:
          type: integer
          format: uint
          example: 1
        page:
          type: integer
          format: uint
          example: 1
        max_results:
          type: integer
          format: uint
          example: 50

    ImportSchemaRequest:
      type: object
      required:
        - url
        - schemaType
        - version
      properties:
        url:
          type: string
          example: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        schemaType:
          type: string
          example: "vaccinationCertificate"
        title:
          type: string
          example: "KYC Age Credential"
        description:
          type: string
          example: "KYC Age Credential description"
        version:
          type: string
          example: "1.0.0"

    Schema:
      type: object
      required:
        - id
        - hash
        - bigInt
        - url
        - type
        - createdAt
        - version
      properties:
        id:
          type: string
          x-omitempty: false
          example: c79c9c04-8c98-40f2-a7a0-5eeabf08d836
        hash:
          type: string
          x-omitempty: false
          example: 18f30714a35a5db88ca24728c0c53dfd
        bigInt:
          type: string
          x-omitempty: false
          example: "336615423900919464193075592850483704600"
        url:
          type: string
          x-omitempty: false
          example: https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json
        type:
          type: string
          x-omitempty: false
          example: KYCCountryOfResidenceCredential
        createdAt:
          $ref: '#/components/schemas/TimeUTC'
          x-omitempty: false
        title:
          type: string
          x-omitempty: false
          example: "KYC Age Credential"
        description:
          type: string
          x-omitempty: false
          example: "KYC Age Credential description"
        version:
          type: string
          x-omitempty: false
          example: "1.0.0"

    # display method
    DisplayMethod:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          x-omitempty: false
        type:
          type: string
          x-omitempty: false
          enum:
            - "Iden3BasicDisplayMethodV1"

    #claims
    CreateClaimRequest:
      type: object
      required:
        - credentialSchema
        - type
        - credentialSubject
      properties:
        credentialSchema:
          type: string
          x-omitempty: false
        claimID:
          type: string
          x-go-type: uuid.UUID
          x-omitempty: false
        type:
          type: string
          x-omitempty: false
        credentialSubject:
          type: object
          x-omitempty: false
        expiration:
          type: integer
          format: int64
        version:
          type: integer
          format: uint32
        revNonce:
          type: integer
          format: uint64
        subjectPosition:
          type: string
        merklizedRootPosition:
          type: string
        refreshService:
          $ref: '#/components/schemas/RefreshService'
        displayMethod:
          $ref: '#/components/schemas/DisplayMethod'
        proofs:
          type: array
          items:
            type: string
            x-omitempty: false
            example: "BJJSignature2021"
            enum: [ BJJSignature2021, Iden3SparseMerkleTreeProof ]
        credentialStatusType:
          type: string
          x-omitempty: true
          example: "Iden3ReverseSparseMerkleTreeProof"
          enum: [ Iden3commRevocationStatusV1.0, Iden3ReverseSparseMerkleTreeProof, Iden3OnchainSparseMerkleTreeProof2023 ]
      example:
        credentialSchema: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        type: "KYCAgeCredential"
        credentialSubject:
          id: "fill with did"
          birthday: 19960424
          documentType: 2
        expiration: 1903357766

    CreateClaimResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          x-omitempty: false

    Credential:
      type: object
      required:
        - id
        - proofTypes
        - createdAt
        - expired
        - schemaHash
        - schemaType
        - schemaUrl
        - revNonce
        - credentialSubject
        - revoked
        - userID
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        proofTypes:
          type: array
          items:
            type: string
          example: [ "BJJSignature2021" ]
        createdAt:
          $ref: '#/components/schemas/TimeUTC'
        expiresAt:
          $ref: '#/components/schemas/TimeUTC'
        expired:
          type: boolean
          example: true
        schemaHash:
          type: string
          example: "c9b2370371b7fa8b3dab2a5ba81b6838"
        schemaType:
          type: string
          example: "KYCAgeCredential"
        schemaUrl:
          type: string
          example: "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json"
        revoked:
          type: boolean
          example: false
        revNonce:
          type: integer
          format: uint64
          example: 2136005230
        credentialSubject:
          type: object
          x-omitempty: false
          example:
            birthday: 19960424
            documentType: 2
            id: "did:polygonid:polygon:amoy:2qDDDKmo436EZGCBAvkqZjADYoNRJszkG7UymZeCHQ"
        userID:
          type: string
          example: did:polygonid:polygon:amoy:2qFpPHotk6oyaX1fcrpQFT4BMnmg8YszUwxYtaoGoe
        refreshService:
          $ref: '#/components/schemas/RefreshService'
        displayMethod:
          $ref: '#/components/schemas/DisplayMethod'

    AuthenticationConnection:
      type: object
      required:
        - id
        - userID
        - issuerID
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: '#/components/schemas/UUIDString'
        userID:
          $ref: '#/components/schemas/UUIDString'
        issuerID:
          $ref: '#/components/schemas/UUIDString'
        createdAt:
          $ref: '#/components/schemas/TimeUTC'
        modifiedAt:
          $ref: '#/components/schemas/TimeUTC'

    GetAuthenticationConnectionResponse:
      type: object
      required:
        - connection
      properties:
        connection:
          $ref: '#/components/schemas/AuthenticationConnection'

    GetClaimsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetClaimResponse'

    GetClaimResponse:
      type: object
      required:
        - id
        - "@context"
        - type
        - credentialSubject
        - credentialStatus
        - issuer
        - credentialSchema
        - proof
      properties:
        id:
          type: string
          x-omitempty: false
        "@context":
          type: array
          x-omitempty: false
          items:
            type: string
        type:
          type: array
          x-omitempty: false
          items:
            type: string
        expirationDate:
          $ref: '#/components/schemas/TimeUTC'
        issuanceDate:
          $ref: '#/components/schemas/TimeUTC'
        credentialSubject:
          type: object
          x-omitempty: false
        credentialStatus:
          type: null
        issuer:
          type: string
          x-omitempty: false
        credentialSchema:
          $ref: '#/components/schemas/CredentialSchema'
          x-omitempty: false
        proof:
          type: null
        displayMethod:
          $ref: '#/components/schemas/DisplayMethod'
        refreshService:
          $ref: '#/components/schemas/RefreshService'

    QrCodeLinkShortResponse:
      type: object
      required:
        - qrCodeLink
        - sessionID
      properties:
        qrCodeLink:
          type: string
          example: iden3comm://?request_uri=https%3A%2F%2Fissuer-demo.polygonid.me%2Fapi%2Fqr-store%3Fid%3Df780a169-8959-4380-9461-f7200e2ed3f4
        sessionID:
          $ref: '#/components/schemas/UUIDString'

    GetClaimQrCodeResponse:
      type: object
      required:
        - body
        - id
        - typ
        - type
        - thid
        - from
        - to
      properties:
        id:
          type: string
        typ:
          type: string
        type:
          type: string
        thid:
          type: string
        body:
          type: object
          required:
            - url
            - credentials
          properties:
            url:
              type: string
            credentials:
              type: array
              items:
                type: object
                required:
                  - id
                  - description
                properties:
                  id:
                    type: string
                  description:
                    type: string
        from:
          type: string
        to:
          type: string

    CredentialSchema:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          x-omitempty: false
        type:
          type: string
          x-omitempty: false

    StateTransactionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/StateTransaction'

    StateTransaction:
      type: object
      required:
        - id
        - txID
        - state
        - publishDate
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 1
        txID:
          type: string
          example: 0x8f271174b45ba7892d83d7210c9b54b70ee1e02a63a0f7abf6308663bc462eac
        state:
          type: string
          example: 13f9aadd4801d775e85a7ef45c2f6d02cdf83f0d724250417b165ff9cd88ee21
        publishDate:
          $ref: '#/components/schemas/TimeUTC'
        status:
          type: string
          enum: [ created, pending, published, failed ]
          example: published

    StateStatusResponse:
      type: object
      required:
        - pendingActions
      properties:
        pendingActions:
          type: boolean
          example: true

    RevokeClaimResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          x-omitempty: false
          example: pending

    RevocationStatusResponse:
      type: object
      required:
        - issuer
        - mtp
      properties:
        issuer:
          type: object
          properties:
            state:
              type: string
            rootOfRoots:
              type: string
            claimsTreeRoot:
              type: string
            revocationTreeRoot:
              type: string
        mtp:
          type: object
          required:
            - existence
          properties:
            existence:
              type: boolean
            siblings:
              type: array
              x-omitempty: false
              items:
                type: string

            node_aux:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string

    ByteArray:
      type: string
      format: byte

    #Agent
    AgentResponse:
      type: object
      required:
        - body
        - id
        - typ
        - type
        - threadID
        - from
        - to
      properties:
        id:
          type: string
        typ:
          type: string
        type:
          type: string
        threadID:
          type: string
        body:
          type: null
        from:
          type: string
        to:
          type: string

    TimeUTC:
      type: string
      x-go-type: timeapi.Time
      x-go-type-import:
        name: timeapi
        path: github.com/polygonid/sh-id-platform/internal/timeapi
      example: '2023-10-26T10:59:08Z'
      x-omitempty: false

    Link:
      type: object
      required:
        - id
        - schemaUrl
        - schemaType
        - credentialSubject
        - issuedClaims
        - active
        - status
        - proofTypes
        - schemaHash
        - createdAt
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        schemaUrl:
          type: string
          example: https://someValidURL.com
        schemaType:
          type: string
          example: KYCAgeCredential
        schemaHash:
          type: string
          example: c9b2370371b7fa8b3dab2a5ba81b6838
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'
        maxIssuance:
          type: integer
          x-omitempty: false
          nullable: true
        issuedClaims:
          type: integer
        expiration:
          $ref: '#/components/schemas/TimeUTC'
          x-omitempty: false
          nullable: true
        credentialExpiration:
          $ref: '#/components/schemas/TimeUTC'
          x-omitempty: false
          nullable: true
        createdAt:
          $ref: '#/components/schemas/TimeUTC'
        active:
          type: boolean
        status:
          type: string
          enum: [ active, inactive, exceeded ]
        proofTypes:
          type: array
          items:
            type: string
          example: [ "BJJSignature2021" ]
        refreshService:
          $ref: '#/components/schemas/RefreshService'
        displayMethod:
          $ref: '#/components/schemas/DisplayMethod'

    CredentialSubject:
      type: object
      x-omitempty: false
      example:
        birthday: 19960424
        documentType: 2
        type: "KYCAgeCredential"

    CreateLinkRequest:
      type: object
      required:
        - schemaID
        - signatureProof
        - mtProof
        - credentialSubject
      properties:
        schemaID:
          type: string
          x-go-type: uuid.UUID
          x-omitempty: false
        credentialExpiration:
          type: string
          format: date-time
          example: 2025-04-17T11:40:43.681857-03:00
        expiration:
          type: string
          format: date-time
          example: 2025-04-17T11:40:43.681857-03:00
        limitedClaims:
          type: integer
          example: 5
          x-omitempty: false
        signatureProof:
          type: boolean
          example: true
        mtProof:
          type: boolean
          example: false
        credentialSubject:
          $ref: '#/components/schemas/CredentialSubject'
        refreshService:
          $ref: '#/components/schemas/RefreshService'
        displayMethod:
          $ref: '#/components/schemas/DisplayMethod'

    CredentialLinkQrCodeResponse:
      type: object
      required:
        - issuer
        - qrCodeLink
        - qrCodeRaw
        - sessionID
        - linkID
        - linkDetail
      properties:
        issuer:
          $ref: '#/components/schemas/IssuerDescription'
        qrCodeRaw:
          type: string
        qrCodeLink:
          type: string
          example: iden3comm://?request_uri=https%3A%2F%2Fissuer-demo.polygonid.me%2Fapi%2Fqr-store%3Fid%3Df780a169-8959-4380-9461-f7200e2ed3f4
        sessionID:
          type: string
          example: ab5d5dbf-aaaa-bbbb-b983-f48afea64e05
        linkDetail:
          $ref: '#/components/schemas/LinkSimple'

    GetLinkQrCodeResponse:
      type: object
      required:
        - linkDetail
      properties:
        qrCode:
          type: string
          example: iden3comm://?request_uri=https%3A%2F%2Fissuer-demo.polygonid.me%2Fapi%2Fqr-store%3Fid%3Df780a169-8959-4380-9461-f7200e2ed3f4
        status:
          type: string
          example: done | pending | pendingPublish
        linkDetail:
          $ref: '#/components/schemas/LinkSimple'

    IssuerDescription:
      type: object
      required:
        - displayName
        - logo
      properties:
        displayName:
          type: string
          example: my issuer
        logo:
          type: string
          example: "http://my-public-logo/logo.jpg"

    LinkSimple:
      type: object
      required:
        - id
        - schemaUrl
        - schemaType
        - proofTypes
        - schemaHash
      properties:
        id:
          type: string
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
          example: 8edd8112-c415-11ed-b036-debe37e1cbd6
        schemaUrl:
          type: string
          example: https://someValidURL.com
        schemaType:
          type: string
          example: KYCAgeCredential
        schemaHash:
          type: string
          example: c9b2370371b7fa8b3dab2a5ba81b6838
        proofTypes:
          type: array
          items:
            type: string
          example: [ "BJJSignature2021" ]

  parameters:
    credentialStatusType:
      name: credentialStatusType
      in: query
      required: false
      description: |
        credential status type, e.g: Iden3ReverseSparseMerkleTreeProof
      schema:
        type: string

    id:
      name: id
      in: path
      required: true
      description: |
        UUID parameter, e.g: 8edd8112-c415-11ed-b036-debe37e1cbd6
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    linkID:
      name: linkID
      in: query
      required: true
      description: |
        Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    sessionID:
      name: sessionID
      in: query
      required: true
      description: |
        Session ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          name: uuid
          path: github.com/google/uuid

    pathIdentifier:
      name: identifier
      in: path
      required: true
      description: Issuer identifier
      schema:
        type: string

    pathClaim:
      name: id
      in: path
      required: true
      description: Claim identifier
      schema:
        type: string

    pathNonce:
      name: nonce
      in: path
      required: true
      description: Claim nonce
      schema:
        type: integer
        format: int64


  responses:
    '400':
      description: 'Bad Request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '401':
      description: 'Unauthorized'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '402':
      description: 'Payment Required'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '403':
      description: 'Permission Denied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '404':
      description: 'Not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '409':
      description: 'Conflict'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '407':
      description: 'Proxy Authentication Required'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '422':
      description: 'Unprocessable Content'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '500':
      description: 'Internal Server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorMessage'
    '500-CreateIdentity':
      description: 'Internal Server error'
      content:
        application/json:
          schema:
            type: object
            properties:
              requestID:
                type: string
              code:
                type: integer
              error:
                type: string
